name: cdp

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    branches: [master]

jobs:
  build-test-rust:
    name: Build & test rust
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Run cargo build
        continue-on-error: false
        run: |
          cargo build --frozen --release --examples

      - name: Run cargo test
        if: always()  
        continue-on-error: true
        run: |
          cargo test --release --frozen --all-features --all-targets --no-fail-fast -- -Z unstable-options --format junit --report-time --include-ignored --shuffle | tee results.raw
        shell: pwsh

      - name: Split test results
        if: always()  
        continue-on-error: true
        run: |
          Remove-Item -Recurse -Force -Path ./test-results -ErrorAction SilentlyContinue
          New-Item -Force -ItemType Directory -Path ./test-results
          $n = 0
          Get-Content ./results.raw | % { $_ | Out-File -FilePath "./test-results/testsuite.$n.xml" -Encoding utf8 -Force; $n++ }
        shell: pwsh

      - name: Publish test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Test results
          path: test-results/**/*.xml
          reporter: java-junit
          fail-on-error: 'true'
          fail-on-empty: 'true'
          list-tests: 'failed'

  lint-rust:
    name: Lint rust
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        continue-on-error: false
        run: |
          cargo fmt --all -- --check

      - name: Run cargo clippy
        continue-on-error: false
        run: |
          cargo clippy --all-targets --all-features -- -D warnings

  finish:
    name: Finish
    needs: [build-test-rust, lint-rust]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Done..."
