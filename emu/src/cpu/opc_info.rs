use super::cmn::OpCodeInfo;

/*
To regenerate this run
$map = @{}; gc -Raw "D:\src\u\s\lib\src\opcodes.json" | ConvertFrom-Json | sort -Property opc | % { $map[$_.opc] = '/* 0x{0:x2} */ OpCodeInfo {{ addressing: "{1}", assembler: "{2}", bytes: {3}, cycles: {}", }},' -f ($_.opc, $_.addressing, $_.assembler, $_.bytes, $_.cycles) }
0..0xff | % { $opc = "{0:X2}" -f $_; if ($map.Contains($opc)) { "    {0}" -f $map[$opc] } else { '    /* 0x{0} */
 OpCodeInfo {{ addressing: "?", assembler: "???", bytes: 1, cycles: 0", },' -f $opc } }
*/
/// NOTE: See opcodes.json
#[rustfmt::skip]
pub const ALL: &[OpCodeInfo; 0x1_00] = &[
    /* 0x00 */ OpCodeInfo { addressing: "impl", assembler: "BRK", bytes: 1, cycles: 7, },
    /* 0x01 */ OpCodeInfo { addressing: "(ind,X)", assembler: "ORA (oper,X)", bytes: 2, cycles: 6, },
    /* 0x02 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x03 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x04 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x05 */ OpCodeInfo { addressing: "zpg", assembler: "ORA oper", bytes: 2, cycles: 3, },
    /* 0x06 */ OpCodeInfo { addressing: "zpg", assembler: "ASL oper", bytes: 2, cycles: 5, },
    /* 0x07 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x08 */ OpCodeInfo { addressing: "impl", assembler: "PHP", bytes: 1, cycles: 3, },
    /* 0x09 */ OpCodeInfo { addressing: "#", assembler: "ORA #oper", bytes: 2, cycles: 2, },
    /* 0x0A */ OpCodeInfo { addressing: "A", assembler: "ASL A", bytes: 1, cycles: 2, },
    /* 0x0B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x0C */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x0D */ OpCodeInfo { addressing: "abs", assembler: "ORA oper", bytes: 3, cycles: 4, },
    /* 0x0E */ OpCodeInfo { addressing: "abs", assembler: "ASL oper", bytes: 3, cycles: 6, },
    /* 0x0F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x10 */ OpCodeInfo { addressing: "rel", assembler: "BPL oper", bytes: 2, cycles: 2+1, },
    /* 0x11 */ OpCodeInfo { addressing: "(ind),Y", assembler: "ORA (oper),Y", bytes: 2, cycles: 5+1, },
    /* 0x12 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x13 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x14 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x15 */ OpCodeInfo { addressing: "zpg,X", assembler: "ORA oper,X", bytes: 2, cycles: 4, },
    /* 0x16 */ OpCodeInfo { addressing: "zpg,X", assembler: "ASL oper,X", bytes: 2, cycles: 6, },
    /* 0x17 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x18 */ OpCodeInfo { addressing: "impl", assembler: "CLC", bytes: 1, cycles: 2, },
    /* 0x19 */ OpCodeInfo { addressing: "abs,Y", assembler: "ORA oper,Y", bytes: 3, cycles: 4+1, },
    /* 0x1A */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x1B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x1C */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x1D */ OpCodeInfo { addressing: "abs,X", assembler: "ORA oper,X", bytes: 3, cycles: 4+1, },
    /* 0x1E */ OpCodeInfo { addressing: "abs,X", assembler: "ASL oper,X", bytes: 3, cycles: 7, },
    /* 0x1F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x20 */ OpCodeInfo { addressing: "abs", assembler: "JSR oper", bytes: 3, cycles: 6, },
    /* 0x21 */ OpCodeInfo { addressing: "(ind,X)", assembler: "AND (oper,X)", bytes: 2, cycles: 6, },
    /* 0x22 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x23 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x24 */ OpCodeInfo { addressing: "zpg", assembler: "BIT oper", bytes: 2, cycles: 3, },
    /* 0x25 */ OpCodeInfo { addressing: "zpg", assembler: "AND oper", bytes: 2, cycles: 3, },
    /* 0x26 */ OpCodeInfo { addressing: "zpg", assembler: "ROL oper", bytes: 2, cycles: 5, },
    /* 0x27 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x28 */ OpCodeInfo { addressing: "impl", assembler: "PLP", bytes: 1, cycles: 4, },
    /* 0x29 */ OpCodeInfo { addressing: "#", assembler: "AND #oper", bytes: 2, cycles: 2, },
    /* 0x2A */ OpCodeInfo { addressing: "A", assembler: "ROL A", bytes: 1, cycles: 2, },
    /* 0x2B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x2C */ OpCodeInfo { addressing: "abs", assembler: "BIT oper", bytes: 3, cycles: 4, },
    /* 0x2D */ OpCodeInfo { addressing: "abs", assembler: "AND oper", bytes: 3, cycles: 4, },
    /* 0x2E */ OpCodeInfo { addressing: "abs", assembler: "ROL oper", bytes: 3, cycles: 6, },
    /* 0x2F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x30 */ OpCodeInfo { addressing: "rel", assembler: "BMI oper", bytes: 2, cycles: 2+1, },
    /* 0x31 */ OpCodeInfo { addressing: "(ind),Y", assembler: "AND (oper),Y", bytes: 2, cycles: 5+1, },
    /* 0x32 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x33 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x34 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x35 */ OpCodeInfo { addressing: "zpg,X", assembler: "AND oper,X", bytes: 2, cycles: 4, },
    /* 0x36 */ OpCodeInfo { addressing: "zpg,X", assembler: "ROL oper,X", bytes: 2, cycles: 6, },
    /* 0x37 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x38 */ OpCodeInfo { addressing: "impl", assembler: "SEC", bytes: 1, cycles: 2, },
    /* 0x39 */ OpCodeInfo { addressing: "abs,Y", assembler: "AND oper,Y", bytes: 3, cycles: 4+1, },
    /* 0x3A */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x3B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x3C */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x3D */ OpCodeInfo { addressing: "abs,X", assembler: "AND oper,X", bytes: 3, cycles: 4+1, },
    /* 0x3E */ OpCodeInfo { addressing: "abs,X", assembler: "ROL oper,X", bytes: 3, cycles: 7, },
    /* 0x3F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x40 */ OpCodeInfo { addressing: "impl", assembler: "RTI", bytes: 1, cycles: 6, },
    /* 0x41 */ OpCodeInfo { addressing: "(ind,X)", assembler: "EOR (oper,X)", bytes: 2, cycles: 6, },
    /* 0x42 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x43 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x44 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x45 */ OpCodeInfo { addressing: "zpg", assembler: "EOR oper", bytes: 2, cycles: 3, },
    /* 0x46 */ OpCodeInfo { addressing: "zpg", assembler: "LSR oper", bytes: 2, cycles: 5, },
    /* 0x47 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x48 */ OpCodeInfo { addressing: "impl", assembler: "PHA", bytes: 1, cycles: 3, },
    /* 0x49 */ OpCodeInfo { addressing: "#", assembler: "EOR #oper", bytes: 2, cycles: 2, },
    /* 0x4A */ OpCodeInfo { addressing: "A", assembler: "LSR A", bytes: 1, cycles: 2, },
    /* 0x4B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x4C */ OpCodeInfo { addressing: "abs", assembler: "JMP oper", bytes: 3, cycles: 3, },
    /* 0x4D */ OpCodeInfo { addressing: "abs", assembler: "EOR oper", bytes: 3, cycles: 4, },
    /* 0x4E */ OpCodeInfo { addressing: "abs", assembler: "LSR oper", bytes: 3, cycles: 6, },
    /* 0x4F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x50 */ OpCodeInfo { addressing: "rel", assembler: "BVC oper", bytes: 2, cycles: 2+1, },
    /* 0x51 */ OpCodeInfo { addressing: "(ind),Y", assembler: "EOR (oper),Y", bytes: 2, cycles: 5+1, },
    /* 0x52 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x53 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x54 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x55 */ OpCodeInfo { addressing: "zpg,X", assembler: "EOR oper,X", bytes: 2, cycles: 4, },
    /* 0x56 */ OpCodeInfo { addressing: "zpg,X", assembler: "LSR oper,X", bytes: 2, cycles: 6, },
    /* 0x57 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x58 */ OpCodeInfo { addressing: "impl", assembler: "CLI", bytes: 1, cycles: 2, },
    /* 0x59 */ OpCodeInfo { addressing: "abs,Y", assembler: "EOR oper,Y", bytes: 3, cycles: 4+1, },
    /* 0x5A */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x5B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x5C */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x5D */ OpCodeInfo { addressing: "abs,X", assembler: "EOR oper,X", bytes: 3, cycles: 4+1, },
    /* 0x5E */ OpCodeInfo { addressing: "abs,X", assembler: "LSR oper,X", bytes: 3, cycles: 7, },
    /* 0x5F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x60 */ OpCodeInfo { addressing: "impl", assembler: "RTS", bytes: 1, cycles: 6, },
    /* 0x61 */ OpCodeInfo { addressing: "(ind,X)", assembler: "ADC (oper,X)", bytes: 2, cycles: 6, },
    /* 0x62 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x63 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x64 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x65 */ OpCodeInfo { addressing: "zpg", assembler: "ADC oper", bytes: 2, cycles: 3, },
    /* 0x66 */ OpCodeInfo { addressing: "zpg", assembler: "ROR oper", bytes: 2, cycles: 5, },
    /* 0x67 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x68 */ OpCodeInfo { addressing: "impl", assembler: "PLA", bytes: 1, cycles: 4, },
    /* 0x69 */ OpCodeInfo { addressing: "#", assembler: "ADC #oper", bytes: 2, cycles: 2, },
    /* 0x6A */ OpCodeInfo { addressing: "A", assembler: "ROR A", bytes: 1, cycles: 2, },
    /* 0x6B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x6C */ OpCodeInfo { addressing: "ind", assembler: "JMP (oper)", bytes: 3, cycles: 5, },
    /* 0x6D */ OpCodeInfo { addressing: "abs", assembler: "ADC oper", bytes: 3, cycles: 4, },
    /* 0x6E */ OpCodeInfo { addressing: "abs", assembler: "ROR oper", bytes: 3, cycles: 6, },
    /* 0x6F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x70 */ OpCodeInfo { addressing: "rel", assembler: "BVS oper", bytes: 2, cycles: 2+1, },
    /* 0x71 */ OpCodeInfo { addressing: "(ind),Y", assembler: "ADC (oper),Y", bytes: 2, cycles: 5+1, },
    /* 0x72 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x73 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x74 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x75 */ OpCodeInfo { addressing: "zpg,X", assembler: "ADC oper,X", bytes: 2, cycles: 4, },
    /* 0x76 */ OpCodeInfo { addressing: "zpg,X", assembler: "ROR oper,X", bytes: 2, cycles: 6, },
    /* 0x77 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x78 */ OpCodeInfo { addressing: "impl", assembler: "SEI", bytes: 1, cycles: 2, },
    /* 0x79 */ OpCodeInfo { addressing: "abs,Y", assembler: "ADC oper,Y", bytes: 3, cycles: 4+1, },
    /* 0x7A */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x7B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x7C */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x7D */ OpCodeInfo { addressing: "abs,X", assembler: "ADC oper,X", bytes: 3, cycles: 4+1, },
    /* 0x7E */ OpCodeInfo { addressing: "abs,X", assembler: "ROR oper,X", bytes: 3, cycles: 7, },
    /* 0x7F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x80 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x81 */ OpCodeInfo { addressing: "(ind,X)", assembler: "STA (oper,X)", bytes: 2, cycles: 6, },
    /* 0x82 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x83 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x84 */ OpCodeInfo { addressing: "zpg", assembler: "STY oper", bytes: 2, cycles: 3, },
    /* 0x85 */ OpCodeInfo { addressing: "zpg", assembler: "STA oper", bytes: 2, cycles: 3, },
    /* 0x86 */ OpCodeInfo { addressing: "zpg", assembler: "STX oper", bytes: 2, cycles: 3, },
    /* 0x87 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x88 */ OpCodeInfo { addressing: "impl", assembler: "DEY", bytes: 1, cycles: 2, },
    /* 0x89 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x8A */ OpCodeInfo { addressing: "impl", assembler: "TXA", bytes: 1, cycles: 2, },
    /* 0x8B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x8C */ OpCodeInfo { addressing: "abs", assembler: "STY oper", bytes: 3, cycles: 4, },
    /* 0x8D */ OpCodeInfo { addressing: "abs", assembler: "STA oper", bytes: 3, cycles: 4, },
    /* 0x8E */ OpCodeInfo { addressing: "abs", assembler: "STX oper", bytes: 3, cycles: 4, },
    /* 0x8F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x90 */ OpCodeInfo { addressing: "rel", assembler: "BCC oper", bytes: 2, cycles: 2+1, },
    /* 0x91 */ OpCodeInfo { addressing: "(ind),Y", assembler: "STA (oper),Y", bytes: 2, cycles: 6+1 },
    /* 0x92 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x93 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x94 */ OpCodeInfo { addressing: "zpg,X", assembler: "STY oper,X", bytes: 2, cycles: 4, },
    /* 0x95 */ OpCodeInfo { addressing: "zpg,X", assembler: "STA oper,X", bytes: 2, cycles: 4, },
    /* 0x96 */ OpCodeInfo { addressing: "zpg,Y", assembler: "STX oper,Y", bytes: 2, cycles: 4, },
    /* 0x97 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x98 */ OpCodeInfo { addressing: "impl", assembler: "TYA", bytes: 1, cycles: 2, },
    /* 0x99 */ OpCodeInfo { addressing: "abs,Y", assembler: "STA oper,Y", bytes: 3, cycles: 5, },
    /* 0x9A */ OpCodeInfo { addressing: "impl", assembler: "TXS", bytes: 1, cycles: 2, },
    /* 0x9B */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x9C */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x9D */ OpCodeInfo { addressing: "abs,X", assembler: "STA oper,X", bytes: 3, cycles: 5, },
    /* 0x9E */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0x9F */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xA0 */ OpCodeInfo { addressing: "#", assembler: "LDY #oper", bytes: 2, cycles: 2, },
    /* 0xA1 */ OpCodeInfo { addressing: "(ind,X)", assembler: "LDA (oper,X)", bytes: 2, cycles: 6, },
    /* 0xA2 */ OpCodeInfo { addressing: "#", assembler: "LDX #oper", bytes: 2, cycles: 2, },
    /* 0xA3 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xA4 */ OpCodeInfo { addressing: "zpg", assembler: "LDY oper", bytes: 2, cycles: 3, },
    /* 0xA5 */ OpCodeInfo { addressing: "zpg", assembler: "LDA oper", bytes: 2, cycles: 3, },
    /* 0xA6 */ OpCodeInfo { addressing: "zpg", assembler: "LDX oper", bytes: 2, cycles: 3, },
    /* 0xA7 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xA8 */ OpCodeInfo { addressing: "impl", assembler: "TAY", bytes: 1, cycles: 2, },
    /* 0xA9 */ OpCodeInfo { addressing: "#", assembler: "LDA #oper", bytes: 2, cycles: 2, },
    /* 0xAA */ OpCodeInfo { addressing: "impl", assembler: "TAX", bytes: 1, cycles: 2, },
    /* 0xAB */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xAC */ OpCodeInfo { addressing: "abs", assembler: "LDY oper", bytes: 3, cycles: 4, },
    /* 0xAD */ OpCodeInfo { addressing: "abs", assembler: "LDA oper", bytes: 3, cycles: 4, },
    /* 0xAE */ OpCodeInfo { addressing: "abs", assembler: "LDX oper", bytes: 3, cycles: 4, },
    /* 0xAF */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xB0 */ OpCodeInfo { addressing: "rel", assembler: "BCS oper", bytes: 2, cycles: 2+1, },
    /* 0xB1 */ OpCodeInfo { addressing: "(ind),Y", assembler: "LDA (oper),Y", bytes: 2, cycles: 5+1, },
    /* 0xB2 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xB3 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xB4 */ OpCodeInfo { addressing: "zpg,X", assembler: "LDY oper,X", bytes: 2, cycles: 4, },
    /* 0xB5 */ OpCodeInfo { addressing: "zpg,X", assembler: "LDA oper,X", bytes: 2, cycles: 4, },
    /* 0xB6 */ OpCodeInfo { addressing: "zpg,Y", assembler: "LDX oper,Y", bytes: 2, cycles: 4, },
    /* 0xB7 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xB8 */ OpCodeInfo { addressing: "impl", assembler: "CLV", bytes: 1, cycles: 2, },
    /* 0xB9 */ OpCodeInfo { addressing: "abs,Y", assembler: "LDA oper,Y", bytes: 3, cycles: 4+1, },
    /* 0xBA */ OpCodeInfo { addressing: "impl", assembler: "TSX", bytes: 1, cycles: 2, },
    /* 0xBB */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xBC */ OpCodeInfo { addressing: "abs,X", assembler: "LDY oper,X", bytes: 3, cycles: 4+1, },
    /* 0xBD */ OpCodeInfo { addressing: "abs,X", assembler: "LDA oper,X", bytes: 3, cycles: 4+1, },
    /* 0xBE */ OpCodeInfo { addressing: "abs,Y", assembler: "LDX oper,Y", bytes: 3, cycles: 4+1, },
    /* 0xBF */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xC0 */ OpCodeInfo { addressing: "#", assembler: "CPY #oper", bytes: 2, cycles: 2, },
    /* 0xC1 */ OpCodeInfo { addressing: "(ind,X)", assembler: "CMP (oper,X)", bytes: 2, cycles: 6, },
    /* 0xC2 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xC3 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xC4 */ OpCodeInfo { addressing: "zpg", assembler: "CPY oper", bytes: 2, cycles: 3, },
    /* 0xC5 */ OpCodeInfo { addressing: "zpg", assembler: "CMP oper", bytes: 2, cycles: 3, },
    /* 0xC6 */ OpCodeInfo { addressing: "zpg", assembler: "DEC oper", bytes: 2, cycles: 5, },
    /* 0xC7 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xC8 */ OpCodeInfo { addressing: "impl", assembler: "INY", bytes: 1, cycles: 2, },
    /* 0xC9 */ OpCodeInfo { addressing: "#", assembler: "CMP #oper", bytes: 2, cycles: 2, },
    /* 0xCA */ OpCodeInfo { addressing: "impl", assembler: "DEX", bytes: 1, cycles: 2, },
    /* 0xCB */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xCC */ OpCodeInfo { addressing: "abs", assembler: "CPY oper", bytes: 3, cycles: 4, },
    /* 0xCD */ OpCodeInfo { addressing: "abs", assembler: "CMP oper", bytes: 3, cycles: 4, },
    /* 0xCE */ OpCodeInfo { addressing: "abs", assembler: "DEC oper", bytes: 3, cycles: 6, },
    /* 0xCF */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xD0 */ OpCodeInfo { addressing: "rel", assembler: "BNE oper", bytes: 2, cycles: 2+1, },
    /* 0xD1 */ OpCodeInfo { addressing: "(ind),Y", assembler: "CMP (oper),Y", bytes: 2, cycles: 5+1, },
    /* 0xD2 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xD3 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xD4 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xD5 */ OpCodeInfo { addressing: "zpg,X", assembler: "CMP oper,X", bytes: 2, cycles: 4, },
    /* 0xD6 */ OpCodeInfo { addressing: "zpg,X", assembler: "DEC oper,X", bytes: 2, cycles: 6, },
    /* 0xD7 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xD8 */ OpCodeInfo { addressing: "impl", assembler: "CLD", bytes: 1, cycles: 2, },
    /* 0xD9 */ OpCodeInfo { addressing: "abs,Y", assembler: "CMP oper,Y", bytes: 3, cycles: 4+1, },
    /* 0xDA */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xDB */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xDC */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xDD */ OpCodeInfo { addressing: "abs,X", assembler: "CMP oper,X", bytes: 3, cycles: 4+1, },
    /* 0xDE */ OpCodeInfo { addressing: "abs,X", assembler: "DEC oper,X", bytes: 3, cycles: 7, },
    /* 0xDF */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xE0 */ OpCodeInfo { addressing: "#", assembler: "CPX #oper", bytes: 2, cycles: 2, },
    /* 0xE1 */ OpCodeInfo { addressing: "(ind,X)", assembler: "SBC (oper,X)", bytes: 2, cycles: 6, },
    /* 0xE2 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xE3 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xE4 */ OpCodeInfo { addressing: "zpg", assembler: "CPX oper", bytes: 2, cycles: 3, },
    /* 0xE5 */ OpCodeInfo { addressing: "zpg", assembler: "SBC oper", bytes: 2, cycles: 3, },
    /* 0xE6 */ OpCodeInfo { addressing: "zpg", assembler: "INC oper", bytes: 2, cycles: 5, },
    /* 0xE7 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xE8 */ OpCodeInfo { addressing: "impl", assembler: "INX", bytes: 1, cycles: 2, },
    /* 0xE9 */ OpCodeInfo { addressing: "#", assembler: "SBC #oper", bytes: 2, cycles: 2, },
    /* 0xEA */ OpCodeInfo { addressing: "impl", assembler: "NOP", bytes: 1, cycles: 2, },
    /* 0xEB */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xEC */ OpCodeInfo { addressing: "abs", assembler: "CPX oper", bytes: 3, cycles: 4, },
    /* 0xED */ OpCodeInfo { addressing: "abs", assembler: "SBC oper", bytes: 3, cycles: 4, },
    /* 0xEE */ OpCodeInfo { addressing: "abs", assembler: "INC oper", bytes: 3, cycles: 6, },
    /* 0xEF */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xF0 */ OpCodeInfo { addressing: "rel", assembler: "BEQ oper", bytes: 2, cycles: 2+1, },
    /* 0xF1 */ OpCodeInfo { addressing: "(ind),Y", assembler: "SBC (oper),Y", bytes: 2, cycles: 5+1, },
    /* 0xF2 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xF3 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xF4 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xF5 */ OpCodeInfo { addressing: "zpg,X", assembler: "SBC oper,X", bytes: 2, cycles: 4, },
    /* 0xF6 */ OpCodeInfo { addressing: "zpg,X", assembler: "INC oper,X", bytes: 2, cycles: 6, },
    /* 0xF7 */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xF8 */ OpCodeInfo { addressing: "impl", assembler: "SED", bytes: 1, cycles: 2, },
    /* 0xF9 */ OpCodeInfo { addressing: "abs,Y", assembler: "SBC oper,Y", bytes: 3, cycles: 4+1, },
    /* 0xFA */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xFB */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xFC */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
    /* 0xFD */ OpCodeInfo { addressing: "abs,X", assembler: "SBC oper,X", bytes: 3, cycles: 4+1, },
    /* 0xFE */ OpCodeInfo { addressing: "abs,X", assembler: "INC oper,X", bytes: 3, cycles: 7, },
    /* 0xFF */ OpCodeInfo { addressing: "?", assembler: "???", bytes: 1, cycles: 0, },
];
