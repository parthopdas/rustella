------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-specials-01-125th-Subscriber.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; -----------------------------------------------------
      2  10000 ????						; Special01: 125th Subscriber - Asymmetrical Playfield
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;   
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-specials-01-125th-Subscriber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	; Demonstrates a basic asymmetrical playfield
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-specials-01-125th-Subscriber.asm
      5  0000 ????						; 
      6  0000 ????						; This Episode on Youtube - https://youtu.be/3SIfWrnCjpQ
      7  0000 ????						;
      8  0000 ????						; Become a Patron - https://patreon.com/8blit
      9  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     10  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     11  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     12  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     13  0000 ????						; Visit the Website - https://www.8blit.com 
     14  0000 ????						;
     15  0000 ????						; Email - 8blit0@gmail.com
     16  0000 ????
     17  0000 ????
     18  0000 ????	       00 46	   COLPF      =	#$46	; Play field static color
     19  0000 ????	       00 b4	   ANIMDELAY  =	#180	; Frames between color change
     20  0000 ????	       00 0e	   COLMAXINDEX =	#14	; Total number of colors in the data
     21  0000 ????
     22 U0084 ????				      seg.u	vars	; uninitialized segment 
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   pf_index   ds	1	; current index we're reading for the pf data
     26 U0081		       00	   pf_count   ds	1	; number of scanlines left in the pf segment
     27 U0082		       00	   anim_count ds	1	; number of frames left to display current color
     28 U0083		       00	   col_index  ds	1	; current index of the color we're displaying
     29 U0084
     30  10000 ????				       seg	main	; start of main segment
     31  f000					      org	$F000
     32  f000
     33  f000
      0  f000				   reset      CLEAN_START		; macro included in macro.h file
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002				  -	      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002				  -	      lxa	#0
      6  f002					      ELSE
      7  f002		       a2 00		      ldx	#0
      8  f004		       8a		      txa
      9  f005					      ENDIF
     10  f005		       a8		      tay
     11  f006		       ca	   .CLEAR_STACK dex
     12  f007		       9a		      txs
     13  f008		       48		      pha
     14  f009		       d0 fb		      bne	.CLEAR_STACK
     15  f00b
     35  f00b
     36  f00b		       a9 01		      lda	#1	; (2) start with one because going into the frame we're going to decrement
     37  f00d		       85 83		      sta	col_index	; (3)
     38  f00f		       85 82		      sta	anim_count	; (3)
     39  f011
     40  f011		       a9 46		      lda	#COLPF	; (2)
     41  f013		       85 08		      sta	COLUPF	; (3) set the playfield color
     42  f015
     43  f015		       a9 8b		      lda	#%10001011	; (2) stripped line
     44  f017		       85 1b		      sta	GRP0	; (3) graphic Player 0 
     45  f019		       a9 f0		      lda	#%11110000	; (2) set the horizontal movement player 0 (HMP0) register to adjust the position of
     46  f01b		       85 20		      sta	HMP0	; (3) 
     47  f01d
     48  f01d		       a9 d1		      lda	#%11010001	; (2) stripped line
     49  f01f		       85 1c		      sta	GRP1	; (3) graphic Player 1 		
     50  f021		       a9 20		      lda	#%00100000	; (2) set the horizontal movement player 1 (HMP0) register to adjust the position of
     51  f023		       85 21		      sta	HMP1	; (3) 
     52  f025
     53  f025		       a9 02		      lda	#%00000010	; (2) enaable
     54  f027		       85 1d		      sta	ENAM0	; (3) missle 0
     55  f029		       85 1e		      sta	ENAM1	; (3) missle 1
     56  f02b
     57  f02b		       a9 10		      lda	#%00010000	; (2) move left by 1
     58  f02d		       85 22		      sta	HMM0	; (3) apply move to missle 0
     59  f02f		       a9 30		      lda	#%00110000	; (2) move left by 3
     60  f031		       85 23		      sta	HMM1	; (3) apply move to missle 1
     61  f033
      0  f033				   nextframe  VERTICAL_SYNC		; macro included in macro.h file
      1  f033		       a9 0e		      lda	#%1110
      2  f035		       85 02	   .VSLP1     sta	WSYNC
      3  f037		       85 00		      sta	VSYNC
      4  f039		       4a		      lsr
      5  f03a		       d0 f9		      bne	.VSLP1
     63  f03c
     64  f03c		       a2 23		      ldx	#35	; (2)	
     65  f03e		       85 02	   lvblank    sta	WSYNC	; (3) each scanline is 228 color clocks, 76 machine cycles
     66  f040		       ca		      dex		; (2) decrement x by 1
     67  f041		       d0 fb		      bne	lvblank	; (2/3) branch if not equal x != 37
     68  f043
     69  f043		       85 2a		      sta	HMOVE	; (3) horizontal move. this will move ALL the player, missle, and ball graphics at the same time
     70  f045							; HMOVE needs to execute during horizontal blanking so it should be done immediatly following 
     71  f045							; a WSYNC. Additionally, any of the horizontal movement registers should not be modified within at least
     72  f045							; 24 machine cycles after an HMOVE. 
     73  f045
     74  f045		       c6 82		      dec	anim_count	; (5) 
     75  f047		       d0 17		      bne	continuecount	; (2/3) branch is index is NOT 0
     76  f049
     77  f049		       a9 b4		      lda	#ANIMDELAY	; (2)
     78  f04b		       85 82		      sta	anim_count	; (3) reset anim_count
     79  f04d
     80  f04d		       c6 83		      dec	col_index	; (5)
     81  f04f		       d0 04		      bne	positiveindex	; (2/3) branch if index is NOT 0
     82  f051
     83  f051		       a0 0e		      ldy	#COLMAXINDEX	; (2)
     84  f053		       84 83		      sty	col_index	; (3) reset color index
     85  f055
     86  f055				   positiveindex
     87  f055
     88  f055		       a4 83		      ldy	col_index	; (2) get color index
     89  f057		       be 00 f1 	      ldx	pcolors,y	; (2) get the color at the specified index
     90  f05a		       86 09		      stx	COLUBK	; (3) set background color
     91  f05c		       86 06		      stx	COLUP0	; (3) set player 0 color
     92  f05e		       86 07		      stx	COLUP1	; (3) set player 1 color
     93  f060
     94  f060				   continuecount
     95  f060
     96  f060		       85 02		      sta	WSYNC	; (3)
     97  f062							; 76543210
     98  f062		       a9 00		      lda	#%00000000	; (2) set D1 to 0 to end VBLANK
     99  f064		       85 01		      sta	VBLANK	; (3) turn on the beam
    100  f066
    101  f066		       a0 00		      ldy	#0	; (2) start playfield index at 0
    102  f068		       84 80		      sty	pf_index	; (3) which index in the pf data
    103  f06a		       84 81		      sty	pf_count	; (3) which segment of playfield we're currently on
    104  f06c		       e6 81		      inc	pf_count	; (5) start on the first segment
    105  f06e
    106  f06e		       85 02		      sta	WSYNC	; (3)
    107  f070
    108  f070				   kernel
    109  f070
    110  f070							; do we need to draw a line?
    111  f070
    112  f070		       c6 81		      dec	pf_count	; (5)
    113  f072		       f0 08		      beq	newsegment	; (2/3) branch if 0
    114  f074
    115  f074		       a5 80		      lda	pf_index	; (2) get the current index
    116  f076		       e9 02		      sbc	#2	; (2) move back 2 spaces
    117  f078		       a8		      tay		; (2)
    118  f079
    119  f079		       4c 84 f0 	      jmp	continuesegment	; (3)
    120  f07c
    121  f07c				   newsegment
    122  f07c
    123  f07c		       b9 0f f1 	      lda	pf_0,y	; (4) get how many lines in the segment
    124  f07f		       f0 2a		      beq	pfdone	; (2) there are no more lines to draw
    125  f081
    126  f081		       85 81		      sta	pf_count	; (3) keep a running count of lines remaining
    127  f083		       c8		      iny		; (2)
    128  f084
    129  f084				   continuesegment
    130  f084
    131  f084		       85 02		      sta	WSYNC	; (3)	    
    132  f086
    133  f086							; left side
    134  f086
    135  f086		       a9 00		      lda	#0	; (2) load PF0
    136  f088		       85 0d		      sta	PF0	; (3)			 
    137  f08a		       b9 2b f1 	      lda	pf_1,y	; (4) load PF1
    138  f08d		       85 0e		      sta	PF1	; (3)			 
    139  f08f		       b9 47 f1 	      lda	pf_2,y	; (4) load PF2
    140  f092		       85 0f		      sta	PF2	; (3)			 
    141  f094		       c8		      iny		; (2)
    142  f095
    143  f095							; right side
    144  f095		       b9 0f f1 	      lda	pf_0,y	; (4) load PF0
    145  f098		       85 0d		      sta	PF0	; (3)		   
    146  f09a		       b9 2b f1 	      lda	pf_1,y	; (4) load PF1    
    147  f09d		       c8		      iny		; (2)
    148  f09e		       84 80		      sty	pf_index	; (3) save the current index
    149  f0a0		       85 0e		      sta	PF1	; (3)		   
    150  f0a2		       a9 00		      lda	#0	; (2) load PF2
    151  f0a4		       ea		      nop
    152  f0a5		       ea		      nop
    153  f0a6		       85 0f		      sta	PF2	; (3)		    
    154  f0a8
    155  f0a8		       4c 70 f0 	      jmp	kernel	; (3)
    156  f0ab
    157  f0ab				   pfdone
    158  f0ab
    159  f0ab		       85 02		      sta	WSYNC
    160  f0ad
    161  f0ad							; 76543210
    162  f0ad		       a9 02		      lda	#%00000010	; (2) set D1 = 1 to initiate VBLANK 
    163  f0af		       85 01		      sta	VBLANK	; (3) turn off the beam		 
    164  f0b1
    165  f0b1
    166  f0b1		       a2 25		      ldx	#37	; (2)
    167  f0b3		       85 02	   overscan   sta	WSYNC	; (3)
    168  f0b5		       ca		      dex		; (2)
    169  f0b6		       d0 fb		      bne	overscan	; (2/3)
    170  f0b8
    171  f0b8		       4c 33 f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    172  f0bb
    173  f100		       00 00 00 00*	      align	$100	; 
    174  f100
    175  f100				   pcolors
    176  f100		       1e 2e 3e 4e*	      .byte.b	#$1E, #$2E, #$3E, #$4E, #$5E, #$6E, #$7E, #$8E, #$9E, #$AE, #$BE, #$CE, #$DE, #$EE, #$FE
    177  f10f
    178  f10f							; pf_0 in reverse order
    179  f10f
    180  f10f				   pf_0 		;  left     right  
    181  f10f		       26 00 00 	      .byte.b	38, %00000000, %00000000
    182  f112		       0f 00 00 	      .byte.b	15, %00000000, %00000000
    183  f115		       0f 00 30 	      .byte.b	15, %00000000, %00110000
    184  f118		       0f 00 30 	      .byte.b	15, %00000000, %00110000
    185  f11b		       0f 00 00 	      .byte.b	15, %00000000, %00000000
    186  f11e		       0f 00 00 	      .byte.b	15, %00000000, %00000000
    187  f121		       0f 00 00 	      .byte.b	15, %00000000, %00000000
    188  f124		       0f 00 30 	      .byte.b	15, %00000000, %00110000
    189  f127		       26 00 00 	      .byte.b	38, %00000000, %00000000
    190  f12a		       00		      .byte.b	0
    191  f12b
    192  f12b				   pf_1 		;  left     right  
    193  f12b		       3c 00 00 	      .byte.b	60, %00000000, %00000000
    194  f12e		       0f 0c 7f 	      .byte.b	15, %00001100, %01111111
    195  f131		       0f 1c 60 	      .byte.b	15, %00011100, %01100000
    196  f134		       0f 0c 60 	      .byte.b	15, %00001100, %01100000
    197  f137		       0f 0c 1c 	      .byte.b	15, %00001100, %00011100
    198  f13a		       0f 0c 03 	      .byte.b	15, %00001100, %00000011
    199  f13d		       0f 0c 03 	      .byte.b	15, %00001100, %00000011
    200  f140		       0f 1e 7c 	      .byte.b	15, %00011110, %01111100
    201  f143		       3c 00 00 	      .byte.b	60, %00000000, %00000000
    202  f146		       00		      .byte.b	0
    203  f147
    204  f147							; pf_2 in reverse order 
    205  f147
    206  f147				   pf_2 		;  left     right 
    207  f147		       00 00 00 	      .byte.b	0, %00000000, %00000000
    208  f14a		       00 f0 00 	      .byte.b	0, %11110000, %00000000
    209  f14d		       00 0c 00 	      .byte.b	0, %00001100, %00000000
    210  f150		       00 00 00 	      .byte.b	0, %00000000, %00000000
    211  f153		       00 c0 00 	      .byte.b	0, %11000000, %00000000
    212  f156		       00 30 00 	      .byte.b	0, %00110000, %00000000
    213  f159		       00 0c 00 	      .byte.b	0, %00001100, %00000000
    214  f15c		       00 fc 00 	      .byte.b	0, %11111100, %00000000
    215  f15f		       00 00 00 	      .byte.b	0, %00000000, %00000000
    216  f162
    217  f162
    218  fffa					      org	$FFFA
    219  fffa
    220  fffa				   irq
    221  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    222  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    223  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    224  10000
    225  10000
