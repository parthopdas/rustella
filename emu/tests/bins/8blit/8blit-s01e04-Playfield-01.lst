------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s01e04-Playfield-01.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; s01e04 Draw the playfield on an Atari 2600
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	; This example uses the TIA PF0, PF1, PF2, and CTLRPF 
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s01e04-Playfield-01.asm
      3  0000 ????						; Registers to draw playfield graphics using one register at a time
      4  0000 ????						; first in normal mode, and then in mirrored
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/K3LcLcstZE8
      7  0000 ????						;
      8  0000 ????						; Become a Patron - https://patreon.com/8blit
      9  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     10  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     11  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     12  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     13  0000 ????						; Visit the Website - https://www.8blit.com 
     14  0000 ????						;
     15  0000 ????						; Email - 8blit0@gmail.com
     16  0000 ????
     17  0000 ????	       00 38	   PF0COL     equ	#$38
     18  0000 ????	       00 b8	   PF1COL     equ	#$B8
     19  0000 ????	       00 9a	   PF2COL     equ	#$9A
     20  0000 ????
     21  0000 ????	       00 80	   ANISEQ     equ	$80	; Animation sequence 0 = PF0, 1 = PF1, 2 = PF2, 3 = PF0-mirrored, 4 = PF1-mirrored, 5 = PF2-mirrored
     22  0000 ????	       00 84	   CTRLPF_SHADOW equ	$84	; Working copy of CTRLPF register. It's write only and handles multiple functions so if we're going
     23  0000 ????						; to modify it we want to modify our clone, and they push that to the register.
     24  0000 ????	       00 78	   ANISPEED   equ	120	; Speed of animation/frames per update. 1 sequence every 2 seconds.
     25  0000 ????
     26  0000 ????						; ------------------------- Start of main segment ---------------------------------
     27  0000 ????
     28  10000 ????				       seg	main
     29  f000					      org	$F000
     30  f000
     31  f000							; ------------------------- Start of program execution ----------------------------
     32  f000
     33  f000		       a2 00	   reset      ldx	#0	; Clear RAM and all TIA registers
     34  f002		       a9 00		      lda	#0
     35  f004
     36  f004		       95 00	   clear      sta	0,x	; $0 to $7F (0-127) reserved OS page zero, $80 to $FF (128-255) user zero page ram.
     37  f006		       e8		      inx
     38  f007		       d0 fb		      bne	clear
     39  f009
     40  f009		       a9 00		      lda	#0
     41  f00b		       85 80		      sta	ANISEQ	; Initialize to 0
     42  f00d		       85 84		      sta	CTRLPF_SHADOW	; Initialize to 0
     43  f00f
     44  f00f		       a0 77		      ldy	#ANISPEED-1	; Use reg y for animation timer. Initialize with TIMETOCHANGE to trigger the first screen update. 
     45  f011							; The -1 is interpreted by the compiler before execution.
     46  f011
     47  f011							; --------------------------- Begin main loop -------------------------------------
     48  f011
     49  f011		       a9 00	   startframe lda	#0	; Start of new frame
     50  f013		       85 01		      sta	VBLANK	; Start of vertical blank processing
     51  f015		       a9 02		      lda	#%0000010	; Writing a bit into the D1 vsync latch
     52  f017		       85 00		      sta	VSYNC
     53  f019		       85 02		      sta	WSYNC
     54  f01b		       85 02		      sta	WSYNC
     55  f01d		       85 02		      sta	WSYNC	; 3 scanlines of VSYNC signal
     56  f01f		       a9 00		      lda	#0
     57  f021		       85 00		      sta	VSYNC
     58  f023
     59  f023							; -------------------------- START 37 SCANLINES OF VBLANK -------------------------
     60  f023
     61  f023		       c8		      iny		; Increment speed count by 1
     62  f024		       c0 78		      cpy	#ANISPEED
     63  f026		       d0 5c		      bne	skipframe	; If we're not switching animation sequences then skip ahead 
     64  f028
     65  f028		       a0 00		      ldy	#0	; Reset the counter
     66  f02a
     67  f02a		       a9 00		      lda	#0	; Reset all the PF registers to clear the pf
     68  f02c		       85 0d		      sta	PF0
     69  f02e		       85 0e		      sta	PF1
     70  f030		       85 0f		      sta	PF2
     71  f032
     72  f032		       a5 84		      lda	CTRLPF_SHADOW	; Get our shadow copy of the CTRLPF register
     73  f034
     74  f034		       a6 80		      ldx	ANISEQ
     75  f036		       e0 03		      cpx	#3
     76  f038		       b0 05		      bcs	mirrorpf	; Branch if greater than or equal to 3  (>=3)
     77  f03a
     78  f03a		       29 fe		      and	#%11111110	; Set playfield to normal. Turn off D0 and leave all the other bits along.
     79  f03c		       4c 41 f0 	      jmp	setctrlpf
     80  f03f
     81  f03f		       09 01	   mirrorpf   ora	#%00000001	; Set playfield to mirrored. Turn on D0 and leave all the other bits alone.
     82  f041
     83  f041		       85 84	   setctrlpf  sta	CTRLPF_SHADOW	; Update our shadow copy of the CTRLPF register
     84  f043		       85 0a		      sta	CTRLPF	; Apply same changes to the CTRLPF register directly
     85  f045
     86  f045		       a5 80		      lda	ANISEQ	; Based on current seq, jump drawing pf
     87  f047		       c9 00		      cmp	#0	; Animation sequence 0
     88  f049		       f0 14		      beq	sq1	; Break if equal = 0 (=0)
     89  f04b		       c9 01		      cmp	#1	; Animation sequence 1
     90  f04d		       f0 19		      beq	sq2
     91  f04f		       c9 02		      cmp	#2	; Animation sequence 2
     92  f051		       f0 1e		      beq	sq3
     93  f053		       c9 03		      cmp	#3	; Animation sequence 3
     94  f055		       f0 08		      beq	sq1
     95  f057		       c9 04		      cmp	#4	; Animation sequence 4
     96  f059		       f0 0d		      beq	sq2
     97  f05b		       c9 05		      cmp	#5	; Animation sequence 5
     98  f05d		       f0 12		      beq	sq3
     99  f05f
    100  f05f		       a9 f0	   sq1	      lda	#%11110000	; The pattern we want display
    101  f061		       85 0d		      sta	PF0	; 4 bit register, reversed
    102  f063		       a9 38		      lda	#PF0COL
    103  f065		       4c 77 f0 	      jmp	seqset
    104  f068
    105  f068		       a9 ff	   sq2	      lda	#%11111111	; The pattern we want display
    106  f06a		       85 0e		      sta	PF1	; 8 bit register
    107  f06c		       a9 b8		      lda	#PF1COL
    108  f06e		       4c 77 f0 	      jmp	seqset
    109  f071
    110  f071		       a9 ff	   sq3	      lda	#%11111111	; The pattern we want display
    111  f073		       85 0f		      sta	PF2	; 8 bit register, reversed
    112  f075		       a9 9a		      lda	#PF2COL
    113  f077
    114  f077		       85 08	   seqset     sta	COLUPF	; Initialize the playfield color
    115  f079		       a6 80		      ldx	ANISEQ
    116  f07b		       e8		      inx
    117  f07c		       e0 06		      cpx	#6
    118  f07e		       d0 02		      bne	keepseq
    119  f080		       a2 00		      ldx	#0
    120  f082
    121  f082		       86 80	   keepseq    stx	ANISEQ
    122  f084
    123  f084							; -------------------------- 37 scanlines of vertical blank -----------------------
    124  f084
    125  f084		       a2 00	   skipframe  ldx	#0
    126  f086		       85 02	   setvblank  sta	WSYNC
    127  f088		       e8		      inx
    128  f089		       e0 25		      cpx	#37
    129  f08b		       d0 f9		      bne	setvblank
    130  f08d
    131  f08d							; --------------------------- 192 lines of drawfield ------------------------------
    132  f08d
    133  f08d		       a2 00		      ldx	#0
    134  f08f		       85 02	   drawfield  sta	WSYNC
    135  f091		       e8		      inx
    136  f092		       e0 c0		      cpx	#192
    137  f094		       d0 f9		      bne	drawfield
    138  f096
    139  f096							; --------------------------- End of screen - enter blanking ----------------------
    140  f096
    141  f096		       a9 42		      lda	#%01000010	; set D0, D6 of vblank register
    142  f098		       85 01		      sta	VBLANK
    143  f09a
    144  f09a							; -------------------------- 30 scanlines of overscan -----------------------------
    145  f09a
    146  f09a		       a2 00		      ldx	#0
    147  f09c		       85 02	   overscan   sta	WSYNC
    148  f09e		       e8		      inx
    149  f09f		       e0 1e		      cpx	#30
    150  f0a1		       d0 f9		      bne	overscan
    151  f0a3
    152  f0a3							; --------------------------- End of overscan -------------------------------------
    153  f0a3
    154  f0a3		       4c 11 f0 	      jmp	startframe	; jump back up to start the next frame
    155  f0a6
    156  f0a6							; --------------------------- Pad until end of main segment -----------------------
    157  f0a6
    158  fffa					      org	$FFFA
    159  fffa
    160  fffa				   irqvectors
    161  fffa		       00 f0		      .word.w	reset	; NMI
    162  fffc		       00 f0		      .word.w	reset	; RESET
    163  fffe		       00 f0		      .word.w	reset	; IRQ
    164  10000
    165  10000							; -------------------------- End of main segment ----------------------------------
