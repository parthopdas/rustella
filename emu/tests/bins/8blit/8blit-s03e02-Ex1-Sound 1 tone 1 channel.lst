------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex1-Sound 1 tone 1 channel.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502	; S03e02 Ex. 1 tone, 1 channel
      2  10000 ????						;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	; Demonstrates basic audio generation by setting the audio registers to create 
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex1-Sound 1 tone 1 channel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	; a sound when the ball bounces. Turns volume off after a specified number 
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex1-Sound 1 tone 1 channel.asm
      5  0000 ????						; of frames.
      6  0000 ????						;
      7  0000 ????						; This Episode on Youtube - https://youtu.be/NBE-rEzk4cs
      8  0000 ????						;
      9  0000 ????						; Become a Patron - https://patreon.com/8blit
     10  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     11  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     12  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     13  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     14  0000 ????						; Visit the Website - https://www.8blit.com 
     15  0000 ????						;
     16  0000 ????						; Email - 8blit0@gmail.com
     17  0000 ????
     18  0000 ????						;
     19  0000 ????						; F1 (Game Select) Change to next arena based on Right Difficulty Setting 
     20  0000 ????						; F7 (Right Difficulty A) Move forward in list
     21  0000 ????						; F8 (Right Difficulty B) Move backward in list
     22  0000 ????						; F2 (Reset) Randomly select an arena and ball direction
     23  0000 ????						;
     24  0000 ????
     25  0000 ????						; define constants
     26  0000 ????	       00 60	   PF_H       equ	#96	; 2LK playfield height (in segments)
     27  0000 ????						; we're using a 2LK just as a simple way to have a larger ball
     28  0000 ????						; nothing else to worry about so it's low impact. 
     29  0000 ????						; just adjust PF_H accordingly
     30  0000 ????
     31 U0096 ????				      seg.u	vars	; uninitialized segment
     32 U0080					      org	$80	; origin set at base of ram 
     33 U0080
     34 U0080		       00	   b_x	      ds	1	; ball x pos
     35 U0081		       00	   b_y	      ds	1	; ball y pos
     36 U0082		       00	   b_bearing  ds	1	; (0-15) 16 angles 22.5 deg apart
     37 U0083		       00	   b_bearing_old ds	1	; holds the original bearing (direction) of the ball before bounce
     38 U0084		       00	   collision_count ds	1	; collision count
     39 U0085		       00	   pf_count   ds	1	; playfield index
     40 U0086		       00	   pf_prev    ds	1
     41 U0087		       00 00	   PF0_ptr    ds	2
     42 U0089		       00 00	   PF1_ptr    ds	2
     43 U008b		       00 00	   PF2_ptr    ds	2
     44 U008d		       00 00	   PF_col_ptr ds	2
     45 U008f		       00	   PF_col     ds	1
     46 U0090		       00	   r_seed     ds	1	; random seed
     47 U0091		       00	   l_seed     ds	1	; list seed
     48 U0092		       00	   mode       ds	1	; 0 = randomize on reset, 1 = iterate through lfsr
     49 U0093		       00	   swt_reset  ds	1	; locking - 1 if reset was handled, until reset is released
     50 U0094		       00	   swt_select ds	1	; locking - 1 if select was handled, until select is released
     51 U0095
     52 U0095		       00	   snd_on     ds	1	; greater that 0 if sound is playing on channel 0
     53 U0096
     54 U0096
     55  10000 ????				       seg	main	; start of main segment
     56  f000					      org	$F000
     57  f000
     58  f000				   reset
      0  f000					      CLEAN_START		; ouput: all ram/registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002				  -	      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002				  -	      lxa	#0
      6  f002					      ELSE
      7  f002		       a2 00		      ldx	#0
      8  f004		       8a		      txa
      9  f005					      ENDIF
     10  f005		       a8		      tay
     11  f006		       ca	   .CLEAR_STACK dex
     12  f007		       9a		      txs
     13  f008		       48		      pha
     14  f009		       d0 fb		      bne	.CLEAR_STACK
     15  f00b
     60  f00b
     61  f00b							; generate a random see from the interval timer
     62  f00b		       ad 84 02 	      lda	INTIM	; unknown value to use as an initial random seed
     63  f00e		       85 90		      sta	r_seed	; random seed
     64  f010		       85 91		      sta	l_seed	; iterive seed
     65  f012
     66  f012							; set area values
     67  f012		       a9 15		      lda	#%00010101	; playfield to reflect (default behavior, not nessesary)
     68  f014		       85 0a		      sta	CTRLPF
     69  f016
     70  f016				   soft_reset
     71  f016
     72  f016		       a9 00		      lda	#0
     73  f018		       85 92		      sta	mode	; sets mode to randomize
     74  f01a
     75  f01a							; 'randomly' select an initial bearing (direction)
     76  f01a		       20 9a f1 	      jsr	galois_lfsr_random	; no need to store the seed for this one
     77  f01d		       29 0f		      and	#$0F	; limit the value to 0-15
     78  f01f		       85 82		      sta	b_bearing
     79  f021
     80  f021							; set the starting position of the ball 
     81  f021		       a9 50		      lda	#80
     82  f023		       85 81		      sta	b_y	; y pos
     83  f025		       85 80		      sta	b_x	; x pos
     84  f027		       a2 04		      ldx	#4	; ball object
     85  f029		       20 b8 f1 	      jsr	PositionX	; a = x pos, x = object (index from P0 object address)
     86  f02c
     87  f02c							; lock the graphic object positions
     88  f02c		       85 02		      sta	WSYNC
     89  f02e		       85 2a		      sta	HMOVE	; strobe horizontal move to set fine positions 	       
     90  f030
     91  f030							; 'randomly' select which arena to use, but not the previous
     92  f030		       20 9a f1 	      jsr	galois_lfsr_random
     93  f033		       29 03		      and	#%00000011	; limit it to our 4 arena's
     94  f035		       c5 86		      cmp	pf_prev
     95  f037		       f0 dd		      beq	soft_reset
     96  f039		       85 86		      sta	pf_prev
     97  f03b
     98  f03b				   change_arena
     99  f03b		       a6 86		      ldx	pf_prev
    100  f03d
    101  f03d							; get the playfield for the area
    102  f03d		       bd 18 f2 	      lda	PF0_lsb_ptr,x
    103  f040		       85 87		      sta	PF0_ptr
    104  f042		       bd 1c f2 	      lda	PF0_msb_ptr,x
    105  f045		       85 88		      sta	PF0_ptr+1
    106  f047		       bd 20 f2 	      lda	PF1_lsb_ptr,x
    107  f04a		       85 89		      sta	PF1_ptr
    108  f04c		       bd 24 f2 	      lda	PF1_msb_ptr,x
    109  f04f		       85 8a		      sta	PF1_ptr+1
    110  f051		       bd 28 f2 	      lda	PF2_lsb_ptr,x
    111  f054		       85 8b		      sta	PF2_ptr
    112  f056		       bd 2c f2 	      lda	PF2_msb_ptr,x
    113  f059		       85 8c		      sta	PF2_ptr+1
    114  f05b
    115  f05b							; get/set the pallet for the arena
    116  f05b		       bd 10 f2 	      lda	PF_col_lsb_ptr,x
    117  f05e		       85 8d		      sta	PF_col_ptr
    118  f060		       bd 14 f2 	      lda	PF_col_msb_ptr,x
    119  f063		       85 8e		      sta	PF_col_ptr+1
    120  f065
    121  f065		       a0 00		      ldy	#0
    122  f067		       b1 8d		      lda	(PF_col_ptr),y
    123  f069		       85 08		      sta	COLUPF
    124  f06b		       c8		      iny
    125  f06c		       b1 8d		      lda	(PF_col_ptr),y
    126  f06e		       85 8f		      sta	PF_col
    127  f070
    128  f070				   NextFrame
      0  f070					      VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f070		       a9 0e		      lda	#%1110
      2  f072		       85 02	   .VSLP1     sta	WSYNC
      3  f074		       85 00		      sta	VSYNC
      4  f076		       4a		      lsr
      5  f077		       d0 f9		      bne	.VSLP1
    130  f079
    131  f079				   VerticalBlank
    132  f079		       a2 2b		      ldx	#43	; 37sl * 76mc = 2812 
    133  f07b		       8e 96 02 	      stx	TIM64T	; set 64-clock for 43 intervals. 43 * 64mc = 2752mc before timer ends
    134  f07e
    135  f07e							; process sound
    136  f07e		       a5 95		      lda	snd_on	; check is sound 0 is active
    137  f080		       f0 08		      beq	snd	; are we playing a sound? Yes
    138  f082		       c6 95		      dec	snd_on
    139  f084		       d0 04		      bne	snd
    140  f086		       a9 00		      lda	#0
    141  f088		       85 19		      sta	AUDV0	; since we know a = 0, use it to turn off the volume
    142  f08a				   snd
    143  f08a
    144  f08a
    145  f08a							; collision detection
    146  f08a		       a5 06		      lda	CXBLPF	; ball collision with playfield?
    147  f08c		       30 07		      bmi	collision
    148  f08e
    149  f08e		       a9 00		      lda	#0	; no collision, set collision count to 0
    150  f090		       85 84		      sta	collision_count
    151  f092		       4c d2 f0 	      jmp	no_collision	; bypass collision handling
    152  f095
    153  f095							; when a collision occures we try to reflect to a vertical bearing. If on the next frame we're still
    154  f095							; registering a collision then we try a horizontal bearing. If it's STILL registering a collision 
    155  f095							; then we reflect it back 180 degrees from the original pre-bounce bearing.
    156  f095
    157  f095				   collision
    158  f095							; a collision occured
    159  f095		       a5 84		      lda	collision_count	; how many times has a collision occured consecutively
    160  f097		       d0 21		      bne	col_on	; branch if collisions are already ongoing
    161  f099
    162  f099							; turn on our sound
    163  f099		       a9 04		      lda	#$4	; distortion
    164  f09b		       85 15		      sta	AUDC0	; audio control (type of sound/which lfsr)
    165  f09d		       85 17		      sta	AUDF0	; audio frequency
    166  f09f		       85 19		      sta	AUDV0	; audio volume
    167  f0a1		       a9 01		      lda	#$1	; frames to play sound (i.e. sound on)
    168  f0a3		       85 95		      sta	snd_on
    169  f0a5
    170  f0a5		       a5 82		      lda	b_bearing	; get the current bearing
    171  f0a7		       85 83		      sta	b_bearing_old	; store current missile b_bearing
    172  f0a9		       49 ff		      eor	#$FF	; reverse our bearings 
    173  f0ab		       85 82		      sta	b_bearing
    174  f0ad		       e6 82		      inc	b_bearing	; additive reverse
    175  f0af		       a5 82		      lda	b_bearing
    176  f0b1		       29 03		      and	#$03	; is bearing N,S,E,W?
    177  f0b3		       d0 02		      bne	col_no_adj
    178  f0b5		       e6 82		      inc	b_bearing	; increment bearing by one offset to prevent continuous reflection
    179  f0b7
    180  f0b7				   col_no_adj
    181  f0b7		       4c d0 f0 	      jmp	collision_done
    182  f0ba
    183  f0ba		       c9 01	   col_on     cmp	#$01	; check collision_count
    184  f0bc		       f0 0b		      beq	reverse_bearing	; first collision in series
    185  f0be		       c9 03		      cmp	#$03	; check collision_count
    186  f0c0		       90 0e		      bcc	collision_done	; second/third collision in series
    187  f0c2		       d0 0c		      bne	collision_done	; more than three collisions in series
    188  f0c4		       a5 83		      lda	b_bearing_old	; retrieve pre-bounce bearing
    189  f0c6		       4c cb f0 	      jmp	reverse_org_bearing	; reverse bearing it 180 degrees
    190  f0c9
    191  f0c9				   reverse_bearing		; reverse altered bearing
    192  f0c9		       a5 82		      lda	b_bearing
    193  f0cb				   reverse_org_bearing		; reverse original bearing
    194  f0cb		       18		      clc		; clear carry so it's not included in add on next instruction
    195  f0cc		       69 08		      adc	#$08	; reverse bearing by 180 degrees
    196  f0ce		       85 82		      sta	b_bearing
    197  f0d0
    198  f0d0				   collision_done
    199  f0d0		       e6 84		      inc	collision_count	; increment the number of consecutive collisions
    200  f0d2				   no_collision
    201  f0d2
    202  f0d2							; move the ball
    203  f0d2		       a5 82		      lda	b_bearing
    204  f0d4		       29 0f		      and	#$0F	; strip the high nibble
    205  f0d6		       aa		      tax
    206  f0d7		       bd 00 f2 	      lda	bearing_offsets,x	; load the x/y offsets based on the current bearing
    207  f0da		       85 24		      sta	HMBL
    208  f0dc							; update the balls horizontal motion register which will only
    209  f0dc							; use the high nibble where the x offset is stored.
    210  f0dc		       29 0f		      and	#$0F	; strip out the high nibble which leaves only the y offset
    211  f0de		       38		      sec		; set the carry flag
    212  f0df		       e9 08		      sbc	#$08	; subtract 8 for 4bit 2's completment +/-
    213  f0e1		       18		      clc		; clear carry flag so it's not used in the following add
    214  f0e2		       65 81		      adc	b_y	; add y offset to current y position
    215  f0e4		       85 81		      sta	b_y	; store the new y position
    216  f0e6
    217  f0e6		       a0 ff		      ldy	#255
    218  f0e8		       a2 60		      ldx	#PF_H
    219  f0ea		       86 85		      stx	pf_count
    220  f0ec
    221  f0ec		       85 02		      sta	WSYNC
    222  f0ee							;--------------------------------------	
    223  f0ee		       85 2a		      sta	HMOVE
    224  f0f0		       85 2c		      sta	CXCLR
    225  f0f2
    226  f0f2				   checktimer
    227  f0f2		       ad 84 02 	      lda	INTIM	; time remaining (or past)
    228  f0f5		       d0 fb		      bne	checktimer	; burn remaining cycles
    229  f0f7		       a9 00		      lda	#0	; D1 to 0 to end VBLANK
    230  f0f9		       85 02		      sta	WSYNC
    231  f0fb							;--------------------------------------	
    232  f0fb		       85 01		      sta	VBLANK	; 3   3 - set vertical blank off
    233  f0fd
    234  f0fd				   kernel
    235  f0fd		       a5 85		      lda	pf_count	;	     ; 2   2 
    236  f0ff		       29 03		      and	#%011	; 2   4 - binary 3 (4th interation)
    237  f101		       d0 01		      bne	skipx	; 3   7 
    238  f103		       c8		      iny		; 2   9 
    239  f104				   skipx
    240  f104
    241  f104		       b1 87		      lda	(PF0_ptr),y	; 2  11 
    242  f106		       85 02		      sta	WSYNC
    243  f108							;--------------------------------------	 
    244  f108
    245  f108							; draw playfield
    246  f108		       85 0d		      sta	PF0	; 3  3
    247  f10a		       b1 89		      lda	(PF1_ptr),y	; 2  5
    248  f10c		       85 0e		      sta	PF1	; 3  8
    249  f10e		       b1 8b		      lda	(PF2_ptr),y	; 2  10
    250  f110		       85 0f		      sta	PF2	; 3  13
    251  f112		       a5 8f		      lda	PF_col	; 2  15
    252  f114		       85 09		      sta	COLUBK	; 3  18
    253  f116
    254  f116		       a2 00		      ldx	#0	; 2  20 - used to disable ball graphic
    255  f118		       a5 81		      lda	b_y	; 2  22 - load ball y pos
    256  f11a		       c5 85		      cmp	pf_count	; 2  24 - compare y pos to playfield counter
    257  f11c		       d0 02		      bne	noball	; 3  26 - if it's not the same then continue with disabled ball graphic
    258  f11e		       a2 02		      ldx	#2	; 2  28- ball y pos and playfield counter are same so enable ball graphic
    259  f120
    260  f120				   noball
    261  f120		       86 1f		      stx	ENABL	; 3  31 - enable/disable ball graphic
    262  f122		       85 02		      sta	WSYNC	; 3  34
    263  f124
    264  f124		       c6 85		      dec	pf_count	; 5  39
    265  f126		       d0 d5		      bne	kernel	; 3  42
    266  f128
    267  f128							; end of kernel
    268  f128		       85 02		      sta	WSYNC	; end kernel with a clean scan line
    269  f12a		       a9 00		      lda	#$0
    270  f12c		       85 0d		      sta	PF0
    271  f12e		       85 0e		      sta	PF1
    272  f130		       85 0f		      sta	PF2
    273  f132		       85 09		      sta	COLUBK
    274  f134		       85 1f		      sta	ENABL
    275  f136		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    276  f138		       85 01		      sta	VBLANK	; turn off the beam
    277  f13a
    278  f13a
    279  f13a							; ---- overscan (30 scanlines)
    280  f13a		       a2 23		      ldx	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    281  f13c		       8e 96 02 	      stx	TIM64T	; Set a count of 35 with 64-clock interval
    282  f13f
    283  f13f							; ---- check switches
    284  f13f		       a9 01		      lda	#%00000001	; check reset switch
    285  f141		       2c 82 02 	      bit	SWCHB
    286  f144		       d0 09		      bne	no_reset	; jump of if reset is not pressed
    287  f146		       a5 93		      lda	swt_reset	; load the latching reset register
    288  f148		       d0 09		      bne	skip_reset	; if non-zero then we've already handled reset so jump
    289  f14a		       e6 93		      inc	swt_reset	; if 0 then latch the register and handle reset
    290  f14c
    291  f14c		       4c 16 f0 	      jmp	soft_reset	; end frame prematurely and soft reset
    292  f14f				   no_reset
    293  f14f		       a9 00		      lda	#0
    294  f151		       85 93		      sta	swt_reset	; no reset pressed to unlatch the register 
    295  f153				   skip_reset
    296  f153
    297  f153		       a9 02		      lda	#%00000010	; check game select switch
    298  f155		       2c 82 02 	      bit	SWCHB
    299  f158		       d0 2d		      bne	no_select
    300  f15a		       a5 94		      lda	swt_select
    301  f15c		       d0 2d		      bne	skip_select
    302  f15e		       e6 94		      inc	swt_select
    303  f160
    304  f160		       a9 01		      lda	#1
    305  f162		       85 92		      sta	mode	; mode is now interate lfsr
    306  f164
    307  f164							; which way to iterate the lfsr?
    308  f164		       a9 80		      lda	#%10000000
    309  f166		       2c 82 02 	      bit	SWCHB
    310  f169		       d0 0e		      bne	int_advance
    311  f16b				   int_inv
    312  f16b		       20 ae f1 	      jsr	galois_lfsr_backward
    313  f16e		       29 03		      and	#%00000011	; limit it to our 4 arena's
    314  f170		       c5 86		      cmp	pf_prev
    315  f172		       f0 f7		      beq	int_inv
    316  f174		       85 86		      sta	pf_prev
    317  f176		       4c 3b f0 	      jmp	change_arena
    318  f179				   int_advance
    319  f179		       20 a4 f1 	      jsr	galois_lfsr_forward
    320  f17c		       29 03		      and	#%00000011	; limit it to our 4 arena's
    321  f17e		       c5 86		      cmp	pf_prev
    322  f180		       f0 f7		      beq	int_advance
    323  f182		       85 86		      sta	pf_prev
    324  f184		       4c 3b f0 	      jmp	change_arena
    325  f187
    326  f187				   no_select
    327  f187		       a9 00		      lda	#0
    328  f189		       85 94		      sta	swt_select
    329  f18b				   skip_select
    330  f18b
    331  f18b		       a5 92		      lda	mode	; check mode
    332  f18d		       d0 03		      bne	overscan_timer	; if mode 0, then randomize
    333  f18f		       20 9a f1 	      jsr	galois_lfsr_random	; runs once through at frame end to increase entropy 
    334  f192
    335  f192							; overscan remainder timer -----------
    336  f192				   overscan_timer
    337  f192		       ae 84 02 	      ldx	INTIM
    338  f195		       d0 fb		      bne	overscan_timer
    339  f197
    340  f197		       4c 70 f0 	      jmp	NextFrame	; (3) jump back up to start the next frame
    341  f19a
    342  f19a
    343  f19a							; Galois 8-bit Linear Feedback Shift Registers
    344  f19a							; https://samiam.org/blog/20130617.html
    345  f19a				   galois_lfsr_random
    346  f19a		       a5 90		      lda	r_seed	; keep calling funtion to for better entropy
    347  f19c		       4a		      lsr		; shift right
    348  f19d		       90 02		      bcc	noeor0	; if carry 1, then exclusive OR the bits
    349  f19f		       49 d4		      eor	#$D4	; d4 tap (11010100)
    350  f1a1		       85 90	   noeor0     sta	r_seed
    351  f1a3		       60		      rts
    352  f1a4
    353  f1a4				   galois_lfsr_forward
    354  f1a4		       a5 91		      lda	l_seed
    355  f1a6		       4a		      lsr		; shift right
    356  f1a7		       90 02		      bcc	noeor1	; if carry 1, then exclusive OR the bits
    357  f1a9		       49 d4		      eor	#$D4	; d4 tap (11010100)
    358  f1ab		       85 91	   noeor1     sta	l_seed
    359  f1ad		       60		      rts
    360  f1ae
    361  f1ae				   galois_lfsr_backward
    362  f1ae		       a5 91		      lda	l_seed
    363  f1b0		       0a		      asl		; shift left
    364  f1b1		       90 02		      bcc	noeor2	; if carry 1, then exclusive OR the bits
    365  f1b3		       49 a9		      eor	#$A9	; a9 tap (10101001)
    366  f1b5		       85 91	   noeor2     sta	l_seed
    367  f1b7		       60		      rts
    368  f1b8
    369  f1b8							; -----------------------------------------------------------------------------
    370  f1b8							; PositionX
    371  f1b8							; A - Horizontal position of the object
    372  f1b8							; X - Object to position
    373  f1b8							;   0 - Player 0
    374  f1b8							;   1 - Player 1
    375  f1b8							;   2 - Missile 0
    376  f1b8							;   3 - Missile 1
    377  f1b8							;   4 - Ball
    378  f1b8							; -----------------------------------------------------------------------------
    379  f1b8
    380  f1b8				   PositionX
    381  f1b8		       38		      sec		;  2 +2 - set the carry flag
    382  f1b9		       85 02		      sta	WSYNC	;  3 +5 - start a new line
    383  f1bb				   DivideLoop
    384  f1bb		       e9 0f		      sbc	#15	;  2  2 - subtract 15
    385  f1bd		       b0 fc		      bcs	DivideLoop	;  2  4 - branch until negative
    386  f1bf		       49 07		      eor	#7	;  2  6 - calculate fine offset
    387  f1c1		       0a		      asl		;  2  8 - shift left
    388  f1c2		       0a		      asl		;  2 10
    389  f1c3		       0a		      asl		;  2 12
    390  f1c4		       0a		      asl		;  2 14
    391  f1c5		       95 20		      sta	HMP0,x	;  5 19 - set fine offset
    392  f1c7		       95 10		      sta	RESP0,x	;  4 23 - set coarse position
    393  f1c9		       60		      rts		;  6 29 - return
    394  f1ca
    395  f200		       00 00 00 00*	      align	$100	; align data
    396  f200
    397  f200							;index  x-move  y-move  deg	 direction  
    398  f200				   bearing_offsets		;------------------------------------------												
    399  f200		       e0		      .byte.b	#%11100000	; 0	 -2	  0	 90.0	 right
    400  f201		       e7		      .byte.b	#%11100111	; 1	 -2	 -2	 67.5
    401  f202		       e6		      .byte.b	#%11100110	; 2	 -2	 -4	 45.0
    402  f203		       f6		      .byte.b	#%11110110	; 3	 -1	 -4	 22.5
    403  f204		       06		      .byte.b	#%00000110	; 4	  0	 -4	 0/360	 up
    404  f205		       16		      .byte.b	#%00010110	; 5	 +1	 -4	 337.5
    405  f206		       26		      .byte.b	#%00100110	; 6	 +2	 -4	 315.0
    406  f207		       27		      .byte.b	#%00100111	; 7	 +2	 -2	 292.5	
    407  f208		       28		      .byte.b	#%00101000	; 8	 +2	  0	 270.0	 left
    408  f209		       29		      .byte.b	#%00101001	; 9	 +2	 +2	 247.5
    409  f20a		       2a		      .byte.b	#%00101010	; 10	 +2	 +4	 225.0
    410  f20b		       1a		      .byte.b	#%00011010	; 11	 +1	 +4	 202.5
    411  f20c		       0a		      .byte.b	#%00001010	; 12	  0	 +4	 180.0	 down
    412  f20d		       fa		      .byte.b	#%11111010	; 13	 -1	 +4	 157.5
    413  f20e		       ea		      .byte.b	#%11101010	; 14	 -2	 +4	 135.0
    414  f20f		       e9		      .byte.b	#%11101001	; 15	 -2	 +2	 112.5;
    415  f210
    416  f210				   PF_col_lsb_ptr
    417  f210		       30		      .byte.b	<PF_col_atari
    418  f211		       7a		      .byte.b	<PF_col_pattern
    419  f212		       c4		      .byte.b	<PF_col_combat
    420  f213		       0e		      .byte.b	<PF_col_activision
    421  f214				   PF_col_msb_ptr
    422  f214		       f2		      .byte.b	>PF_col_atari
    423  f215		       f2		      .byte.b	>PF_col_pattern
    424  f216		       f2		      .byte.b	>PF_col_combat
    425  f217		       f3		      .byte.b	>PF_col_activision
    426  f218				   PF0_lsb_ptr
    427  f218		       32		      .byte.b	<PF0_data_atari
    428  f219		       7c		      .byte.b	<PF0_data_pattern
    429  f21a		       c6		      .byte.b	<PF0_data_combat
    430  f21b		       10		      .byte.b	<PF0_data_activision
    431  f21c				   PF0_msb_ptr
    432  f21c		       f2		      .byte.b	>PF0_data_atari
    433  f21d		       f2		      .byte.b	>PF0_data_pattern
    434  f21e		       f2		      .byte.b	>PF0_data_combat
    435  f21f		       f3		      .byte.b	>PF0_data_activision
    436  f220				   PF1_lsb_ptr
    437  f220		       4a		      .byte.b	<PF1_data_atari
    438  f221		       94		      .byte.b	<PF1_data_pattern
    439  f222		       de		      .byte.b	<PF1_data_combat
    440  f223		       28		      .byte.b	<PF1_data_activision
    441  f224				   PF1_msb_ptr
    442  f224		       f2		      .byte.b	>PF1_data_atari
    443  f225		       f2		      .byte.b	>PF1_data_pattern
    444  f226		       f2		      .byte.b	>PF1_data_combat
    445  f227		       f3		      .byte.b	>PF1_data_activision
    446  f228				   PF2_lsb_ptr
    447  f228		       62		      .byte.b	<PF2_data_atari
    448  f229		       ac		      .byte.b	<PF2_data_pattern
    449  f22a		       f6		      .byte.b	<PF2_data_combat
    450  f22b		       40		      .byte.b	<PF2_data_activision
    451  f22c				   PF2_msb_ptr
    452  f22c		       f2		      .byte.b	>PF2_data_atari
    453  f22d		       f2		      .byte.b	>PF2_data_pattern
    454  f22e		       f2		      .byte.b	>PF2_data_combat
    455  f22f		       f3		      .byte.b	>PF2_data_activision
    456  f230
------- FILE playfields/pf_atari.asm LEVEL 2 PASS 2
      0  f230					      INCLUDE	"playfields/pf_atari.asm"
      1  f230				   PF_col_atari
      2  f230		       46		      .byte.b	#$46	; foreground
      3  f231		       00		      .byte.b	#$00	; background
      4  f232
      5  f232				   PF0_data_atari
      6  f232		       f0		      .byte.b	#%11110000	;<- first
      7  f233		       10		      .byte.b	#%00010000
      8  f234		       10		      .byte.b	#%00010000
      9  f235		       10		      .byte.b	#%00010000
     10  f236		       10		      .byte.b	#%00010000
     11  f237		       10		      .byte.b	#%00010000
     12  f238		       10		      .byte.b	#%00010000
     13  f239		       10		      .byte.b	#%00010000
     14  f23a		       10		      .byte.b	#%00010000
     15  f23b		       10		      .byte.b	#%00010000
     16  f23c		       10		      .byte.b	#%00010000
     17  f23d		       10		      .byte.b	#%00010000
     18  f23e		       10		      .byte.b	#%00010000
     19  f23f		       10		      .byte.b	#%00010000
     20  f240		       10		      .byte.b	#%00010000
     21  f241		       10		      .byte.b	#%00010000
     22  f242		       10		      .byte.b	#%00010000
     23  f243		       10		      .byte.b	#%00010000
     24  f244		       10		      .byte.b	#%00010000
     25  f245		       10		      .byte.b	#%00010000
     26  f246		       10		      .byte.b	#%00010000
     27  f247		       10		      .byte.b	#%00010000
     28  f248		       10		      .byte.b	#%00010000
     29  f249		       f0		      .byte.b	#%11110000	;<- last
     30  f24a
     31  f24a				   PF1_data_atari
     32  f24a		       ff		      .byte.b	#%11111111	;<- first
     33  f24b		       00		      .byte.b	#%00000000
     34  f24c		       00		      .byte.b	#%00000000
     35  f24d		       00		      .byte.b	#%00000000
     36  f24e		       00		      .byte.b	#%00000000
     37  f24f		       00		      .byte.b	#%00000000
     38  f250		       00		      .byte.b	#%00000000
     39  f251		       00		      .byte.b	#%00000000
     40  f252		       00		      .byte.b	#%00000000
     41  f253		       00		      .byte.b	#%00000000
     42  f254		       00		      .byte.b	#%00000000
     43  f255		       00		      .byte.b	#%00000000
     44  f256		       00		      .byte.b	#%00000000
     45  f257		       00		      .byte.b	#%00000000
     46  f258		       00		      .byte.b	#%00000000
     47  f259		       00		      .byte.b	#%00000000
     48  f25a		       00		      .byte.b	#%00000000
     49  f25b		       00		      .byte.b	#%00000000
     50  f25c		       03		      .byte.b	#%00000011
     51  f25d		       03		      .byte.b	#%00000011
     52  f25e		       00		      .byte.b	#%00000000
     53  f25f		       00		      .byte.b	#%00000000
     54  f260		       00		      .byte.b	#%00000000
     55  f261		       ff		      .byte.b	#%11111111	;<- last
     56  f262
     57  f262				   PF2_data_atari
     58  f262		       ff		      .byte.b	#%11111111	;<- first
     59  f263		       00		      .byte.b	#%00000000
     60  f264		       00		      .byte.b	#%00000000
     61  f265		       b0		      .byte.b	#%10110000
     62  f266		       b0		      .byte.b	#%10110000
     63  f267		       b0		      .byte.b	#%10110000
     64  f268		       b0		      .byte.b	#%10110000
     65  f269		       b0		      .byte.b	#%10110000
     66  f26a		       b0		      .byte.b	#%10110000
     67  f26b		       b0		      .byte.b	#%10110000
     68  f26c		       b0		      .byte.b	#%10110000
     69  f26d		       98		      .byte.b	#%10011000
     70  f26e		       98		      .byte.b	#%10011000
     71  f26f		       98		      .byte.b	#%10011000
     72  f270		       9c		      .byte.b	#%10011100
     73  f271		       8c		      .byte.b	#%10001100
     74  f272		       8e		      .byte.b	#%10001110
     75  f273		       87		      .byte.b	#%10000111
     76  f274		       83		      .byte.b	#%10000011
     77  f275		       81		      .byte.b	#%10000001
     78  f276		       00		      .byte.b	#%00000000
     79  f277		       00		      .byte.b	#%00000000
     80  f278		       00		      .byte.b	#%00000000
     81  f279		       ff		      .byte.b	#%11111111	;<- last
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex1-Sound 1 tone 1 channel.asm
------- FILE playfields/pf_pattern.asm LEVEL 2 PASS 2
      0  f27a					      INCLUDE	"playfields/pf_pattern.asm"
      1  f27a				   PF_col_pattern
      2  f27a		       0e		      .byte.b	#$0E	; foreground
      3  f27b		       02		      .byte.b	#$02	; background
      4  f27c
      5  f27c				   PF0_data_pattern
      6  f27c		       f0		      .byte.b	#%11110000	;<- first
      7  f27d		       10		      .byte.b	#%00010000
      8  f27e		       10		      .byte.b	#%00010000
      9  f27f		       10		      .byte.b	#%00010000
     10  f280		       10		      .byte.b	#%00010000
     11  f281		       10		      .byte.b	#%00010000
     12  f282		       10		      .byte.b	#%00010000
     13  f283		       10		      .byte.b	#%00010000
     14  f284		       10		      .byte.b	#%00010000
     15  f285		       10		      .byte.b	#%00010000
     16  f286		       10		      .byte.b	#%00010000
     17  f287		       10		      .byte.b	#%00010000
     18  f288		       10		      .byte.b	#%00010000
     19  f289		       10		      .byte.b	#%00010000
     20  f28a		       10		      .byte.b	#%00010000
     21  f28b		       10		      .byte.b	#%00010000
     22  f28c		       10		      .byte.b	#%00010000
     23  f28d		       10		      .byte.b	#%00010000
     24  f28e		       10		      .byte.b	#%00010000
     25  f28f		       10		      .byte.b	#%00010000
     26  f290		       10		      .byte.b	#%00010000
     27  f291		       10		      .byte.b	#%00010000
     28  f292		       10		      .byte.b	#%00010000
     29  f293		       ff		      .byte.b	#%11111111	;<- last
     30  f294
     31  f294				   PF1_data_pattern
     32  f294		       ff		      .byte.b	#%11111111	;<- first
     33  f295		       00		      .byte.b	#%00000000
     34  f296		       00		      .byte.b	#%00000000
     35  f297		       00		      .byte.b	#%00000000
     36  f298		       00		      .byte.b	#%00000000
     37  f299		       00		      .byte.b	#%00000000
     38  f29a		       00		      .byte.b	#%00000000
     39  f29b		       00		      .byte.b	#%00000000
     40  f29c		       40		      .byte.b	#%01000000
     41  f29d		       00		      .byte.b	#%00000000
     42  f29e		       00		      .byte.b	#%00000000
     43  f29f		       02		      .byte.b	#%00000010
     44  f2a0		       00		      .byte.b	#%00000000
     45  f2a1		       08		      .byte.b	#%00001000
     46  f2a2		       00		      .byte.b	#%00000000
     47  f2a3		       00		      .byte.b	#%00000000
     48  f2a4		       40		      .byte.b	#%01000000
     49  f2a5		       00		      .byte.b	#%00000000
     50  f2a6		       00		      .byte.b	#%00000000
     51  f2a7		       00		      .byte.b	#%00000000
     52  f2a8		       00		      .byte.b	#%00000000
     53  f2a9		       00		      .byte.b	#%00000000
     54  f2aa		       00		      .byte.b	#%00000000
     55  f2ab		       ff		      .byte.b	#%11111111	;<- last
     56  f2ac
     57  f2ac				   PF2_data_pattern
     58  f2ac		       ff		      .byte.b	#%11111111	;<- first
     59  f2ad		       00		      .byte.b	#%00000000
     60  f2ae		       00		      .byte.b	#%00000000
     61  f2af		       00		      .byte.b	#%00000000
     62  f2b0		       00		      .byte.b	#%00000000
     63  f2b1		       00		      .byte.b	#%00000000
     64  f2b2		       20		      .byte.b	#%00100000
     65  f2b3		       21		      .byte.b	#%00100001
     66  f2b4		       20		      .byte.b	#%00100000
     67  f2b5		       20		      .byte.b	#%00100000
     68  f2b6		       20		      .byte.b	#%00100000
     69  f2b7		       20		      .byte.b	#%00100000
     70  f2b8		       20		      .byte.b	#%00100000
     71  f2b9		       20		      .byte.b	#%00100000
     72  f2ba		       20		      .byte.b	#%00100000
     73  f2bb		       20		      .byte.b	#%00100000
     74  f2bc		       20		      .byte.b	#%00100000
     75  f2bd		       21		      .byte.b	#%00100001
     76  f2be		       20		      .byte.b	#%00100000
     77  f2bf		       00		      .byte.b	#%00000000
     78  f2c0		       00		      .byte.b	#%00000000
     79  f2c1		       00		      .byte.b	#%00000000
     80  f2c2		       00		      .byte.b	#%00000000
     81  f2c3		       ff		      .byte.b	#%11111111	;<- last	 
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex1-Sound 1 tone 1 channel.asm
------- FILE playfields/pf_combat.asm LEVEL 2 PASS 2
      0  f2c4					      INCLUDE	"playfields/pf_combat.asm"
      1  f2c4				   PF_col_combat
      2  f2c4		       2c		      .byte.b	#$2C	; foreground
      3  f2c5		       dc		      .byte.b	#$DC	; background
      4  f2c6
      5  f2c6				   PF0_data_combat
      6  f2c6		       f0		      .byte.b	#%11110000	;<- first
      7  f2c7		       10		      .byte.b	#%00010000
      8  f2c8		       10		      .byte.b	#%00010000
      9  f2c9		       10		      .byte.b	#%00010000
     10  f2ca		       10		      .byte.b	#%00010000
     11  f2cb		       10		      .byte.b	#%00010000
     12  f2cc		       10		      .byte.b	#%00010000
     13  f2cd		       10		      .byte.b	#%00010000
     14  f2ce		       10		      .byte.b	#%00010000
     15  f2cf		       10		      .byte.b	#%00010000
     16  f2d0		       10		      .byte.b	#%00010000
     17  f2d1		       10		      .byte.b	#%00010000
     18  f2d2		       10		      .byte.b	#%00010000
     19  f2d3		       10		      .byte.b	#%00010000
     20  f2d4		       10		      .byte.b	#%00010000
     21  f2d5		       10		      .byte.b	#%00010000
     22  f2d6		       10		      .byte.b	#%00010000
     23  f2d7		       10		      .byte.b	#%00010000
     24  f2d8		       10		      .byte.b	#%00010000
     25  f2d9		       10		      .byte.b	#%00010000
     26  f2da		       10		      .byte.b	#%00010000
     27  f2db		       10		      .byte.b	#%00010000
     28  f2dc		       10		      .byte.b	#%00010000
     29  f2dd		       f0		      .byte.b	#%11110000	;<- last
     30  f2de
     31  f2de				   PF1_data_combat
     32  f2de		       ff		      .byte.b	#%11111111	;<- first
     33  f2df		       00		      .byte.b	#%00000000
     34  f2e0		       00		      .byte.b	#%00000000
     35  f2e1		       00		      .byte.b	#%00000000
     36  f2e2		       70		      .byte.b	#%01110000
     37  f2e3		       00		      .byte.b	#%00000000
     38  f2e4		       00		      .byte.b	#%00000000
     39  f2e5		       00		      .byte.b	#%00000000
     40  f2e6		       c0		      .byte.b	#%11000000
     41  f2e7		       40		      .byte.b	#%01000000
     42  f2e8		       46		      .byte.b	#%01000110
     43  f2e9		       46		      .byte.b	#%01000110
     44  f2ea		       40		      .byte.b	#%01000000
     45  f2eb		       40		      .byte.b	#%01000000
     46  f2ec		       c0		      .byte.b	#%11000000
     47  f2ed		       00		      .byte.b	#%00000000
     48  f2ee		       00		      .byte.b	#%00000000
     49  f2ef		       00		      .byte.b	#%00000000
     50  f2f0		       70		      .byte.b	#%01110000
     51  f2f1		       00		      .byte.b	#%00000000
     52  f2f2		       00		      .byte.b	#%00000000
     53  f2f3		       00		      .byte.b	#%00000000
     54  f2f4		       00		      .byte.b	#%00000000
     55  f2f5		       ff		      .byte.b	#%11111111	;<- last
     56  f2f6
     57  f2f6				   PF2_data_combat
     58  f2f6		       ff		      .byte.b	#%11111111	;<- first
     59  f2f7		       80		      .byte.b	#%10000000
     60  f2f8		       80		      .byte.b	#%10000000
     61  f2f9		       00		      .byte.b	#%00000000
     62  f2fa		       00		      .byte.b	#%00000000
     63  f2fb		       00		      .byte.b	#%00000000
     64  f2fc		       0e		      .byte.b	#%00001110
     65  f2fd		       02		      .byte.b	#%00000010
     66  f2fe		       00		      .byte.b	#%00000000
     67  f2ff		       00		      .byte.b	#%00000000
     68  f300		       00		      .byte.b	#%00000000
     69  f301		       00		      .byte.b	#%00000000
     70  f302		       00		      .byte.b	#%00000000
     71  f303		       00		      .byte.b	#%00000000
     72  f304		       00		      .byte.b	#%00000000
     73  f305		       00		      .byte.b	#%00000000
     74  f306		       02		      .byte.b	#%00000010
     75  f307		       0e		      .byte.b	#%00001110
     76  f308		       00		      .byte.b	#%00000000
     77  f309		       00		      .byte.b	#%00000000
     78  f30a		       00		      .byte.b	#%00000000
     79  f30b		       80		      .byte.b	#%10000000
     80  f30c		       80		      .byte.b	#%10000000
     81  f30d		       ff		      .byte.b	#%11111111	;<- last
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex1-Sound 1 tone 1 channel.asm
------- FILE playfields/pf_activision.asm LEVEL 2 PASS 2
      0  f30e					      INCLUDE	"playfields/pf_activision.asm"
      1  f30e				   PF_col_activision
      2  f30e		       0e		      .byte.b	#$0E	; foreground
      3  f30f		       c6		      .byte.b	#$C6	; background
      4  f310
      5  f310				   PF0_data_activision
      6  f310		       f0		      .byte.b	#%11110000	;<- first
      7  f311		       10		      .byte.b	#%00010000
      8  f312		       10		      .byte.b	#%00010000
      9  f313		       10		      .byte.b	#%00010000
     10  f314		       10		      .byte.b	#%00010000
     11  f315		       10		      .byte.b	#%00010000
     12  f316		       10		      .byte.b	#%00010000
     13  f317		       10		      .byte.b	#%00010000
     14  f318		       10		      .byte.b	#%00010000
     15  f319		       10		      .byte.b	#%00010000
     16  f31a		       10		      .byte.b	#%00010000
     17  f31b		       10		      .byte.b	#%00010000
     18  f31c		       10		      .byte.b	#%00010000
     19  f31d		       10		      .byte.b	#%00010000
     20  f31e		       10		      .byte.b	#%00010000
     21  f31f		       10		      .byte.b	#%00010000
     22  f320		       10		      .byte.b	#%00010000
     23  f321		       10		      .byte.b	#%00010000
     24  f322		       10		      .byte.b	#%00010000
     25  f323		       10		      .byte.b	#%00010000
     26  f324		       10		      .byte.b	#%00010000
     27  f325		       10		      .byte.b	#%00010000
     28  f326		       10		      .byte.b	#%00010000
     29  f327		       f0		      .byte.b	#%11110000	;<- last
     30  f328
     31  f328				   PF1_data_activision
     32  f328		       ff		      .byte.b	#%11111111	;<- first
     33  f329		       00		      .byte.b	#%00000000
     34  f32a		       00		      .byte.b	#%00000000
     35  f32b		       00		      .byte.b	#%00000000
     36  f32c		       00		      .byte.b	#%00000000
     37  f32d		       00		      .byte.b	#%00000000
     38  f32e		       00		      .byte.b	#%00000000
     39  f32f		       03		      .byte.b	#%00000011
     40  f330		       00		      .byte.b	#%00000000
     41  f331		       00		      .byte.b	#%00000000
     42  f332		       00		      .byte.b	#%00000000
     43  f333		       00		      .byte.b	#%00000000
     44  f334		       00		      .byte.b	#%00000000
     45  f335		       00		      .byte.b	#%00000000
     46  f336		       00		      .byte.b	#%00000000
     47  f337		       00		      .byte.b	#%00000000
     48  f338		       00		      .byte.b	#%00000000
     49  f339		       00		      .byte.b	#%00000000
     50  f33a		       00		      .byte.b	#%00000000
     51  f33b		       00		      .byte.b	#%00000000
     52  f33c		       00		      .byte.b	#%00000000
     53  f33d		       00		      .byte.b	#%00000000
     54  f33e		       00		      .byte.b	#%00000000
     55  f33f		       ff		      .byte.b	#%11111111	;<- last
     56  f340
     57  f340				   PF2_data_activision
     58  f340		       ff		      .byte.b	#%11111111	;<- first
     59  f341		       00		      .byte.b	#%00000000
     60  f342		       00		      .byte.b	#%00000000
     61  f343		       00		      .byte.b	#%00000000
     62  f344		       00		      .byte.b	#%00000000
     63  f345		       00		      .byte.b	#%00000000
     64  f346		       00		      .byte.b	#%00000000
     65  f347		       07		      .byte.b	#%00000111
     66  f348		       08		      .byte.b	#%00001000
     67  f349		       10		      .byte.b	#%00010000
     68  f34a		       10		      .byte.b	#%00010000
     69  f34b		       20		      .byte.b	#%00100000
     70  f34c		       20		      .byte.b	#%00100000
     71  f34d		       40		      .byte.b	#%01000000
     72  f34e		       80		      .byte.b	#%10000000
     73  f34f		       80		      .byte.b	#%10000000
     74  f350		       00		      .byte.b	#%00000000
     75  f351		       00		      .byte.b	#%00000000
     76  f352		       00		      .byte.b	#%00000000
     77  f353		       00		      .byte.b	#%00000000
     78  f354		       00		      .byte.b	#%00000000
     79  f355		       00		      .byte.b	#%00000000
     80  f356		       00		      .byte.b	#%00000000
     81  f357		       ff		      .byte.b	#%11111111	;<- last
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex1-Sound 1 tone 1 channel.asm
    461  f358
    462  fffa					      org	$FFFA
    463  fffa
    464  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    465  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    466  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
