------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e04-Ex2-2LK Two Player Color.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; s02e04 2LK Two Player Graphics 2SL, Background 4SL
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e04-Ex2-2LK Two Player Color.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e04-Ex2-2LK Two Player Color.asm
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/VP0kUBIH2T0
      7  0000 ????						;
      8  0000 ????						; Become a Patron - https://patreon.com/8blit
      9  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     10  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     11  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     12  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     13  0000 ????						; Visit the Website - https://www.8blit.com 
     14  0000 ????						;
     15  0000 ????						; Email - 8blit0@gmail.com
     16  0000 ????
     17  0000 ????						; define constants
     18  0000 ????
     19  0000 ????	       00 60	   PF_H       equ	#96	; 2LK playfield height (in segments)
     20  0000 ????	       00 0c	   ROBOT_H    equ	#12	; robot sprite height
     21  0000 ????	       00 02	   ROBOT_F    equ	#2	; number of frames in the robot animation
     22  0000 ????
     23 U0094 ????				      seg.u	vars	; uninitialized segment
     24 U0080					      org	$80	; origin set at base of ram
     25 U0080
     26 U0080		       00	   p0_y       ds	1	; player 0 y pos
     27 U0081		       00	   tp0_y      ds	1	; temporary player 0 y pos
     28 U0082		       00	   p0_x       ds	1	; player 0 x pos
     29 U0083		       00	   colp0      ds	1	; temporary to store player 0 color
     30 U0084		       00	   p1_y       ds	1	; player 1 y pos
     31 U0085		       00	   tp1_y      ds	1	; temporary player 1 y pos
     32 U0086		       00	   p1_x       ds	1	; player 1 x pos
     33 U0087		       00	   pf_count   ds	1	; playfield index
     34 U0088		       00	   robot_cel  ds	1	; current cel of robot animation
     35 U0089		       00 00	   robot_col_ptr ds	2
     36 U008b		       00 00	   robot1_col_ptr ds	2
     37 U008d		       00 00	   robot_ptr  ds	2
     38 U008f		       00	   robot_tcol ds	1
     39 U0090		       00	   robot0_tcol ds	1
     40 U0091		       00	   tpf0       ds	1
     41 U0092		       00	   tpf1       ds	1
     42 U0093		       00	   tpf2       ds	1
     43 U0094
     44  10000 ????				       seg	main	; start of main segment
     45  f000					      org	$F000
     46  f000
     47  f000				   Reset
      0  f000					      CLEAN_START		; ouput: all ram/registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002				  -	      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002				  -	      lxa	#0
      6  f002					      ELSE
      7  f002		       a2 00		      ldx	#0
      8  f004		       8a		      txa
      9  f005					      ENDIF
     10  f005		       a8		      tay
     11  f006		       ca	   .CLEAR_STACK dex
     12  f007		       9a		      txs
     13  f008		       48		      pha
     14  f009		       d0 fb		      bne	.CLEAR_STACK
     15  f00b
     49  f00b
     50  f00b							; set area values
     51  f00b		       a9 01		      lda	#%00000001	; playfield to reflect (default behavior, not nessesary)
     52  f00d		       85 0a		      sta	CTRLPF	; set control playfield
     53  f00f		       a9 a8		      lda	#$A8	; blue
     54  f011		       85 08		      sta	COLUPF	; set playfield color
     55  f013		       a9 00		      lda	#$0	; black
     56  f015		       85 09		      sta	COLUBK	; set background color
     57  f017		       a9 01		      lda	#1	; delay updating GRP0 until GRP1 is written
     58  f019		       85 25		      sta	VDELP0	; set vertical delay
     59  f01b
     60  f01b							; set initial player position
     61  f01b		       a9 c8		      lda	#200
     62  f01d		       85 80		      sta	p0_y	; initial y pos of p0
     63  f01f		       85 84		      sta	p1_y	; initial y pos of p1
     64  f021		       a9 28		      lda	#40
     65  f023		       85 82		      sta	p0_x	; initial x pos of p0
     66  f025		       a9 78		      lda	#120
     67  f027		       85 86		      sta	p1_x	; initial x pos of p1		      
     68  f029		       a9 08		      lda	#%00001000	; player reflect    
     69  f02b		       85 0c		      sta	REFP1	; set reflect on player 1    
     70  f02d
     71  f02d				   NextFrame
      0  f02d					      VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f02d		       a9 0e		      lda	#%1110
      2  f02f		       85 02	   .VSLP1     sta	WSYNC
      3  f031		       85 00		      sta	VSYNC
      4  f033		       4a		      lsr
      5  f034		       d0 f9		      bne	.VSLP1
     73  f036		       85 02		      sta	WSYNC
     74  f038
     75  f038				   VerticalBlank
     76  f038		       a2 2b		      ldx	#43	; 37sl * 76mc = 2812 
     77  f03a		       8e 96 02 	      stx	TIM64T	; set 64-clock for 43 intervals. 43 * 64mc = 2752mc before timer ends
     78  f03d
     79  f03d				   PositionPlayers
     80  f03d		       a5 82		      lda	p0_x	; player 0 x position
     81  f03f		       a2 00		      ldx	#0	; player 0 object
     82  f041		       20 79 f1 	      jsr	PositionX
     83  f044		       a5 86		      lda	p1_x	; player 1 x position
     84  f046		       a2 01		      ldx	#1	; player 1 object
     85  f048		       20 79 f1 	      jsr	PositionX
     86  f04b		       85 02		      sta	WSYNC
     87  f04d		       85 2a		      sta	HMOVE	; strobe horizontal move to fine positions
     88  f04f
     89  f04f							; create pointers to the robot graphic
     90  f04f		       e6 88		      inc	robot_cel	; next cel
     91  f051		       a5 88		      lda	robot_cel
     92  f053		       29 0f		      and	#15
     93  f055		       85 88		      sta	robot_cel
     94  f057		       4a		      lsr
     95  f058		       4a		      lsr
     96  f059		       4a		      lsr
     97  f05a		       aa		      tax
     98  f05b		       bd 62 f2 	      lda	robot_lsb_ptr,x
     99  f05e		       85 8d		      sta	robot_ptr
    100  f060		       bd 64 f2 	      lda	robot_msb_ptr,x
    101  f063		       85 8e		      sta	robot_ptr+1
    102  f065		       bd 9b f2 	      lda	robot_col_lsb_ptr,x
    103  f068		       85 89		      sta	robot_col_ptr
    104  f06a		       bd 9d f2 	      lda	robot_col_msb_ptr,X
    105  f06d		       85 8a		      sta	robot_col_ptr+1
    106  f06f		       bd 9f f2 	      lda	robot1_col_lsb_ptr,x
    107  f072		       85 8b		      sta	robot1_col_ptr
    108  f074		       bd a1 f2 	      lda	robot1_col_msb_ptr,X
    109  f077		       85 8c		      sta	robot1_col_ptr+1
    110  f079
    111  f079		       a5 80		      lda	p0_y	; player 0 y position
    112  f07b		       85 81		      sta	tp0_y	; set working y index
    113  f07d		       a5 84		      lda	p1_y	; player 1 y position
    114  f07f		       85 85		      sta	tp1_y	; set working y index
    115  f081
    116  f081		       a2 ff		      ldx	#255
    117  f083		       a0 60		      ldy	#PF_H
    118  f085		       84 87		      sty	pf_count
    119  f087
    120  f087				   CheckTimer
    121  f087		       ad 84 02 	      lda	INTIM	; time remaining (or past)
    122  f08a		       d0 fb		      bne	CheckTimer	; burn remaining cycles
    123  f08c
    124  f08c		       a9 00		      lda	#0	; D1 to 0 to end VBLANK
    125  f08e		       85 02		      sta	WSYNC
    126  f090							;--------------------------------------		    
    127  f090		       85 01		      sta	VBLANK	; 3   3 - set vertical blank off
    128  f092
    129  f092				   Kernel
    130  f092		       a5 87		      lda	pf_count	;	     ; 2   5 [18]
    131  f094		       29 03		      and	#%11	; 2   7 [20]
    132  f096		       d0 01		      bne	SkipX	; 3  10 [23]
    133  f098		       e8		      inx		; 2  12 [25]
    134  f099				   SkipX
    135  f099							; draw player 0
    136  f099		       a9 0c		      lda	#ROBOT_H	; 2  14 [27] - load height of sprite
    137  f09b		       38		      sec		; 2  16 [29] - set carry flag
    138  f09c		       e7 81		      isb	tp0_y	; 6  22 [35] - increase tp0_y subtract from accumulator
    139  f09e		       b0 02		      bcs	drawing_p0	; 3  25 [38] - 
    140  f0a0		       a9 00		      lda	#0	; 2  27 [41]
    141  f0a2				   drawing_p0
    142  f0a2		       a8		      tay		; 2  29 [43]
    143  f0a3		       b1 89		      lda	(robot_col_ptr),y	; 5  34 [48]
    144  f0a5		       85 90		      sta	robot0_tcol	; 3  37 [51]
    145  f0a7		       b1 8d		      lda	(robot_ptr),y	; 5  42 [56] - pull graphic from pointer
    146  f0a9		       85 02		      sta	WSYNC	; 3  45 [59]
    147  f0ab							;--------------------------------------	
    148  f0ab		       85 1b		      sta	GRP0	; 3   3 - immediatly store, but wont be written until GRP1 is
    149  f0ad
    150  f0ad
    151  f0ad							; draw playfield
    152  f0ad		       bd 00 f2 	      lda	PF0_data,x	; 2  10 
    153  f0b0		       85 0d		      sta	PF0	; 3  13
    154  f0b2		       bd 18 f2 	      lda	PF1_data,x	; 2  15
    155  f0b5		       85 0e		      sta	PF1	; 3  18
    156  f0b7		       bd 18 f2 	      lda	PF1_data,x	; 2  20
    157  f0ba		       85 0f		      sta	PF2	; 3  23
    158  f0bc
    159  f0bc							; draw player 1
    160  f0bc		       a9 0c		      lda	#ROBOT_H	; 2  25 - load height of sprite
    161  f0be		       38		      sec		; 2  27 - set carry flag
    162  f0bf		       e7 85		      isb	tp1_y	; 6  33 - increase tp0_y subtract from accumulator
    163  f0c1		       b0 02		      bcs	drawing_p1	; 3  36 - 
    164  f0c3		       a9 00		      lda	#0	; 2  38
    165  f0c5				   drawing_p1
    166  f0c5		       a8		      tay		; 2  40
    167  f0c6		       b1 8b		      lda	(robot1_col_ptr),y	; 5  45
    168  f0c8		       85 8f		      sta	robot_tcol	; 3  48
    169  f0ca		       b1 8d		      lda	(robot_ptr),y	; 5  53 - pull graphic from pointer
    170  f0cc		       85 02		      sta	WSYNC	; 3  56
    171  f0ce							;--------------------------------------	
    172  f0ce		       85 1c		      sta	GRP1	; 3   3 - immediatly store, but wont be written until GRP1 is
    173  f0d0		       a5 90		      lda	robot0_tcol	; 2   5
    174  f0d2		       85 06		      sta	COLUP0	; 3   8
    175  f0d4		       a5 8f		      lda	robot_tcol	; 2   5
    176  f0d6		       85 07		      sta	COLUP1	; 3   8
    177  f0d8
    178  f0d8		       c6 87		      dec	pf_count	; 5  13
    179  f0da		       d0 b6		      bne	Kernel	; 3  16
    180  f0dc
    181  f0dc		       85 02		      sta	WSYNC
    182  f0de
    183  f0de		       a9 00		      lda	#0
    184  f0e0		       85 0d		      sta	PF0
    185  f0e2		       85 0e		      sta	PF1
    186  f0e4		       85 0f		      sta	PF2
    187  f0e6
    188  f0e6							; end of kernel
    189  f0e6
    190  f0e6				   pf_end
    191  f0e6		       85 02		      sta	WSYNC	; end kernel with a clean scan line
    192  f0e8		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    193  f0ea		       85 01		      sta	VBLANK	; turn off the beam
    194  f0ec
    195  f0ec							; ---- Overscan (30 scanlines)
    196  f0ec		       a2 23		      ldx	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    197  f0ee		       8e 96 02 	      stx	TIM64T	; Set a count of 35 with 64-clock interval
    198  f0f1
    199  f0f1							; read direction input player 0
    200  f0f1		       a6 82		      ldx	p0_x
    201  f0f3							; check right movement
    202  f0f3		       a9 80		      lda	#%10000000
    203  f0f5		       2c 80 02 	      bit	SWCHA
    204  f0f8		       d0 09		      bne	pos_noright
    205  f0fa		       e0 9b		      cpx	#155
    206  f0fc		       b0 05		      bcs	pos_noright
    207  f0fe		       e8		      inx
    208  f0ff		       a9 00		      lda	#%00000000
    209  f101		       85 0b		      sta	REFP0
    210  f103				   pos_noright
    211  f103							; check left movement	 
    212  f103		       a9 40		      lda	#%01000000
    213  f105		       2c 80 02 	      bit	SWCHA
    214  f108		       d0 09		      bne	pos_noleft
    215  f10a		       e0 04		      cpx	#4
    216  f10c		       90 05		      bcc	pos_noleft
    217  f10e		       ca		      dex
    218  f10f		       a9 08		      lda	#%00001000
    219  f111		       85 0b		      sta	REFP0
    220  f113				   pos_noleft
    221  f113		       86 82		      stx	p0_x	; store x position
    222  f115
    223  f115							; check down movement
    224  f115		       a6 80		      ldx	p0_y
    225  f117		       a9 20		      lda	#%00100000
    226  f119		       2c 80 02 	      bit	SWCHA
    227  f11c		       d0 05		      bne	pos_nodown
    228  f11e		       e0 ad		      cpx	#173	; lower bound
    229  f120		       90 01		      bcc	pos_nodown
    230  f122		       ca		      dex
    231  f123				   pos_nodown
    232  f123							; check up movement
    233  f123		       a9 10		      lda	#%00010000
    234  f125		       2c 80 02 	      bit	SWCHA
    235  f128		       d0 05		      bne	pos_noup
    236  f12a		       e0 ff		      cpx	#255	; upper bound
    237  f12c		       b0 01		      bcs	pos_noup
    238  f12e		       e8		      inx
    239  f12f				   pos_noup
    240  f12f		       86 80		      stx	p0_y	; store y position
    241  f131
    242  f131							; read direction input player 1
    243  f131		       a6 86		      ldx	p1_x
    244  f133							; check right movement
    245  f133		       a9 08		      lda	#%00001000
    246  f135		       2c 80 02 	      bit	SWCHA
    247  f138		       d0 09		      bne	pos_noright1
    248  f13a		       e0 9b		      cpx	#155
    249  f13c		       b0 05		      bcs	pos_noright1
    250  f13e		       e8		      inx
    251  f13f		       a9 00		      lda	#%00000000
    252  f141		       85 0c		      sta	REFP1
    253  f143				   pos_noright1
    254  f143							; check left movement	 
    255  f143		       a9 04		      lda	#%00000100
    256  f145		       2c 80 02 	      bit	SWCHA
    257  f148		       d0 09		      bne	pos_noleft1
    258  f14a		       e0 04		      cpx	#4
    259  f14c		       90 05		      bcc	pos_noleft1
    260  f14e		       ca		      dex
    261  f14f		       a9 08		      lda	#%00001000
    262  f151		       85 0c		      sta	REFP1
    263  f153				   pos_noleft1
    264  f153		       86 86		      stx	p1_x	; store x position
    265  f155
    266  f155							; check down movement
    267  f155		       a6 84		      ldx	p1_y
    268  f157		       a9 02		      lda	#%00000010
    269  f159		       2c 80 02 	      bit	SWCHA
    270  f15c		       d0 05		      bne	pos_nodown1
    271  f15e		       e0 ad		      cpx	#173	; lower bound
    272  f160		       90 01		      bcc	pos_nodown1
    273  f162		       ca		      dex
    274  f163				   pos_nodown1
    275  f163							; check up movement
    276  f163		       a9 01		      lda	#%00000001
    277  f165		       2c 80 02 	      bit	SWCHA
    278  f168		       d0 05		      bne	pos_noup1
    279  f16a		       e0 ff		      cpx	#255	; upper bound
    280  f16c		       b0 01		      bcs	pos_noup1
    281  f16e		       e8		      inx
    282  f16f				   pos_noup1
    283  f16f		       86 84		      stx	p1_y	; store y position	   
    284  f171
    285  f171							; timer2 -----------
    286  f171				   timer2
    287  f171		       ae 84 02 	      ldx	INTIM
    288  f174		       d0 fb		      bne	timer2
    289  f176
    290  f176		       4c 2d f0 	      jmp	NextFrame	; (3) jump back up to start the next frame
    291  f179
    292  f179
    293  f179							; -----------------------------------------------------------------------------
    294  f179							; PositionX
    295  f179							; A - Horizontal position of the object
    296  f179							; X - Object to position
    297  f179							;   0 - Player 0
    298  f179							;   1 - Player 1
    299  f179							;   2 - Missile 0
    300  f179							;   3 - Missile 1
    301  f179							;   4 - Ball
    302  f179							; -----------------------------------------------------------------------------
    303  f179
    304  f179				   PositionX
    305  f179		       38		      sec		;  2 +2 - set the carry flag
    306  f17a		       85 02		      sta	WSYNC	;  3 +5 - start a new line
    307  f17c				   DivideLoop
    308  f17c		       e9 0f		      sbc	#15	;  2  2 - subtract 15
    309  f17e		       b0 fc		      bcs	DivideLoop	;  2  4 - branch until negative
    310  f180		       49 07		      eor	#7	;  2  6 - calculate fine offset
    311  f182		       0a		      asl		;  2  8 - shift left
    312  f183		       0a		      asl		;  2 10
    313  f184		       0a		      asl		;  2 12
    314  f185		       0a		      asl		;  2 14
    315  f186		       95 20		      sta	HMP0,x	;  5 19 - set fine offset
    316  f188		       95 10		      sta	RESP0,x	;  4 23 - set coarse position
    317  f18a		       60		      rts		;  6 29 - return
    318  f18b
    319  f200		       00 00 00 00*	      align	$100	; align data
    320  f200
    321  f200							; we're going with a 4 scanline playfield loading data from the bottom up
    322  f200				   PF0_data
    323  f200		       f0		      .byte.b	#%11110000	;<- first
    324  f201		       10		      .byte.b	#%00010000
    325  f202		       30		      .byte.b	#%00110000
    326  f203		       10		      .byte.b	#%00010000
    327  f204		       10		      .byte.b	#%00010000
    328  f205		       10		      .byte.b	#%00010000
    329  f206		       10		      .byte.b	#%00010000
    330  f207		       10		      .byte.b	#%00010000
    331  f208		       10		      .byte.b	#%00010000
    332  f209		       10		      .byte.b	#%00010000
    333  f20a		       10		      .byte.b	#%00010000
    334  f20b		       10		      .byte.b	#%00010000
    335  f20c		       10		      .byte.b	#%00010000
    336  f20d		       10		      .byte.b	#%00010000
    337  f20e		       10		      .byte.b	#%00010000
    338  f20f		       10		      .byte.b	#%00010000
    339  f210		       10		      .byte.b	#%00010000
    340  f211		       10		      .byte.b	#%00010000
    341  f212		       10		      .byte.b	#%00010000
    342  f213		       10		      .byte.b	#%00010000
    343  f214		       10		      .byte.b	#%00010000
    344  f215		       30		      .byte.b	#%00110000
    345  f216		       10		      .byte.b	#%00010000
    346  f217		       f0		      .byte.b	#%11110000	;<- last
    347  f218
    348  f218				   PF1_data
    349  f218		       ff		      .byte.b	#%11111111	;<- first
    350  f219		       00		      .byte.b	#%00000000
    351  f21a		       00		      .byte.b	#%00000000
    352  f21b		       00		      .byte.b	#%00000000
    353  f21c		       00		      .byte.b	#%00000000
    354  f21d		       00		      .byte.b	#%00000000
    355  f21e		       00		      .byte.b	#%00000000
    356  f21f		       00		      .byte.b	#%00000000
    357  f220		       00		      .byte.b	#%00000000
    358  f221		       00		      .byte.b	#%00000000
    359  f222		       00		      .byte.b	#%00000000
    360  f223		       00		      .byte.b	#%00000000
    361  f224		       00		      .byte.b	#%00000000
    362  f225		       00		      .byte.b	#%00000000
    363  f226		       00		      .byte.b	#%00000000
    364  f227		       00		      .byte.b	#%00000000
    365  f228		       00		      .byte.b	#%00000000
    366  f229		       00		      .byte.b	#%00000000
    367  f22a		       00		      .byte.b	#%00000000
    368  f22b		       00		      .byte.b	#%00000000
    369  f22c		       00		      .byte.b	#%00000000
    370  f22d		       00		      .byte.b	#%00000000
    371  f22e		       00		      .byte.b	#%00000000
    372  f22f		       ff		      .byte.b	#%11111111	;<- last
    373  f230
    374  f230				   PF2_data
    375  f230		       ff		      .byte.b	#%11111111	;<- first
    376  f231		       00		      .byte.b	#%00000000
    377  f232		       00		      .byte.b	#%00000000
    378  f233		       00		      .byte.b	#%00000000
    379  f234		       00		      .byte.b	#%00000000
    380  f235		       00		      .byte.b	#%00000000
    381  f236		       00		      .byte.b	#%00000000
    382  f237		       00		      .byte.b	#%00000000
    383  f238		       00		      .byte.b	#%00000000
    384  f239		       00		      .byte.b	#%00000000
    385  f23a		       00		      .byte.b	#%00000000
    386  f23b		       00		      .byte.b	#%00000000
    387  f23c		       00		      .byte.b	#%00000000
    388  f23d		       00		      .byte.b	#%00000000
    389  f23e		       00		      .byte.b	#%00000000
    390  f23f		       00		      .byte.b	#%00000000
    391  f240		       00		      .byte.b	#%00000000
    392  f241		       00		      .byte.b	#%00000000
    393  f242		       00		      .byte.b	#%00000000
    394  f243		       00		      .byte.b	#%00000000
    395  f244		       00		      .byte.b	#%00000000
    396  f245		       00		      .byte.b	#%00000000
    397  f246		       00		      .byte.b	#%00000000
    398  f247		       ff		      .byte.b	#%11111111	;<- last
    399  f248
    400  f248				   robot_f0
    401  f248		       00		      .byte.b	$0
    402  f249		       00		      .byte.b	%00000000	;
    403  f24a		       84		      .byte.b	%10000100	;
    404  f24b		       52		      .byte.b	%01010010	;
    405  f24c		       ff		      .byte.b	%11111111	;
    406  f24d		       aa		      .byte.b	%10101010	;
    407  f24e		       fe		      .byte.b	%11111110	;
    408  f24f		       7f		      .byte.b	%01111111	;
    409  f250		       c9		      .byte.b	%11001001	;
    410  f251		       db		      .byte.b	%11011011	;
    411  f252		       c9		      .byte.b	%11001001	;
    412  f253		       7e		      .byte.b	%01111110	;
    413  f254		       08		      .byte.b	%00001000	;
    414  f255
    415  f255				   robot_f1
    416  f255		       00		      .byte.b	$0
    417  f256		       84		      .byte.b	%10000100	;
    418  f257		       10		      .byte.b	%00010000	;
    419  f258		       42		      .byte.b	%01000010	;
    420  f259		       ff		      .byte.b	%11111111	;
    421  f25a		       55		      .byte.b	%01010101	;
    422  f25b		       fe		      .byte.b	%11111110	;
    423  f25c		       7f		      .byte.b	%01111111	;
    424  f25d		       c9		      .byte.b	%11001001	;
    425  f25e		       db		      .byte.b	%11011011	;
    426  f25f		       c9		      .byte.b	%11001001	;
    427  f260		       7e		      .byte.b	%01111110	;
    428  f261		       08		      .byte.b	%00001000	;
    429  f262
    430  f262				   robot_lsb_ptr
    431  f262		       48		      .byte.b	<robot_f0	; LSB
    432  f263		       55		      .byte.b	<robot_f1
    433  f264
    434  f264				   robot_msb_ptr
    435  f264		       f2		      .byte.b	>robot_f0	; MSB
    436  f265		       f2		      .byte.b	>robot_f1
    437  f266
    438  f266				   robot_f0_col
    439  f266		       00		      .byte.b	$0
    440  f267		       28		      .byte.b	#$28	; orange
    441  f268		       2c		      .byte.b	#$2C	; orange
    442  f269		       0c		      .byte.b	#$0C	; dark grey
    443  f26a		       0c		      .byte.b	#$0C	; dark grey
    444  f26b		       98		      .byte.b	#$98	; blue
    445  f26c		       0c		      .byte.b	#$0C	; dark grey
    446  f26d		       0c		      .byte.b	#$0C	; dark grey
    447  f26e		       0c		      .byte.b	#$0C	; dark grey
    448  f26f		       0e		      .byte.b	#$0E	; dark grey
    449  f270		       0c		      .byte.b	#$0C	; dark grey
    450  f271		       0c		      .byte.b	#$0C	; dark grey
    451  f272		       ee		      .byte.b	#$EE	; yellow
    452  f273
    453  f273				   robot_f1_col
    454  f273		       00		      .byte.b	$0
    455  f274		       28		      .byte.b	#$28	; orange
    456  f275		       2c		      .byte.b	#$2C	; orange
    457  f276		       0c		      .byte.b	#$0C	; dark grey
    458  f277		       0c		      .byte.b	#$0C	; dark grey
    459  f278		       98		      .byte.b	#$98	; blue
    460  f279		       0c		      .byte.b	#$0C	; dark grey
    461  f27a		       0c		      .byte.b	#$0C	; dark grey
    462  f27b		       0c		      .byte.b	#$0C	; dark grey
    463  f27c		       0e		      .byte.b	#$0E	; dark grey
    464  f27d		       0c		      .byte.b	#$0C	; dark grey
    465  f27e		       0c		      .byte.b	#$0C	; dark grey
    466  f27f		       1a		      .byte.b	#$1A	;  yellow	  
    467  f280
    468  f280				   robot1_f0_col
    469  f280		       00		      .byte.b	$0
    470  f281		       28		      .byte.b	#$28	; orange
    471  f282		       2c		      .byte.b	#$2C	; orange
    472  f283		       0c		      .byte.b	#$0C	; dark grey
    473  f284		       0c		      .byte.b	#$0C	; dark grey
    474  f285		       44		      .byte.b	#$44	; red
    475  f286		       0c		      .byte.b	#$0C	; dark grey
    476  f287		       0c		      .byte.b	#$0C	; dark grey
    477  f288		       0c		      .byte.b	#$0C	; dark grey
    478  f289		       0e		      .byte.b	#$0E	; dark grey
    479  f28a		       0c		      .byte.b	#$0C	; dark grey
    480  f28b		       0c		      .byte.b	#$0C	; dark grey
    481  f28c		       36		      .byte.b	#$36	; yellow
    482  f28d		       00		      .byte.b	#0
    483  f28e				   robot1_f1_col
    484  f28e		       00		      .byte.b	$0
    485  f28f		       28		      .byte.b	#$28	; orange
    486  f290		       2c		      .byte.b	#$2C	; orange
    487  f291		       0c		      .byte.b	#$0C	; dark grey
    488  f292		       0c		      .byte.b	#$0C	; dark grey
    489  f293		       44		      .byte.b	#$44	; red
    490  f294		       0c		      .byte.b	#$0C	; dark grey
    491  f295		       0c		      .byte.b	#$0C	; dark grey
    492  f296		       0c		      .byte.b	#$0C	; dark grey
    493  f297		       0e		      .byte.b	#$0E	; dark grey
    494  f298		       0c		      .byte.b	#$0C	; dark grey
    495  f299		       0c		      .byte.b	#$0C	; dark grey
    496  f29a		       3a		      .byte.b	#$3A	; yellow
    497  f29b
    498  f29b
    499  f29b				   robot_col_lsb_ptr
    500  f29b		       66		      .byte.b	<robot_f0_col	; LSB
    501  f29c		       73		      .byte.b	<robot_f1_col
    502  f29d
    503  f29d				   robot_col_msb_ptr
    504  f29d		       f2		      .byte.b	>robot_f0_col	; MSB
    505  f29e		       f2		      .byte.b	>robot_f1_col
    506  f29f
    507  f29f				   robot1_col_lsb_ptr
    508  f29f		       80		      .byte.b	<robot1_f0_col	; LSB
    509  f2a0		       8e		      .byte.b	<robot1_f1_col
    510  f2a1
    511  f2a1				   robot1_col_msb_ptr
    512  f2a1		       f2		      .byte.b	>robot1_f0_col	; MSB
    513  f2a2		       f2		      .byte.b	>robot1_f1_col
    514  f2a3
    515  fffa					      org	$FFFA
    516  fffa
    517  fffa		       00 f0		      .word.w	Reset	; NMI	($FFFA)
    518  fffc		       00 f0		      .word.w	Reset	; RESET ($FFFC)
    519  fffe		       00 f0		      .word.w	Reset	; IRQ ($FFFE)
    520  10000
