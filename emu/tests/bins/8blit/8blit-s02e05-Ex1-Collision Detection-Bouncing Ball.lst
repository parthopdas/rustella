------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e05-Ex1-Collision Detection-Bouncing Ball.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; s02e05 Ex. 1 Collision Detection - Bouncing Ball
      2  10000 ????						;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	; this example uses the bounce/reflect method used in the game COMBAT
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e05-Ex1-Collision Detection-Bouncing Ball.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	;  
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e05-Ex1-Collision Detection-Bouncing Ball.asm
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/fi5n4tPL1PI
      7  0000 ????						;
      8  0000 ????						; Become a Patron - https://patreon.com/8blit
      9  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     10  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     11  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     12  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     13  0000 ????						; Visit the Website - https://www.8blit.com 
     14  0000 ????						;
     15  0000 ????						; Email - 8blit0@gmail.com
     16  0000 ????
     17  0000 ????						; define constants
     18  0000 ????	       00 60	   PF_H       equ	#96	; 2LK playfield height (in segments)
     19  0000 ????						; we're using a 2LK just as a simple way to have a larger ball
     20  0000 ????						; nothing else to worry about so it's low impact. 
     21  0000 ????						; just adjust PF_H accordingly
     22  0000 ????
     23 U0086 ????				      seg.u	vars	; uninitialized segment
     24 U0080					      org	$80	; origin set at base of ram
     25 U0080
     26 U0080		       00	   b_x	      ds	1	; ball x pos
     27 U0081		       00	   b_y	      ds	1	; ball y pos
     28 U0082
     29 U0082		       00	   b_bearing  ds	1	; (0-15) 16 angles 22.5 deg apart
     30 U0083		       00	   b_bearing_old ds	1	; holds the original bearing (direction) of the ball before bounce
     31 U0084
     32 U0084		       00	   collision_count ds	1	; collision count
     33 U0085		       00	   pf_count   ds	1	; playfield index
     34 U0086
     35 U0086
     36  10000 ????				       seg	main	; start of main segment
     37  f000					      org	$F000
     38  f000
     39  f000				   Reset
      0  f000					      CLEAN_START		; ouput: all ram/registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002				  -	      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002				  -	      lxa	#0
      6  f002					      ELSE
      7  f002		       a2 00		      ldx	#0
      8  f004		       8a		      txa
      9  f005					      ENDIF
     10  f005		       a8		      tay
     11  f006		       ca	   .CLEAR_STACK dex
     12  f007		       9a		      txs
     13  f008		       48		      pha
     14  f009		       d0 fb		      bne	.CLEAR_STACK
     15  f00b
     41  f00b
     42  f00b							; set area values
     43  f00b		       a9 15		      lda	#%00010101	; playfield to reflect (default behavior, not nessesary)
     44  f00d		       85 0a		      sta	CTRLPF
     45  f00f		       a9 ac		      lda	#$AC	; baby blue playfield
     46  f011		       85 08		      sta	COLUPF
     47  f013		       a9 a0		      lda	#$A0	; dark blue background
     48  f015		       85 09		      sta	COLUBK
     49  f017
     50  f017							; set initial ball position
     51  f017		       a9 51		      lda	#81
     52  f019		       85 81		      sta	b_y	; y pos
     53  f01b		       85 80		      sta	b_x	; x pos
     54  f01d		       a2 04		      ldx	#4	; ball object
     55  f01f		       20 e4 f0 	      jsr	PositionX	; uses x register as graphic object index from P0 address	  
     56  f022		       85 02		      sta	WSYNC
     57  f024		       85 2a		      sta	HMOVE	; strobe horizontal move to set fine positions
     58  f026
     59  f026							; set initial bearing (direction)
     60  f026		       a9 09		      lda	#$09	; index from bearing_offsets address
     61  f028		       85 82		      sta	b_bearing
     62  f02a
     63  f02a				   NextFrame
      0  f02a					      VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f02a		       a9 0e		      lda	#%1110
      2  f02c		       85 02	   .VSLP1     sta	WSYNC
      3  f02e		       85 00		      sta	VSYNC
      4  f030		       4a		      lsr
      5  f031		       d0 f9		      bne	.VSLP1
     65  f033
     66  f033				   VerticalBlank
     67  f033		       a2 2b		      ldx	#43	; 37sl * 76mc = 2812 
     68  f035		       8e 96 02 	      stx	TIM64T	; set 64-clock for 43 intervals. 43 * 64mc = 2752mc before timer ends
     69  f038
     70  f038							; collision detection
     71  f038		       a5 06		      lda	CXBLPF	; ball collision with playfield?
     72  f03a		       30 07		      bmi	collision
     73  f03c
     74  f03c		       a9 00		      lda	#0	; no collision, set collision count to 0
     75  f03e		       85 84		      sta	collision_count
     76  f040		       4c 74 f0 	      jmp	no_collision	; bypass collision handling
     77  f043
     78  f043							; when a collision occures we try to reflect to a vertical bearing. If on the next frame we're still
     79  f043							; registering a collision then we try a horizontal bearing. If it's STILL registering a collision 
     80  f043							; then we reflect it back 180 degrees from the original pre-bounce bearing.
     81  f043
     82  f043				   collision
     83  f043							; a collision occured
     84  f043		       a5 84		      lda	collision_count	; how many times has a collision occured consecutively
     85  f045		       d0 15		      bne	col_on	; branch if collisions are already ongoing
     86  f047
     87  f047		       a5 82		      lda	b_bearing	; get the current bearing
     88  f049		       85 83		      sta	b_bearing_old	; store current missile b_bearing
     89  f04b		       49 ff		      eor	#$FF	; reverse our bearings 
     90  f04d		       85 82		      sta	b_bearing
     91  f04f		       e6 82		      inc	b_bearing	; additive reverse
     92  f051		       a5 82		      lda	b_bearing
     93  f053		       29 03		      and	#$03	; is bearing N,S,E,W?
     94  f055		       d0 02		      bne	col_no_adj
     95  f057		       e6 82		      inc	b_bearing	; increment bearing by one offset to prevent continuous reflection
     96  f059
     97  f059				   col_no_adj
     98  f059		       4c 72 f0 	      jmp	collision_done
     99  f05c
    100  f05c		       c9 01	   col_on     cmp	#$01	; check collision_count
    101  f05e		       f0 0b		      beq	reverse_bearing	; first collision in series
    102  f060		       c9 03		      cmp	#$03	; check collision_count
    103  f062		       90 0e		      bcc	collision_done	; second/third collision in series
    104  f064		       d0 0c		      bne	collision_done	; more than three collisions in series
    105  f066		       a5 83		      lda	b_bearing_old	; retrieve pre-bounce bearing
    106  f068		       4c 6d f0 	      jmp	reverse_org_bearing	; reverse bearing it 180 degrees
    107  f06b
    108  f06b				   reverse_bearing		; reverse altered bearing
    109  f06b		       a5 82		      lda	b_bearing
    110  f06d				   reverse_org_bearing		; reverse original bearing
    111  f06d		       18		      clc		; clear carry so it's not included in add on next instruction
    112  f06e		       69 08		      adc	#$08	; reverse bearing by 180 degrees
    113  f070		       85 82		      sta	b_bearing
    114  f072
    115  f072				   collision_done
    116  f072		       e6 84		      inc	collision_count	; increment the number of consecutive collisions
    117  f074				   no_collision
    118  f074
    119  f074							; move the ball
    120  f074		       a5 82		      lda	b_bearing
    121  f076		       29 0f		      and	#$0F	; strip the high nibble
    122  f078		       a8		      tay
    123  f079		       b9 00 f1 	      lda	bearing_offsets,y	; load the x/y offsets based on the current bearing
    124  f07c
    125  f07c		       85 24		      sta	HMBL	; update the balls horizontal motion register which will only
    126  f07e							; use the high nibble where the x offset is stored.
    127  f07e		       29 0f		      and	#$0F	; strip out the high nibble which leaves only the y offset
    128  f080		       38		      sec		; set the carry flag
    129  f081		       e9 08		      sbc	#$08	; subtract 8 for 4bit 2's completment +/-
    130  f083		       18		      clc		; clear carry flag so it's not used in the following add
    131  f084		       65 81		      adc	b_y	; add y offset to current y position
    132  f086		       85 81		      sta	b_y	; store the new y position
    133  f088
    134  f088		       a2 ff		      ldx	#255
    135  f08a		       a0 60		      ldy	#PF_H
    136  f08c		       84 85		      sty	pf_count
    137  f08e
    138  f08e				   checktimer
    139  f08e		       ad 84 02 	      lda	INTIM	; time remaining (or past)
    140  f091		       d0 fb		      bne	checktimer	; burn remaining cycles
    141  f093
    142  f093		       a9 00		      lda	#0	; D1 to 0 to end VBLANK
    143  f095		       85 02		      sta	WSYNC
    144  f097							;--------------------------------------		
    145  f097		       85 01		      sta	VBLANK	; 3   3 - set vertical blank off
    146  f099		       85 2c		      sta	CXCLR
    147  f09b		       85 2a		      sta	HMOVE
    148  f09d
    149  f09d				   kernel
    150  f09d		       a5 85		      lda	pf_count	;	     ; 2   2 
    151  f09f		       29 03		      and	#%011	; 2   4 - binary 3 (4th interation)
    152  f0a1		       d0 01		      bne	skipx	; 3   7 
    153  f0a3		       e8		      inx		; 2   9 
    154  f0a4				   skipx
    155  f0a4
    156  f0a4		       bd 10 f1 	      lda	PF0_data,x	; 2  11 
    157  f0a7		       85 02		      sta	WSYNC
    158  f0a9							;--------------------------------------	 
    159  f0a9
    160  f0a9							; draw playfield
    161  f0a9		       85 0d		      sta	PF0	; 3  3
    162  f0ab		       bd 28 f1 	      lda	PF1_data,x	; 2  5
    163  f0ae		       85 0e		      sta	PF1	; 3  8
    164  f0b0		       bd 40 f1 	      lda	PF2_data,x	; 2  10
    165  f0b3		       85 0f		      sta	PF2	; 3  13
    166  f0b5
    167  f0b5		       a0 00		      ldy	#0	; 2  15 - used to disable ball graphic
    168  f0b7		       a5 81		      lda	b_y	; 2  17 - load ball y pos
    169  f0b9		       c5 85		      cmp	pf_count	; 2  19 - compare y pos to playfield counter
    170  f0bb		       d0 02		      bne	noball	; 3  22 - if it's not the same then continue with disabled ball graphic
    171  f0bd		       a0 02		      ldy	#2	; 2  24 - ball y pos and playfield counter are same so enable ball graphic
    172  f0bf
    173  f0bf				   noball
    174  f0bf		       84 1f		      sty	ENABL	; 3  37 - enable/disable ball graphic
    175  f0c1
    176  f0c1		       85 02		      sta	WSYNC
    177  f0c3
    178  f0c3		       c6 85		      dec	pf_count	; 5  39
    179  f0c5		       d0 d6		      bne	kernel	; 3  42
    180  f0c7
    181  f0c7							; end of kernel
    182  f0c7		       85 02		      sta	WSYNC	; end kernel with a clean scan line
    183  f0c9		       a9 00		      lda	#$0
    184  f0cb		       85 0d		      sta	PF0
    185  f0cd		       85 0e		      sta	PF1
    186  f0cf		       85 0f		      sta	PF2
    187  f0d1		       85 1f		      sta	ENABL
    188  f0d3		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    189  f0d5		       85 01		      sta	VBLANK	; turn off the beam
    190  f0d7
    191  f0d7
    192  f0d7							; ---- Overscan (30 scanlines)
    193  f0d7		       a2 23		      ldx	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    194  f0d9		       8e 96 02 	      stx	TIM64T	; Set a count of 35 with 64-clock interval
    195  f0dc
    196  f0dc							; timer2 -----------
    197  f0dc				   timer2
    198  f0dc		       ae 84 02 	      ldx	INTIM
    199  f0df		       d0 fb		      bne	timer2
    200  f0e1
    201  f0e1		       4c 2a f0 	      jmp	NextFrame	; (3) jump back up to start the next frame
    202  f0e4
    203  f0e4
    204  f0e4							; -----------------------------------------------------------------------------
    205  f0e4							; PositionX
    206  f0e4							; A - Horizontal position of the object
    207  f0e4							; X - Object to position
    208  f0e4							;   0 - Player 0
    209  f0e4							;   1 - Player 1
    210  f0e4							;   2 - Missile 0
    211  f0e4							;   3 - Missile 1
    212  f0e4							;   4 - Ball
    213  f0e4							; -----------------------------------------------------------------------------
    214  f0e4
    215  f0e4				   PositionX
    216  f0e4		       38		      sec		;  2 +2 - set the carry flag
    217  f0e5		       85 02		      sta	WSYNC	;  3 +5 - start a new line
    218  f0e7				   DivideLoop
    219  f0e7		       e9 0f		      sbc	#15	;  2  2 - subtract 15
    220  f0e9		       b0 fc		      bcs	DivideLoop	;  2  4 - branch until negative
    221  f0eb		       49 07		      eor	#7	;  2  6 - calculate fine offset
    222  f0ed		       0a		      asl		;  2  8 - shift left
    223  f0ee		       0a		      asl		;  2 10
    224  f0ef		       0a		      asl		;  2 12
    225  f0f0		       0a		      asl		;  2 14
    226  f0f1		       95 20		      sta	HMP0,x	;  5 19 - set fine offset
    227  f0f3		       95 10		      sta	RESP0,x	;  4 23 - set coarse position
    228  f0f5		       60		      rts		;  6 29 - return
    229  f0f6
    230  f100		       00 00 00 00*	      align	$100	; align data
    231  f100
    232  f100				   bearing_offsets
    233  f100							;index  x-move  y-move 	 deg	 direction  
    234  f100							;------------------------------------------												
    235  f100		       e8		      .byte.b	#%11101000	; 0	 -2	 (8-8)	 0	 90	 right
    236  f101		       e7		      .byte.b	#%11100111	; 1	 -2	 (7-8)	-1	 112.5
    237  f102		       e6		      .byte.b	#%11100110	; 2	 -2	 (6-8)	-2	 135
    238  f103		       f6		      .byte.b	#%11110110	; 3	 -1	 (6-8)	-2	 157.5
    239  f104		       06		      .byte.b	#%00000110	; 4	  0	 (6-8)	-2	 180	 down
    240  f105		       16		      .byte.b	#%00010110	; 5	 +1	 (6-8)	-2	 202.5 
    241  f106		       26		      .byte.b	#%00100110	; 6	 +2	 (6-8)	-2	 225   
    242  f107		       27		      .byte.b	#%00100111	; 7	 +2	 (7-8)	-1	 247.5	 
    243  f108		       28		      .byte.b	#%00101000	; 8	 +2	 (8-8)	 0	 270	 left
    244  f109		       29		      .byte.b	#%00101001	; 9	 +2	 (9-8)	+1	 292.5 
    245  f10a		       2a		      .byte.b	#%00101010	; 10	 +2	 (10-8) +2	 315   
    246  f10b		       1a		      .byte.b	#%00011010	; 11	 +1	 (10-8) +2	 337.5 
    247  f10c		       0a		      .byte.b	#%00001010	; 12	  0	 (10-8) +2	 0/360	 up
    248  f10d		       fa		      .byte.b	#%11111010	; 13	 -1	 (10-8) +2	 22.5
    249  f10e		       ea		      .byte.b	#%11101010	; 14	 -2	 (10-8) +2	 45
    250  f10f		       e9		      .byte.b	#%11101001	; 15	 -2	 (9-8)	+1	 67.5
    251  f110
    252  f110							; we're going with a 4 scanline playfield loading data from the bottom up
    253  f110				   PF0_data
    254  f110		       f0		      .byte.b	#%11110000	;<- first
    255  f111		       30		      .byte.b	#%00110000
    256  f112		       10		      .byte.b	#%00010000
    257  f113		       10		      .byte.b	#%00010000
    258  f114		       10		      .byte.b	#%00010000
    259  f115		       10		      .byte.b	#%00010000
    260  f116		       10		      .byte.b	#%00010000
    261  f117		       10		      .byte.b	#%00010000
    262  f118		       10		      .byte.b	#%00010000
    263  f119		       10		      .byte.b	#%00010000
    264  f11a		       10		      .byte.b	#%00010000
    265  f11b		       10		      .byte.b	#%00010000
    266  f11c		       10		      .byte.b	#%00010000
    267  f11d		       10		      .byte.b	#%00010000
    268  f11e		       10		      .byte.b	#%00010000
    269  f11f		       f0		      .byte.b	#%11110000
    270  f120		       10		      .byte.b	#%00010000
    271  f121		       10		      .byte.b	#%00010000
    272  f122		       10		      .byte.b	#%00010000
    273  f123		       10		      .byte.b	#%00010000
    274  f124		       10		      .byte.b	#%00010000
    275  f125		       10		      .byte.b	#%00010000
    276  f126		       30		      .byte.b	#%00110000
    277  f127		       f0		      .byte.b	#%11110000	;<- last
    278  f128
    279  f128				   PF1_data
    280  f128		       ff		      .byte.b	#%11111111	;<- first
    281  f129		       00		      .byte.b	#%00000000
    282  f12a		       00		      .byte.b	#%00000000
    283  f12b		       00		      .byte.b	#%00000000
    284  f12c		       00		      .byte.b	#%00000000
    285  f12d		       00		      .byte.b	#%00000000
    286  f12e		       00		      .byte.b	#%00000000
    287  f12f		       0f		      .byte.b	#%00001111
    288  f130		       00		      .byte.b	#%00000000
    289  f131		       00		      .byte.b	#%00000000
    290  f132		       00		      .byte.b	#%00000000
    291  f133		       00		      .byte.b	#%00000000
    292  f134		       00		      .byte.b	#%00000000
    293  f135		       00		      .byte.b	#%00000000
    294  f136		       00		      .byte.b	#%00000000
    295  f137		       00		      .byte.b	#%00000000
    296  f138		       f0		      .byte.b	#%11110000
    297  f139		       00		      .byte.b	#%00000000
    298  f13a		       00		      .byte.b	#%00000000
    299  f13b		       00		      .byte.b	#%00000000
    300  f13c		       00		      .byte.b	#%00000000
    301  f13d		       00		      .byte.b	#%00000000
    302  f13e		       00		      .byte.b	#%00000000
    303  f13f		       ff		      .byte.b	#%11111111	;<- last
    304  f140
    305  f140				   PF2_data
    306  f140		       ff		      .byte.b	#%11111111	;<- first
    307  f141		       00		      .byte.b	#%00000000
    308  f142		       00		      .byte.b	#%00000000
    309  f143		       00		      .byte.b	#%00000000
    310  f144		       00		      .byte.b	#%00000000
    311  f145		       00		      .byte.b	#%00000000
    312  f146		       00		      .byte.b	#%00000000
    313  f147		       00		      .byte.b	#%00000000
    314  f148		       00		      .byte.b	#%00000000
    315  f149		       00		      .byte.b	#%00000000
    316  f14a		       0f		      .byte.b	#%00001111
    317  f14b		       00		      .byte.b	#%00000000
    318  f14c		       00		      .byte.b	#%00000000
    319  f14d		       00		      .byte.b	#%00000000
    320  f14e		       00		      .byte.b	#%00000000
    321  f14f		       00		      .byte.b	#%00000000
    322  f150		       f0		      .byte.b	#%11110000
    323  f151		       00		      .byte.b	#%00000000
    324  f152		       00		      .byte.b	#%00000000
    325  f153		       00		      .byte.b	#%00000000
    326  f154		       00		      .byte.b	#%00000000
    327  f155		       00		      .byte.b	#%00000000
    328  f156		       00		      .byte.b	#%00000000
    329  f157		       ff		      .byte.b	#%11111111	;<- last
    330  f158
    331  fffa					      org	$FFFA
    332  fffa
    333  fffa		       00 f0		      .word.w	Reset	; NMI	($FFFA)
    334  fffc		       00 f0		      .word.w	Reset	; RESET ($FFFC)
    335  fffe		       00 f0		      .word.w	Reset	; IRQ ($FFFE)
    336  10000
