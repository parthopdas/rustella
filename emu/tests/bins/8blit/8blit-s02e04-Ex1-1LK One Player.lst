------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e04-Ex1-1LK One Player.asm LEVEL 1 PASS 2
      1  10000 ????
      2  10000 ????				       processor	6502	; s02e04 Ex1. One Player Graphic 1SL, Background 4SL
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e04-Ex1-1LK One Player.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	; 
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s02e04-Ex1-1LK One Player.asm
      5  0000 ????						;
      6  0000 ????						; This Episode on Youtube - https://youtu.be/VP0kUBIH2T0
      7  0000 ????						;
      8  0000 ????						; Become a Patron - https://patreon.com/8blit
      9  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     10  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     11  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     12  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     13  0000 ????						; Visit the Website - https://www.8blit.com 
     14  0000 ????						;
     15  0000 ????						; Email - 8blit0@gmail.com
     16  0000 ????
     17  0000 ????						; NTSC 262 scanlines 60 Hz, PAL 312 scanlines 50Hz
     18  0000 ????	       00 30	   PF_H       equ	#48	; playfield height (in segments)
     19  0000 ????	       00 0c	   GHOST_H    equ	#12	; ghost sprite height
     20  0000 ????	       00 02	   GHOST_F    equ	#2	; Number of frames in the ghost animation
     21  0000 ????
     22 U008c ????				      seg.u	vars	; uninitialized segment
     23 U0080					      org	$80	; origin set at base of ram
     24 U0080
     25 U0080		       00	   p0_y       ds	1	; 1 byte - player 0 y pos
     26 U0081		       00	   tp0_y      ds	1	; 1 byte - temporary player 0 y pos
     27 U0082		       00	   p0_x       ds	1	; 1 byte - player 0 x pos
     28 U0083							;p0_bitmap	  ds 1	  
     29 U0083		       00	   pf_index   ds	1	; 1 byte - playfield index
     30 U0084							;seg_index	  ds 1
     31 U0084							;playfield_ptr   ds 2		      ; 1 byte - pointer to playfield data
     32 U0084		       00	   ghost_cel  ds	1	; current cel of ghost animation
     33 U0085		       00 00	   ghost_col_ptr ds	2
     34 U0087		       00 00	   ghost_ptr  ds	2
     35 U0089		       00	   tpf0       ds	1
     36 U008a		       00	   tpf1       ds	1
     37 U008b		       00	   tpf2       ds	1
     38 U008c
     39  10000 ????				       seg	main	; start of main segment
     40  f000					      org	$F000
     41  f000
      0  f000				   reset      CLEAN_START		; ouput: all ram registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002				  -	      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002				  -	      lxa	#0
      6  f002					      ELSE
      7  f002		       a2 00		      ldx	#0
      8  f004		       8a		      txa
      9  f005					      ENDIF
     10  f005		       a8		      tay
     11  f006		       ca	   .CLEAR_STACK dex
     12  f007		       9a		      txs
     13  f008		       48		      pha
     14  f009		       d0 fb		      bne	.CLEAR_STACK
     15  f00b
     43  f00b
     44  f00b		       a9 01		      lda	#%00000001	; set playfield to reflect (default behavior, not nessesary)
     45  f00d		       85 0a		      sta	CTRLPF	; control playfield
     46  f00f
     47  f00f		       a9 1e		      lda	#$1E
     48  f011		       85 06		      sta	COLUP0	; set the P0 color 
     49  f013
     50  f013		       a9 a8		      lda	#$A8
     51  f015		       85 08		      sta	COLUPF
     52  f017
     53  f017		       a9 00		      lda	#$0
     54  f019		       85 09		      sta	COLUBK
     55  f01b
     56  f01b
     57  f01b
     58  f01b							; set initial player position
     59  f01b		       a9 a5		      lda	#165
     60  f01d		       85 80		      sta	p0_y	; initial y pos of p0
     61  f01f		       a9 50		      lda	#80
     62  f021		       85 82		      sta	p0_x	; initial x pos of p0
     63  f023
     64  f023							; ---- Verticle Sync (3 scanlines)
     65  f023
      0  f023				   nextframe  VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f023		       a9 0e		      lda	#%1110
      2  f025		       85 02	   .VSLP1     sta	WSYNC
      3  f027		       85 00		      sta	VSYNC
      4  f029		       4a		      lsr
      5  f02a		       d0 f9		      bne	.VSLP1
     67  f02c
     68  f02c							; ---- Vertical Blank (37 scanlines)
     69  f02c
     70  f02c		       a2 2b		      ldx	#43	; We'll round down, and clean up the remaining cycles with a WSYNC
     71  f02e		       8e 96 02 	      stx	TIM64T	; Set a count of 43 with 64-clock interval
     72  f031
     73  f031							; set the x position 
     74  f031		       a5 82		      lda	p0_x	; load the p0 x position
     75  f033		       a2 00		      ldx	#0	; P0
     76  f035		       20 2a f1 	      jsr	pos_x	; set the initial course position of the player 0 graphic
     77  f038		       85 02		      sta	WSYNC
     78  f03a		       85 2a		      sta	HMOVE	; gotta apply HMOVE
     79  f03c
     80  f03c							; create a pointer to the ghost graphic
     81  f03c		       e6 84		      inc	ghost_cel	; (5)
     82  f03e		       a5 84		      lda	ghost_cel	; (2)
     83  f040		       29 0f		      and	#15	; (2)
     84  f042		       85 84		      sta	ghost_cel	; (3)
     85  f044		       4a		      lsr		; (2)
     86  f045		       4a		      lsr		; (2)
     87  f046		       4a		      lsr		; (2) 
     88  f047
     89  f047		       aa		      tax		; (2)
     90  f048		       bd ad f2 	      lda	ghost_lsb_ptr,x	; (5)
     91  f04b		       85 87		      sta	ghost_ptr	; (3)
     92  f04d		       bd af f2 	      lda	ghost_msb_ptr,x	; (5)
     93  f050		       85 88		      sta	ghost_ptr+1	; (3)
     94  f052
     95  f052		       bd cb f2 	      lda	ghost_col_lsb_ptr,x
     96  f055		       85 85		      sta	ghost_col_ptr
     97  f057		       bd cd f2 	      lda	ghost_col_msb_ptr,X
     98  f05a		       85 86		      sta	ghost_col_ptr+1
     99  f05c
    100  f05c
    101  f05c		       a5 80	   ghost_done lda	p0_y	; (2)
    102  f05e		       85 81		      sta	tp0_y	; (3)
    103  f060
    104  f060							; prime first line of playfield
    105  f060		       a0 30		      ldy	#PF_H
    106  f062		       b9 00 f2 	      lda	PF0_data,y
    107  f065		       85 0d		      sta	PF0
    108  f067		       b9 31 f2 	      lda	PF1_data,y
    109  f06a		       85 0e		      sta	PF1
    110  f06c		       b9 62 f2 	      lda	PF2_data,y
    111  f06f		       85 0f		      sta	PF2
    112  f071		       84 83		      sty	pf_index
    113  f073
    114  f073		       ae 84 02    timer1     ldx	INTIM	; check the timer	    
    115  f076		       d0 fb		      bne	timer1	; if it's not 0 then branch back up to timer1
    116  f078
    117  f078		       a9 00		      lda	#0	; (2) set D1 to 0 to end VBLANK
    118  f07a		       85 02		      sta	WSYNC	; (3) end with a clean scanline
    119  f07c		       85 01		      sta	VBLANK	; (3) turn on the beam
    120  f07e
    121  f07e							; end of VBLANK
    122  f07e
    123  f07e
    124  f07e
    125  f07e		       20 14 f1    kernel     jsr	draw_p0	; (27, 9 from WSYNC) Draw P0
    126  f081		       a4 83		      ldy	pf_index
    127  f083		       f0 2e		      beq	pf_end
    128  f085		       88		      dey
    129  f086		       84 83		      sty	pf_index
    130  f088
    131  f088		       b9 00 f2 	      lda	PF0_data,y	;4
    132  f08b		       85 89		      sta	tpf0	;3
    133  f08d
    134  f08d		       20 14 f1 	      jsr	draw_p0
    135  f090		       a4 83		      ldy	pf_index
    136  f092		       b9 31 f2 	      lda	PF1_data,y
    137  f095		       85 8a		      sta	tpf1
    138  f097
    139  f097		       20 14 f1 	      jsr	draw_p0
    140  f09a		       a4 83		      ldy	pf_index
    141  f09c		       b9 62 f2 	      lda	PF2_data,y
    142  f09f		       85 8b		      sta	tpf2
    143  f0a1
    144  f0a1		       20 14 f1 	      jsr	draw_p0
    145  f0a4		       a5 89		      lda	tpf0
    146  f0a6		       85 0d		      sta	PF0
    147  f0a8		       a5 8a		      lda	tpf1
    148  f0aa		       85 0e		      sta	PF1
    149  f0ac		       a5 8b		      lda	tpf2
    150  f0ae		       85 0f		      sta	PF2
    151  f0b0
    152  f0b0		       4c 7e f0 	      jmp	kernel	; (2/3)
    153  f0b3
    154  f0b3		       85 02	   pf_end     sta	WSYNC	; (3) end kernel with a clean scan line
    155  f0b5		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    156  f0b7		       85 01		      sta	VBLANK	; turn off the beam
    157  f0b9
    158  f0b9							; ---- Overscan (30 scanlines)
    159  f0b9
    160  f0b9		       a2 23		      ldx	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    161  f0bb		       8e 96 02 	      stx	TIM64T	; Set a count of 35 with 64-clock interval
    162  f0be
    163  f0be		       a9 00		      lda	#0
    164  f0c0		       85 1b		      sta	GRP0
    165  f0c2
    166  f0c2							; Reset
    167  f0c2		       a9 01	   input      lda	#%00000001	; (2) read reset input
    168  f0c4		       2c 82 02 	      bit	SWCHB
    169  f0c7		       d0 03		      bne	switch_noreset
    170  f0c9		       4c 00 f0 	      jmp	reset
    171  f0cc				   switch_noreset
    172  f0cc
    173  f0cc
    174  f0cc							; read direction input
    175  f0cc		       a6 82		      ldx	p0_x
    176  f0ce		       a9 80		      lda	#%10000000	; check for right movement
    177  f0d0		       2c 80 02 	      bit	SWCHA
    178  f0d3		       d0 09		      bne	pos_noright
    179  f0d5		       e0 98		      cpx	#152
    180  f0d7		       b0 05		      bcs	pos_noright
    181  f0d9		       e8		      inx
    182  f0da		       a9 00		      lda	#%00000000
    183  f0dc		       85 0b		      sta	REFP0
    184  f0de				   pos_noright
    185  f0de		       a9 40		      lda	#%01000000	; check left movement
    186  f0e0		       2c 80 02 	      bit	SWCHA
    187  f0e3		       d0 09		      bne	pos_noleft
    188  f0e5		       e0 01		      cpx	#1
    189  f0e7		       90 05		      bcc	pos_noleft
    190  f0e9		       ca		      dex
    191  f0ea		       a9 08		      lda	#%00001000
    192  f0ec		       85 0b		      sta	REFP0
    193  f0ee				   pos_noleft
    194  f0ee		       86 82		      stx	p0_x
    195  f0f0		       a6 80		      ldx	p0_y
    196  f0f2		       a9 20		      lda	#%00100000
    197  f0f4		       2c 80 02 	      bit	SWCHA
    198  f0f7		       d0 05		      bne	pos_nodown
    199  f0f9		       e0 4d		      cpx	#77
    200  f0fb		       90 01		      bcc	pos_nodown
    201  f0fd		       ca		      dex
    202  f0fe				   pos_nodown
    203  f0fe		       a9 10		      lda	#%00010000
    204  f100		       2c 80 02 	      bit	SWCHA
    205  f103		       d0 05		      bne	pos_noup
    206  f105		       e0 ff		      cpx	#255
    207  f107		       b0 01		      bcs	pos_noup
    208  f109		       e8		      inx
    209  f10a				   pos_noup
    210  f10a		       86 80		      stx	p0_y
    211  f10c
    212  f10c							; timer2 -----------
    213  f10c
    214  f10c		       ae 84 02    timer2     ldx	INTIM
    215  f10f		       d0 fb		      bne	timer2
    216  f111
    217  f111
    218  f111		       4c 23 f0 	      jmp	nextframe	; (3) jump back up to start the next frame
    219  f114
    220  f114							; draw player (37 mc total, 28mc to WSYNC, 9 mc after WSYNC)
    221  f114		       a9 0c	   draw_p0    lda	#GHOST_H	; (2) load height of sprite
    222  f116		       38		      sec		; (2) set carry flag
    223  f117		       e7 81		      isb	tp0_y	; (5) increase tp0_y subtract from accumulator
    224  f119		       b0 02		      bcs	drawing_p0	; (2/3)
    225  f11b		       a9 00		      lda	#0	; (2)
    226  f11d		       a8	   drawing_p0 tay		; (2)
    227  f11e		       b1 85		      lda	(ghost_col_ptr),y
    228  f120		       aa		      tax
    229  f121
    230  f121		       b1 87		      lda	(ghost_ptr),y	; (5) Indirect mode, pull graphic from pointer
    231  f123		       85 02		      sta	WSYNC	; (3) 
    232  f125		       85 1b		      sta	GRP0	; (3)
    233  f127		       86 06		      stx	COLUP0
    234  f129
    235  f129		       60		      rts		; (6) return from subroutine
    236  f12a
    237  f12a							; -- set horizontal position (a = X position, x = 0-1 player, 2-3 missiles, 4 ball)
    238  f12a		       85 02	   pos_x      sta	WSYNC	; (3) start a new line
    239  f12c		       24 00		      bit	0	; 
    240  f12e		       38		      sec		; (2) set carry flag
    241  f12f		       e9 0f	   pos_x_loop sbc	#15	; (2) subtract 15
    242  f131		       b0 fc		      bcs	pos_x_loop	; (2/3) branch until negative
    243  f133		       49 07		      eor	#7	; (2) calculate fine offset
    244  f135		       0a		      asl		; (2)
    245  f136		       0a		      asl		; (2)
    246  f137		       0a		      asl		; (2)
    247  f138		       0a		      asl		; (2)
    248  f139		       95 10		      sta	RESP0,x	; (3) fix coarse position
    249  f13b		       95 20		      sta	HMP0,x	; (3) set fine offset
    250  f13d		       60		      rts		; (6) return from subroutine
    251  f13e
    252  f200		       00 00 00 00*	      align	$100	; align?
    253  f200
    254  f200							; we're going with a 4 scanline playfield loading data from the bottom up
    255  f200
    256  f200							;     PF2	  PF1	     PF0 
    257  f200							;     8bits rev  8bits      4 bits rev
    258  f200		       00	   PF0_data   .byte.b	#%00000000
    259  f201		       ff		      .byte.b	#%11111111	;<- last
    260  f202		       f0		      .byte.b	#%11110000
    261  f203		       10		      .byte.b	#%00010000
    262  f204		       10		      .byte.b	#%00010000
    263  f205		       10		      .byte.b	#%00010000
    264  f206		       10		      .byte.b	#%00010000
    265  f207		       10		      .byte.b	#%00010000
    266  f208		       10		      .byte.b	#%00010000
    267  f209		       10		      .byte.b	#%00010000
    268  f20a		       10		      .byte.b	#%00010000
    269  f20b		       10		      .byte.b	#%00010000
    270  f20c		       10		      .byte.b	#%00010000
    271  f20d		       10		      .byte.b	#%00010000
    272  f20e		       10		      .byte.b	#%00010000
    273  f20f		       10		      .byte.b	#%00010000
    274  f210		       10		      .byte.b	#%00010000
    275  f211		       10		      .byte.b	#%00010000
    276  f212		       10		      .byte.b	#%00010000
    277  f213		       10		      .byte.b	#%00010000
    278  f214		       10		      .byte.b	#%00010000
    279  f215		       10		      .byte.b	#%00010000
    280  f216		       10		      .byte.b	#%00010000
    281  f217		       10		      .byte.b	#%00010000
    282  f218		       10		      .byte.b	#%00010000
    283  f219		       10		      .byte.b	#%00010000
    284  f21a		       10		      .byte.b	#%00010000
    285  f21b		       10		      .byte.b	#%00010000
    286  f21c		       10		      .byte.b	#%00010000
    287  f21d		       10		      .byte.b	#%00010000
    288  f21e		       10		      .byte.b	#%00010000
    289  f21f		       10		      .byte.b	#%00010000
    290  f220		       10		      .byte.b	#%00010000
    291  f221		       10		      .byte.b	#%00010000
    292  f222		       10		      .byte.b	#%00010000
    293  f223		       10		      .byte.b	#%00010000
    294  f224		       10		      .byte.b	#%00010000
    295  f225		       10		      .byte.b	#%00010000
    296  f226		       10		      .byte.b	#%00010000
    297  f227		       10		      .byte.b	#%00010000
    298  f228		       10		      .byte.b	#%00010000
    299  f229		       10		      .byte.b	#%00010000
    300  f22a		       10		      .byte.b	#%00010000
    301  f22b		       10		      .byte.b	#%00010000
    302  f22c		       10		      .byte.b	#%00010000
    303  f22d		       10		      .byte.b	#%00010000
    304  f22e		       10		      .byte.b	#%00010000
    305  f22f		       f0		      .byte.b	#%11110000	;<- second
    306  f230		       ff		      .byte.b	#%11111111	;<- first
    307  f231
    308  f231		       00	   PF1_data   .byte.b	#%00000000
    309  f232		       ff		      .byte.b	#%11111111	;<- last
    310  f233		       ff		      .byte.b	#%11111111
    311  f234		       00		      .byte.b	#%00000000
    312  f235		       00		      .byte.b	#%00000000
    313  f236		       00		      .byte.b	#%00000000
    314  f237		       00		      .byte.b	#%00000000
    315  f238		       00		      .byte.b	#%00000000
    316  f239		       00		      .byte.b	#%00000000
    317  f23a		       00		      .byte.b	#%00000000
    318  f23b		       00		      .byte.b	#%00000000
    319  f23c		       00		      .byte.b	#%00000000
    320  f23d		       00		      .byte.b	#%00000000
    321  f23e		       00		      .byte.b	#%00000000
    322  f23f		       00		      .byte.b	#%00000000
    323  f240		       00		      .byte.b	#%00000000
    324  f241		       00		      .byte.b	#%00000000
    325  f242		       00		      .byte.b	#%00000000
    326  f243		       00		      .byte.b	#%00000000
    327  f244		       00		      .byte.b	#%00000000
    328  f245		       00		      .byte.b	#%00000000
    329  f246		       00		      .byte.b	#%00000000
    330  f247		       00		      .byte.b	#%00000000
    331  f248		       00		      .byte.b	#%00000000
    332  f249		       00		      .byte.b	#%00000000
    333  f24a		       00		      .byte.b	#%00000000
    334  f24b		       00		      .byte.b	#%00000000
    335  f24c		       00		      .byte.b	#%00000000
    336  f24d		       00		      .byte.b	#%00000000
    337  f24e		       00		      .byte.b	#%00000000
    338  f24f		       00		      .byte.b	#%00000000
    339  f250		       00		      .byte.b	#%00000000
    340  f251		       00		      .byte.b	#%00000000
    341  f252		       00		      .byte.b	#%00000000
    342  f253		       00		      .byte.b	#%00000000
    343  f254		       00		      .byte.b	#%00000000
    344  f255		       00		      .byte.b	#%00000000
    345  f256		       00		      .byte.b	#%00000000
    346  f257		       00		      .byte.b	#%00000000
    347  f258		       00		      .byte.b	#%00000000
    348  f259		       00		      .byte.b	#%00000000
    349  f25a		       00		      .byte.b	#%00000000
    350  f25b		       00		      .byte.b	#%00000000
    351  f25c		       00		      .byte.b	#%00000000
    352  f25d		       00		      .byte.b	#%00000000
    353  f25e		       00		      .byte.b	#%00000000
    354  f25f		       00		      .byte.b	#%00000000
    355  f260		       ff		      .byte.b	#%11111111	;<- second
    356  f261		       ff		      .byte.b	#%11111111	;<- first
    357  f262
    358  f262		       00	   PF2_data   .byte.b	#%00000000
    359  f263		       ff		      .byte.b	#%11111111	;<- last
    360  f264		       ff		      .byte.b	#%11111111
    361  f265		       00		      .byte.b	#%00000000
    362  f266		       00		      .byte.b	#%00000000
    363  f267		       00		      .byte.b	#%00000000
    364  f268		       00		      .byte.b	#%00000000
    365  f269		       00		      .byte.b	#%00000000
    366  f26a		       00		      .byte.b	#%00000000
    367  f26b		       00		      .byte.b	#%00000000
    368  f26c		       00		      .byte.b	#%00000000
    369  f26d		       00		      .byte.b	#%00000000
    370  f26e		       00		      .byte.b	#%00000000
    371  f26f		       00		      .byte.b	#%00000000
    372  f270		       00		      .byte.b	#%00000000
    373  f271		       00		      .byte.b	#%00000000
    374  f272		       00		      .byte.b	#%00000000
    375  f273		       00		      .byte.b	#%00000000
    376  f274		       00		      .byte.b	#%00000000
    377  f275		       00		      .byte.b	#%00000000
    378  f276		       00		      .byte.b	#%00000000
    379  f277		       00		      .byte.b	#%00000000
    380  f278		       00		      .byte.b	#%00000000
    381  f279		       00		      .byte.b	#%00000000
    382  f27a		       00		      .byte.b	#%00000000
    383  f27b		       00		      .byte.b	#%00000000
    384  f27c		       00		      .byte.b	#%00000000
    385  f27d		       00		      .byte.b	#%00000000
    386  f27e		       00		      .byte.b	#%00000000
    387  f27f		       00		      .byte.b	#%00000000
    388  f280		       00		      .byte.b	#%00000000
    389  f281		       00		      .byte.b	#%00000000
    390  f282		       00		      .byte.b	#%00000000
    391  f283		       00		      .byte.b	#%00000000
    392  f284		       00		      .byte.b	#%00000000
    393  f285		       00		      .byte.b	#%00000000
    394  f286		       00		      .byte.b	#%00000000
    395  f287		       00		      .byte.b	#%00000000
    396  f288		       00		      .byte.b	#%00000000
    397  f289		       00		      .byte.b	#%00000000
    398  f28a		       00		      .byte.b	#%00000000
    399  f28b		       00		      .byte.b	#%00000000
    400  f28c		       00		      .byte.b	#%00000000
    401  f28d		       00		      .byte.b	#%00000000
    402  f28e		       00		      .byte.b	#%00000000
    403  f28f		       00		      .byte.b	#%00000000
    404  f290		       00		      .byte.b	#%00000000
    405  f291		       ff		      .byte.b	#%11111111
    406  f292		       ff		      .byte.b	#%11111111	;<- first
    407  f293
    408  f293
    409  f293
    410  f293
    411  f293				   ghost_f0
    412  f293		       00		      .byte.b	$0
    413  f294		       00		      .byte.b	%00000000	;
    414  f295		       84		      .byte.b	%10000100	;
    415  f296		       52		      .byte.b	%01010010	;
    416  f297		       ff		      .byte.b	%11111111	;
    417  f298		       aa		      .byte.b	%10101010	;
    418  f299		       fe		      .byte.b	%11111110	;
    419  f29a		       7f		      .byte.b	%01111111	;
    420  f29b		       c9		      .byte.b	%11001001	;
    421  f29c		       db		      .byte.b	%11011011	;
    422  f29d		       c9		      .byte.b	%11001001	;
    423  f29e		       7e		      .byte.b	%01111110	;
    424  f29f		       08		      .byte.b	%00001000	;
    425  f2a0				   ghost_f1
    426  f2a0		       00		      .byte.b	$0
    427  f2a1		       84		      .byte.b	%10000100	;
    428  f2a2		       10		      .byte.b	%00010000	;
    429  f2a3		       42		      .byte.b	%01000010	;
    430  f2a4		       ff		      .byte.b	%11111111	;
    431  f2a5		       55		      .byte.b	%01010101	;
    432  f2a6		       fe		      .byte.b	%11111110	;
    433  f2a7		       7f		      .byte.b	%01111111	;
    434  f2a8		       c9		      .byte.b	%11001001	;
    435  f2a9		       db		      .byte.b	%11011011	;
    436  f2aa		       c9		      .byte.b	%11001001	;
    437  f2ab		       7e		      .byte.b	%01111110	;
    438  f2ac		       08		      .byte.b	%00001000	;
    439  f2ad
    440  f2ad				   ghost_lsb_ptr
    441  f2ad		       93		      .byte.b	<ghost_f0	; LSB
    442  f2ae		       a0		      .byte.b	<ghost_f1
    443  f2af
    444  f2af				   ghost_msb_ptr
    445  f2af		       f2		      .byte.b	>ghost_f0	; MSB
    446  f2b0		       f2		      .byte.b	>ghost_f1
    447  f2b1
    448  f2b1		       00	   ghost_f0_col .byte.b	$0
    449  f2b2		       28		      .byte.b	#$28	; orange
    450  f2b3		       2c		      .byte.b	#$2C	; orange
    451  f2b4		       0c		      .byte.b	#$0C	; dark grey
    452  f2b5		       0c		      .byte.b	#$0C	; dark grey
    453  f2b6		       98		      .byte.b	#$98	;
    454  f2b7		       0c		      .byte.b	#$0C	; dark grey
    455  f2b8		       0c		      .byte.b	#$0C	; dark grey
    456  f2b9		       0c		      .byte.b	#$0C	; dark grey
    457  f2ba		       0e		      .byte.b	#$0E	; dark grey
    458  f2bb		       0c		      .byte.b	#$0C	; dark grey
    459  f2bc		       0c		      .byte.b	#$0C	; dark grey
    460  f2bd		       ee		      .byte.b	#$EE	;  yellow
    461  f2be
    462  f2be		       00	   ghost_f1_col .byte.b	$0
    463  f2bf		       28		      .byte.b	#$28	; orange
    464  f2c0		       2c		      .byte.b	#$2C	; orange
    465  f2c1		       0c		      .byte.b	#$0C	; dark grey
    466  f2c2		       0c		      .byte.b	#$0C	; dark grey
    467  f2c3		       98		      .byte.b	#$98	;
    468  f2c4		       0c		      .byte.b	#$0C	; dark grey
    469  f2c5		       0c		      .byte.b	#$0C	; dark grey
    470  f2c6		       0c		      .byte.b	#$0C	; dark grey
    471  f2c7		       0e		      .byte.b	#$0E	; dark grey
    472  f2c8		       0c		      .byte.b	#$0C	; dark grey
    473  f2c9		       0c		      .byte.b	#$0C	; dark grey
    474  f2ca		       1a		      .byte.b	#$1A	;  yellow		  
    475  f2cb
    476  f2cb				   ghost_col_lsb_ptr
    477  f2cb		       b1		      .byte.b	<ghost_f0_col	; LSB
    478  f2cc		       be		      .byte.b	<ghost_f1_col
    479  f2cd
    480  f2cd				   ghost_col_msb_ptr
    481  f2cd		       f2		      .byte.b	>ghost_f0_col	; MSB
    482  f2ce		       f2		      .byte.b	>ghost_f1_col
    483  f2cf
    484  fffa					      org	$FFFA
    485  fffa
    486  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    487  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    488  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    489  10000
    490  10000
    491  10000
    492  10000
    493  10000
    494  10000
    495  10000
    496  10000
    497  10000
    498  10000
    499  10000
