------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s01e06-Ex4-Two Dimensional Sprite.asm LEVEL 1 PASS 2
      1  10000					       processor	6502	; s01e06 Ex4. Two Dimensional Sprite
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	;
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s01e06-Ex4-Two Dimensional Sprite.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	; Expand our fine movement example to draw a two dimensional sprite
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s01e06-Ex4-Two Dimensional Sprite.asm
      4  0000 ????						;
      5  0000 ????						; Some snippets from examples by Andrew Davie
      6  0000 ????						;
      7  0000 ????						; This Episode on Youtube - https://youtu.be/GObPgosXPPs
      8  0000 ????						;
      9  0000 ????						; Become a Patron - https://patreon.com/8blit
     10  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     11  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     12  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     13  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     14  0000 ????						; Visit the Website - https://www.8blit.com 
     15  0000 ????						;
     16  0000 ????						; Email - 8blit0@gmail.com
     17  0000 ????
     18  0000 ????	       00 21	   MIN_HPOS   equ	#33
     19  0000 ????
     20  0000 ????	       00 20	   P0HEIGHT   equ	#32
     21  0000 ????
     22  0000 ????	       00 c0	   MAX_VPOS   equ	#192
     23  0000 ????
     24  0000 ????	       00 9a	   BKCOLOR    equ	#$9A	; background colour (blue)
     25  0000 ????	       00 0e	   COLP0      equ	#$0E	; player 0 sprite colour (white)
     26  0000 ????
     27 U00a1 ????				      seg.u	vars	; uninitialized segment
     28 U0080					      org	$80
     29 U0080
     30 U0080		       00 00 00 00*player0_x  ds	#MIN_HPOS	; byte variable to hold our horizontal position
     31 U00a1				   p0_y       ds		; byte
     32 U00a1
     33 U00a1
     34  10000 ????				       seg	main	; start of main segment
     35  f000					      org	$F000
     36  f000
     37  f000
      0  f000				   reset      CLEAN_START		; macro included in macro.h file
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002				  -	      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002				  -	      lxa	#0
      6  f002					      ELSE
      7  f002		       a2 00		      ldx	#0
      8  f004		       8a		      txa
      9  f005					      ENDIF
     10  f005		       a8		      tay
     11  f006		       ca	   .CLEAR_STACK dex
     12  f007		       9a		      txs
     13  f008		       48		      pha
     14  f009		       d0 fb		      bne	.CLEAR_STACK
     15  f00b
     39  f00b
     40  f00b
     41  f00b		       a9 9a		      lda	#BKCOLOR	; (2)
     42  f00d		       85 09		      sta	COLUBK	; (3) set the PF color
     43  f00f
     44  f00f		       a9 0e		      lda	#COLP0	; (2)
     45  f011		       85 06		      sta	COLUP0	; (3) set the player 1 sprite colour
     46  f013
     47  f013		       a9 50		      lda	#80	; (2) the scan line to start drawing the player 0 graphic
     48  f015		       85 a1		      sta	p0_y	; (3) assign a to our vertical position memory location
     49  f017
     50  f017		       86 80		      stx	player0_x	; (3)
     51  f019		       20 fd f0 	      jsr	pos_x	; (6) set the initial course position of the player 0 graphic
     52  f01c
     53  f01c		       a2 f0		      ldx	#%11110000	; (2) set the horizontal movement player 0 (HMP0) register to adjust the position of
     54  f01e		       86 20		      stx	HMP0	; (3) the player graphic to the right by 1 color clock (only uses the 4 high bits)
     55  f020
     56  f020							; 0111 = left 7
     57  f020							; 0110 = left 6
     58  f020							; 0101 = left 5
     59  f020							; 0100 = left 4
     60  f020							; 0011 = left 3
     61  f020							; 0010 = left 2
     62  f020							; 0001 = left 1
     63  f020							; 0000 = No motion
     64  f020							; 1111 = right 1
     65  f020							; 1110 = right 2
     66  f020							; 1101 = right 3
     67  f020							; 1100 = right 4
     68  f020							; 1011 = right 5
     69  f020							; 1010 = right 6
     70  f020							; 1001 = right 7
     71  f020							; 1000 = right 8
     72  f020
     73  f020							; ---- Begin main loop
     74  f020
      0  f020				   startframe VERTICAL_SYNC		; macro included in macro.h file
      1  f020		       a9 0e		      lda	#%1110
      2  f022		       85 02	   .VSLP1     sta	WSYNC
      3  f024		       85 00		      sta	VSYNC
      4  f026		       4a		      lsr
      5  f027		       d0 f9		      bne	.VSLP1
     76  f029
     77  f029							; ---- 37 scanlines vertical blank (8,436 color clocks, 2,812 machine cycles)
     78  f029
     79  f029		       a2 24		      ldx	#36	; (2)
     80  f02b		       85 02	   lvblank    sta	WSYNC	; (3) each scanline is 228 color clocks, 76 machine cycles
     81  f02d		       ca		      dex		; (2) decrement x by 1
     82  f02e		       d0 fb		      bne	lvblank	; (2/3) branch if not equal x != 37
     83  f030
     84  f030
     85  f030							; 76543210
     86  f030		       a9 00		      lda	#%00000000	; (2) set D1 to 0 to end VBLANK
     87  f032		       85 02		      sta	WSYNC	; (3)
     88  f034		       85 01		      sta	VBLANK	; (3) turn on the beam
     89  f036
     90  f036		       85 2a		      sta	HMOVE	; (3) horizontal move. this will move ALL the player, missle, and ball graphics at the same time
     91  f038							; HMOVE needs to execute during horizontal blanking so it should be done immediatly following
     92  f038							; a WSYNC. Additionally, any of the horizontal movement registers should not be modified within at least
     93  f038							; 24 machine cycles after an HMOVE.
     94  f038
     95  f038							; ---- 192 lines of drawfield		   Each scanline
     96  f038							; (68 color clocks, 22 machine cycles) HBLANK
     97  f038							; (160 color clocks, 53 machine cycles) + 1 Playfield
     98  f038
     99  f038		       a2 c0		      ldx	#MAX_VPOS	; (2)
    100  f03a		       8a	   drawfield  txa		; (2) transfer x to a
    101  f03b		       38		      sec		; (2) set carry flag
    102  f03c		       e5 a1		      sbc	p0_y	; (2) subtrack memory from accumulator
    103  f03e		       c9 20		      cmp	#P0HEIGHT	; (2) have we already drawn all the lines of the graphic?
    104  f040		       90 02		      bcc	p0insprite	; (2/3)
    105  f042		       a9 00		      lda	#0	; (2)
    106  f044				   p0insprite
    107  f044		       a8		      tay		; (2)
    108  f045		       b9 09 f1 	      lda	player0,y	; (4) load the byte at index y starting from the memory location of player0
    109  f048							; this will grab the appropriate line of the graphic for the current scanline
    110  f048		       85 02		      sta	WSYNC	; (3)
    111  f04a		       85 1b		      sta	GRP0	; (3)
    112  f04c		       ca		      dex		; (2)
    113  f04d		       d0 eb		      bne	drawfield	; (2/3)
    114  f04f
    115  f04f							; ---- Overscan (6,840 color clocks, 2,280 machine cycles)
    116  f04f
    117  f04f							; 76543210
    118  f04f		       a9 02		      lda	#%00000010	; set D1 = 1 to initiate VBLANK
    119  f051		       85 01		      sta	VBLANK	; turn off the beam
    120  f053		       a2 21		      ldx	#MIN_HPOS	; (2)
    121  f055		       85 02	   overscan   sta	WSYNC	; (3)
    122  f057		       ca		      dex		; (2)
    123  f058		       d0 fb		      bne	overscan	; (2/3)
    124  f05a
    125  f05a		       4c 20 f0 	      jmp	startframe	; (3) jump back up to start the next frame
    126  f05d
    127  f05d				   Divide15		; the 6502/6507 has neither a multiplication nor a division instruction so here
    128  f05d				   .POS       SET	0	; we're building a list of values for divisions of 15 and which course position
    129  f05d					      REPEAT	160
    130  f05d		       01		      .byte.b	(.POS / 15) + 1
    131  f05d				   .POS       SET	.POS + 1
    129  f05d					      REPEND
    130  f05e		       01		      .byte.b	(.POS / 15) + 1
    131  f05e				   .POS       SET	.POS + 1
    129  f05e					      REPEND
    130  f05f		       01		      .byte.b	(.POS / 15) + 1
    131  f05f				   .POS       SET	.POS + 1
    129  f05f					      REPEND
    130  f060		       01		      .byte.b	(.POS / 15) + 1
    131  f060				   .POS       SET	.POS + 1
    129  f060					      REPEND
    130  f061		       01		      .byte.b	(.POS / 15) + 1
    131  f061				   .POS       SET	.POS + 1
    129  f061					      REPEND
    130  f062		       01		      .byte.b	(.POS / 15) + 1
    131  f062				   .POS       SET	.POS + 1
    129  f062					      REPEND
    130  f063		       01		      .byte.b	(.POS / 15) + 1
    131  f063				   .POS       SET	.POS + 1
    129  f063					      REPEND
    130  f064		       01		      .byte.b	(.POS / 15) + 1
    131  f064				   .POS       SET	.POS + 1
    129  f064					      REPEND
    130  f065		       01		      .byte.b	(.POS / 15) + 1
    131  f065				   .POS       SET	.POS + 1
    129  f065					      REPEND
    130  f066		       01		      .byte.b	(.POS / 15) + 1
    131  f066				   .POS       SET	.POS + 1
    129  f066					      REPEND
    130  f067		       01		      .byte.b	(.POS / 15) + 1
    131  f067				   .POS       SET	.POS + 1
    129  f067					      REPEND
    130  f068		       01		      .byte.b	(.POS / 15) + 1
    131  f068				   .POS       SET	.POS + 1
    129  f068					      REPEND
    130  f069		       01		      .byte.b	(.POS / 15) + 1
    131  f069				   .POS       SET	.POS + 1
    129  f069					      REPEND
    130  f06a		       01		      .byte.b	(.POS / 15) + 1
    131  f06a				   .POS       SET	.POS + 1
    129  f06a					      REPEND
    130  f06b		       01		      .byte.b	(.POS / 15) + 1
    131  f06b				   .POS       SET	.POS + 1
    129  f06b					      REPEND
    130  f06c		       02		      .byte.b	(.POS / 15) + 1
    131  f06c				   .POS       SET	.POS + 1
    129  f06c					      REPEND
    130  f06d		       02		      .byte.b	(.POS / 15) + 1
    131  f06d				   .POS       SET	.POS + 1
    129  f06d					      REPEND
    130  f06e		       02		      .byte.b	(.POS / 15) + 1
    131  f06e				   .POS       SET	.POS + 1
    129  f06e					      REPEND
    130  f06f		       02		      .byte.b	(.POS / 15) + 1
    131  f06f				   .POS       SET	.POS + 1
    129  f06f					      REPEND
    130  f070		       02		      .byte.b	(.POS / 15) + 1
    131  f070				   .POS       SET	.POS + 1
    129  f070					      REPEND
    130  f071		       02		      .byte.b	(.POS / 15) + 1
    131  f071				   .POS       SET	.POS + 1
    129  f071					      REPEND
    130  f072		       02		      .byte.b	(.POS / 15) + 1
    131  f072				   .POS       SET	.POS + 1
    129  f072					      REPEND
    130  f073		       02		      .byte.b	(.POS / 15) + 1
    131  f073				   .POS       SET	.POS + 1
    129  f073					      REPEND
    130  f074		       02		      .byte.b	(.POS / 15) + 1
    131  f074				   .POS       SET	.POS + 1
    129  f074					      REPEND
    130  f075		       02		      .byte.b	(.POS / 15) + 1
    131  f075				   .POS       SET	.POS + 1
    129  f075					      REPEND
    130  f076		       02		      .byte.b	(.POS / 15) + 1
    131  f076				   .POS       SET	.POS + 1
    129  f076					      REPEND
    130  f077		       02		      .byte.b	(.POS / 15) + 1
    131  f077				   .POS       SET	.POS + 1
    129  f077					      REPEND
    130  f078		       02		      .byte.b	(.POS / 15) + 1
    131  f078				   .POS       SET	.POS + 1
    129  f078					      REPEND
    130  f079		       02		      .byte.b	(.POS / 15) + 1
    131  f079				   .POS       SET	.POS + 1
    129  f079					      REPEND
    130  f07a		       02		      .byte.b	(.POS / 15) + 1
    131  f07a				   .POS       SET	.POS + 1
    129  f07a					      REPEND
    130  f07b		       03		      .byte.b	(.POS / 15) + 1
    131  f07b				   .POS       SET	.POS + 1
    129  f07b					      REPEND
    130  f07c		       03		      .byte.b	(.POS / 15) + 1
    131  f07c				   .POS       SET	.POS + 1
    129  f07c					      REPEND
    130  f07d		       03		      .byte.b	(.POS / 15) + 1
    131  f07d				   .POS       SET	.POS + 1
    129  f07d					      REPEND
    130  f07e		       03		      .byte.b	(.POS / 15) + 1
    131  f07e				   .POS       SET	.POS + 1
    129  f07e					      REPEND
    130  f07f		       03		      .byte.b	(.POS / 15) + 1
    131  f07f				   .POS       SET	.POS + 1
    129  f07f					      REPEND
    130  f080		       03		      .byte.b	(.POS / 15) + 1
    131  f080				   .POS       SET	.POS + 1
    129  f080					      REPEND
    130  f081		       03		      .byte.b	(.POS / 15) + 1
    131  f081				   .POS       SET	.POS + 1
    129  f081					      REPEND
    130  f082		       03		      .byte.b	(.POS / 15) + 1
    131  f082				   .POS       SET	.POS + 1
    129  f082					      REPEND
    130  f083		       03		      .byte.b	(.POS / 15) + 1
    131  f083				   .POS       SET	.POS + 1
    129  f083					      REPEND
    130  f084		       03		      .byte.b	(.POS / 15) + 1
    131  f084				   .POS       SET	.POS + 1
    129  f084					      REPEND
    130  f085		       03		      .byte.b	(.POS / 15) + 1
    131  f085				   .POS       SET	.POS + 1
    129  f085					      REPEND
    130  f086		       03		      .byte.b	(.POS / 15) + 1
    131  f086				   .POS       SET	.POS + 1
    129  f086					      REPEND
    130  f087		       03		      .byte.b	(.POS / 15) + 1
    131  f087				   .POS       SET	.POS + 1
    129  f087					      REPEND
    130  f088		       03		      .byte.b	(.POS / 15) + 1
    131  f088				   .POS       SET	.POS + 1
    129  f088					      REPEND
    130  f089		       03		      .byte.b	(.POS / 15) + 1
    131  f089				   .POS       SET	.POS + 1
    129  f089					      REPEND
    130  f08a		       04		      .byte.b	(.POS / 15) + 1
    131  f08a				   .POS       SET	.POS + 1
    129  f08a					      REPEND
    130  f08b		       04		      .byte.b	(.POS / 15) + 1
    131  f08b				   .POS       SET	.POS + 1
    129  f08b					      REPEND
    130  f08c		       04		      .byte.b	(.POS / 15) + 1
    131  f08c				   .POS       SET	.POS + 1
    129  f08c					      REPEND
    130  f08d		       04		      .byte.b	(.POS / 15) + 1
    131  f08d				   .POS       SET	.POS + 1
    129  f08d					      REPEND
    130  f08e		       04		      .byte.b	(.POS / 15) + 1
    131  f08e				   .POS       SET	.POS + 1
    129  f08e					      REPEND
    130  f08f		       04		      .byte.b	(.POS / 15) + 1
    131  f08f				   .POS       SET	.POS + 1
    129  f08f					      REPEND
    130  f090		       04		      .byte.b	(.POS / 15) + 1
    131  f090				   .POS       SET	.POS + 1
    129  f090					      REPEND
    130  f091		       04		      .byte.b	(.POS / 15) + 1
    131  f091				   .POS       SET	.POS + 1
    129  f091					      REPEND
    130  f092		       04		      .byte.b	(.POS / 15) + 1
    131  f092				   .POS       SET	.POS + 1
    129  f092					      REPEND
    130  f093		       04		      .byte.b	(.POS / 15) + 1
    131  f093				   .POS       SET	.POS + 1
    129  f093					      REPEND
    130  f094		       04		      .byte.b	(.POS / 15) + 1
    131  f094				   .POS       SET	.POS + 1
    129  f094					      REPEND
    130  f095		       04		      .byte.b	(.POS / 15) + 1
    131  f095				   .POS       SET	.POS + 1
    129  f095					      REPEND
    130  f096		       04		      .byte.b	(.POS / 15) + 1
    131  f096				   .POS       SET	.POS + 1
    129  f096					      REPEND
    130  f097		       04		      .byte.b	(.POS / 15) + 1
    131  f097				   .POS       SET	.POS + 1
    129  f097					      REPEND
    130  f098		       04		      .byte.b	(.POS / 15) + 1
    131  f098				   .POS       SET	.POS + 1
    129  f098					      REPEND
    130  f099		       05		      .byte.b	(.POS / 15) + 1
    131  f099				   .POS       SET	.POS + 1
    129  f099					      REPEND
    130  f09a		       05		      .byte.b	(.POS / 15) + 1
    131  f09a				   .POS       SET	.POS + 1
    129  f09a					      REPEND
    130  f09b		       05		      .byte.b	(.POS / 15) + 1
    131  f09b				   .POS       SET	.POS + 1
    129  f09b					      REPEND
    130  f09c		       05		      .byte.b	(.POS / 15) + 1
    131  f09c				   .POS       SET	.POS + 1
    129  f09c					      REPEND
    130  f09d		       05		      .byte.b	(.POS / 15) + 1
    131  f09d				   .POS       SET	.POS + 1
    129  f09d					      REPEND
    130  f09e		       05		      .byte.b	(.POS / 15) + 1
    131  f09e				   .POS       SET	.POS + 1
    129  f09e					      REPEND
    130  f09f		       05		      .byte.b	(.POS / 15) + 1
    131  f09f				   .POS       SET	.POS + 1
    129  f09f					      REPEND
    130  f0a0		       05		      .byte.b	(.POS / 15) + 1
    131  f0a0				   .POS       SET	.POS + 1
    129  f0a0					      REPEND
    130  f0a1		       05		      .byte.b	(.POS / 15) + 1
    131  f0a1				   .POS       SET	.POS + 1
    129  f0a1					      REPEND
    130  f0a2		       05		      .byte.b	(.POS / 15) + 1
    131  f0a2				   .POS       SET	.POS + 1
    129  f0a2					      REPEND
    130  f0a3		       05		      .byte.b	(.POS / 15) + 1
    131  f0a3				   .POS       SET	.POS + 1
    129  f0a3					      REPEND
    130  f0a4		       05		      .byte.b	(.POS / 15) + 1
    131  f0a4				   .POS       SET	.POS + 1
    129  f0a4					      REPEND
    130  f0a5		       05		      .byte.b	(.POS / 15) + 1
    131  f0a5				   .POS       SET	.POS + 1
    129  f0a5					      REPEND
    130  f0a6		       05		      .byte.b	(.POS / 15) + 1
    131  f0a6				   .POS       SET	.POS + 1
    129  f0a6					      REPEND
    130  f0a7		       05		      .byte.b	(.POS / 15) + 1
    131  f0a7				   .POS       SET	.POS + 1
    129  f0a7					      REPEND
    130  f0a8		       06		      .byte.b	(.POS / 15) + 1
    131  f0a8				   .POS       SET	.POS + 1
    129  f0a8					      REPEND
    130  f0a9		       06		      .byte.b	(.POS / 15) + 1
    131  f0a9				   .POS       SET	.POS + 1
    129  f0a9					      REPEND
    130  f0aa		       06		      .byte.b	(.POS / 15) + 1
    131  f0aa				   .POS       SET	.POS + 1
    129  f0aa					      REPEND
    130  f0ab		       06		      .byte.b	(.POS / 15) + 1
    131  f0ab				   .POS       SET	.POS + 1
    129  f0ab					      REPEND
    130  f0ac		       06		      .byte.b	(.POS / 15) + 1
    131  f0ac				   .POS       SET	.POS + 1
    129  f0ac					      REPEND
    130  f0ad		       06		      .byte.b	(.POS / 15) + 1
    131  f0ad				   .POS       SET	.POS + 1
    129  f0ad					      REPEND
    130  f0ae		       06		      .byte.b	(.POS / 15) + 1
    131  f0ae				   .POS       SET	.POS + 1
    129  f0ae					      REPEND
    130  f0af		       06		      .byte.b	(.POS / 15) + 1
    131  f0af				   .POS       SET	.POS + 1
    129  f0af					      REPEND
    130  f0b0		       06		      .byte.b	(.POS / 15) + 1
    131  f0b0				   .POS       SET	.POS + 1
    129  f0b0					      REPEND
    130  f0b1		       06		      .byte.b	(.POS / 15) + 1
    131  f0b1				   .POS       SET	.POS + 1
    129  f0b1					      REPEND
    130  f0b2		       06		      .byte.b	(.POS / 15) + 1
    131  f0b2				   .POS       SET	.POS + 1
    129  f0b2					      REPEND
    130  f0b3		       06		      .byte.b	(.POS / 15) + 1
    131  f0b3				   .POS       SET	.POS + 1
    129  f0b3					      REPEND
    130  f0b4		       06		      .byte.b	(.POS / 15) + 1
    131  f0b4				   .POS       SET	.POS + 1
    129  f0b4					      REPEND
    130  f0b5		       06		      .byte.b	(.POS / 15) + 1
    131  f0b5				   .POS       SET	.POS + 1
    129  f0b5					      REPEND
    130  f0b6		       06		      .byte.b	(.POS / 15) + 1
    131  f0b6				   .POS       SET	.POS + 1
    129  f0b6					      REPEND
    130  f0b7		       07		      .byte.b	(.POS / 15) + 1
    131  f0b7				   .POS       SET	.POS + 1
    129  f0b7					      REPEND
    130  f0b8		       07		      .byte.b	(.POS / 15) + 1
    131  f0b8				   .POS       SET	.POS + 1
    129  f0b8					      REPEND
    130  f0b9		       07		      .byte.b	(.POS / 15) + 1
    131  f0b9				   .POS       SET	.POS + 1
    129  f0b9					      REPEND
    130  f0ba		       07		      .byte.b	(.POS / 15) + 1
    131  f0ba				   .POS       SET	.POS + 1
    129  f0ba					      REPEND
    130  f0bb		       07		      .byte.b	(.POS / 15) + 1
    131  f0bb				   .POS       SET	.POS + 1
    129  f0bb					      REPEND
    130  f0bc		       07		      .byte.b	(.POS / 15) + 1
    131  f0bc				   .POS       SET	.POS + 1
    129  f0bc					      REPEND
    130  f0bd		       07		      .byte.b	(.POS / 15) + 1
    131  f0bd				   .POS       SET	.POS + 1
    129  f0bd					      REPEND
    130  f0be		       07		      .byte.b	(.POS / 15) + 1
    131  f0be				   .POS       SET	.POS + 1
    129  f0be					      REPEND
    130  f0bf		       07		      .byte.b	(.POS / 15) + 1
    131  f0bf				   .POS       SET	.POS + 1
    129  f0bf					      REPEND
    130  f0c0		       07		      .byte.b	(.POS / 15) + 1
    131  f0c0				   .POS       SET	.POS + 1
    129  f0c0					      REPEND
    130  f0c1		       07		      .byte.b	(.POS / 15) + 1
    131  f0c1				   .POS       SET	.POS + 1
    129  f0c1					      REPEND
    130  f0c2		       07		      .byte.b	(.POS / 15) + 1
    131  f0c2				   .POS       SET	.POS + 1
    129  f0c2					      REPEND
    130  f0c3		       07		      .byte.b	(.POS / 15) + 1
    131  f0c3				   .POS       SET	.POS + 1
    129  f0c3					      REPEND
    130  f0c4		       07		      .byte.b	(.POS / 15) + 1
    131  f0c4				   .POS       SET	.POS + 1
    129  f0c4					      REPEND
    130  f0c5		       07		      .byte.b	(.POS / 15) + 1
    131  f0c5				   .POS       SET	.POS + 1
    129  f0c5					      REPEND
    130  f0c6		       08		      .byte.b	(.POS / 15) + 1
    131  f0c6				   .POS       SET	.POS + 1
    129  f0c6					      REPEND
    130  f0c7		       08		      .byte.b	(.POS / 15) + 1
    131  f0c7				   .POS       SET	.POS + 1
    129  f0c7					      REPEND
    130  f0c8		       08		      .byte.b	(.POS / 15) + 1
    131  f0c8				   .POS       SET	.POS + 1
    129  f0c8					      REPEND
    130  f0c9		       08		      .byte.b	(.POS / 15) + 1
    131  f0c9				   .POS       SET	.POS + 1
    129  f0c9					      REPEND
    130  f0ca		       08		      .byte.b	(.POS / 15) + 1
    131  f0ca				   .POS       SET	.POS + 1
    129  f0ca					      REPEND
    130  f0cb		       08		      .byte.b	(.POS / 15) + 1
    131  f0cb				   .POS       SET	.POS + 1
    129  f0cb					      REPEND
    130  f0cc		       08		      .byte.b	(.POS / 15) + 1
    131  f0cc				   .POS       SET	.POS + 1
    129  f0cc					      REPEND
    130  f0cd		       08		      .byte.b	(.POS / 15) + 1
    131  f0cd				   .POS       SET	.POS + 1
    129  f0cd					      REPEND
    130  f0ce		       08		      .byte.b	(.POS / 15) + 1
    131  f0ce				   .POS       SET	.POS + 1
    129  f0ce					      REPEND
    130  f0cf		       08		      .byte.b	(.POS / 15) + 1
    131  f0cf				   .POS       SET	.POS + 1
    129  f0cf					      REPEND
    130  f0d0		       08		      .byte.b	(.POS / 15) + 1
    131  f0d0				   .POS       SET	.POS + 1
    129  f0d0					      REPEND
    130  f0d1		       08		      .byte.b	(.POS / 15) + 1
    131  f0d1				   .POS       SET	.POS + 1
    129  f0d1					      REPEND
    130  f0d2		       08		      .byte.b	(.POS / 15) + 1
    131  f0d2				   .POS       SET	.POS + 1
    129  f0d2					      REPEND
    130  f0d3		       08		      .byte.b	(.POS / 15) + 1
    131  f0d3				   .POS       SET	.POS + 1
    129  f0d3					      REPEND
    130  f0d4		       08		      .byte.b	(.POS / 15) + 1
    131  f0d4				   .POS       SET	.POS + 1
    129  f0d4					      REPEND
    130  f0d5		       09		      .byte.b	(.POS / 15) + 1
    131  f0d5				   .POS       SET	.POS + 1
    129  f0d5					      REPEND
    130  f0d6		       09		      .byte.b	(.POS / 15) + 1
    131  f0d6				   .POS       SET	.POS + 1
    129  f0d6					      REPEND
    130  f0d7		       09		      .byte.b	(.POS / 15) + 1
    131  f0d7				   .POS       SET	.POS + 1
    129  f0d7					      REPEND
    130  f0d8		       09		      .byte.b	(.POS / 15) + 1
    131  f0d8				   .POS       SET	.POS + 1
    129  f0d8					      REPEND
    130  f0d9		       09		      .byte.b	(.POS / 15) + 1
    131  f0d9				   .POS       SET	.POS + 1
    129  f0d9					      REPEND
    130  f0da		       09		      .byte.b	(.POS / 15) + 1
    131  f0da				   .POS       SET	.POS + 1
    129  f0da					      REPEND
    130  f0db		       09		      .byte.b	(.POS / 15) + 1
    131  f0db				   .POS       SET	.POS + 1
    129  f0db					      REPEND
    130  f0dc		       09		      .byte.b	(.POS / 15) + 1
    131  f0dc				   .POS       SET	.POS + 1
    129  f0dc					      REPEND
    130  f0dd		       09		      .byte.b	(.POS / 15) + 1
    131  f0dd				   .POS       SET	.POS + 1
    129  f0dd					      REPEND
    130  f0de		       09		      .byte.b	(.POS / 15) + 1
    131  f0de				   .POS       SET	.POS + 1
    129  f0de					      REPEND
    130  f0df		       09		      .byte.b	(.POS / 15) + 1
    131  f0df				   .POS       SET	.POS + 1
    129  f0df					      REPEND
    130  f0e0		       09		      .byte.b	(.POS / 15) + 1
    131  f0e0				   .POS       SET	.POS + 1
    129  f0e0					      REPEND
    130  f0e1		       09		      .byte.b	(.POS / 15) + 1
    131  f0e1				   .POS       SET	.POS + 1
    129  f0e1					      REPEND
    130  f0e2		       09		      .byte.b	(.POS / 15) + 1
    131  f0e2				   .POS       SET	.POS + 1
    129  f0e2					      REPEND
    130  f0e3		       09		      .byte.b	(.POS / 15) + 1
    131  f0e3				   .POS       SET	.POS + 1
    129  f0e3					      REPEND
    130  f0e4		       0a		      .byte.b	(.POS / 15) + 1
    131  f0e4				   .POS       SET	.POS + 1
    129  f0e4					      REPEND
    130  f0e5		       0a		      .byte.b	(.POS / 15) + 1
    131  f0e5				   .POS       SET	.POS + 1
    129  f0e5					      REPEND
    130  f0e6		       0a		      .byte.b	(.POS / 15) + 1
    131  f0e6				   .POS       SET	.POS + 1
    129  f0e6					      REPEND
    130  f0e7		       0a		      .byte.b	(.POS / 15) + 1
    131  f0e7				   .POS       SET	.POS + 1
    129  f0e7					      REPEND
    130  f0e8		       0a		      .byte.b	(.POS / 15) + 1
    131  f0e8				   .POS       SET	.POS + 1
    129  f0e8					      REPEND
    130  f0e9		       0a		      .byte.b	(.POS / 15) + 1
    131  f0e9				   .POS       SET	.POS + 1
    129  f0e9					      REPEND
    130  f0ea		       0a		      .byte.b	(.POS / 15) + 1
    131  f0ea				   .POS       SET	.POS + 1
    129  f0ea					      REPEND
    130  f0eb		       0a		      .byte.b	(.POS / 15) + 1
    131  f0eb				   .POS       SET	.POS + 1
    129  f0eb					      REPEND
    130  f0ec		       0a		      .byte.b	(.POS / 15) + 1
    131  f0ec				   .POS       SET	.POS + 1
    129  f0ec					      REPEND
    130  f0ed		       0a		      .byte.b	(.POS / 15) + 1
    131  f0ed				   .POS       SET	.POS + 1
    129  f0ed					      REPEND
    130  f0ee		       0a		      .byte.b	(.POS / 15) + 1
    131  f0ee				   .POS       SET	.POS + 1
    129  f0ee					      REPEND
    130  f0ef		       0a		      .byte.b	(.POS / 15) + 1
    131  f0ef				   .POS       SET	.POS + 1
    129  f0ef					      REPEND
    130  f0f0		       0a		      .byte.b	(.POS / 15) + 1
    131  f0f0				   .POS       SET	.POS + 1
    129  f0f0					      REPEND
    130  f0f1		       0a		      .byte.b	(.POS / 15) + 1
    131  f0f1				   .POS       SET	.POS + 1
    129  f0f1					      REPEND
    130  f0f2		       0a		      .byte.b	(.POS / 15) + 1
    131  f0f2				   .POS       SET	.POS + 1
    129  f0f2					      REPEND
    130  f0f3		       0b		      .byte.b	(.POS / 15) + 1
    131  f0f3				   .POS       SET	.POS + 1
    129  f0f3					      REPEND
    130  f0f4		       0b		      .byte.b	(.POS / 15) + 1
    131  f0f4				   .POS       SET	.POS + 1
    129  f0f4					      REPEND
    130  f0f5		       0b		      .byte.b	(.POS / 15) + 1
    131  f0f5				   .POS       SET	.POS + 1
    129  f0f5					      REPEND
    130  f0f6		       0b		      .byte.b	(.POS / 15) + 1
    131  f0f6				   .POS       SET	.POS + 1
    129  f0f6					      REPEND
    130  f0f7		       0b		      .byte.b	(.POS / 15) + 1
    131  f0f7				   .POS       SET	.POS + 1
    129  f0f7					      REPEND
    130  f0f8		       0b		      .byte.b	(.POS / 15) + 1
    131  f0f8				   .POS       SET	.POS + 1
    129  f0f8					      REPEND
    130  f0f9		       0b		      .byte.b	(.POS / 15) + 1
    131  f0f9				   .POS       SET	.POS + 1
    129  f0f9					      REPEND
    130  f0fa		       0b		      .byte.b	(.POS / 15) + 1
    131  f0fa				   .POS       SET	.POS + 1
    129  f0fa					      REPEND
    130  f0fb		       0b		      .byte.b	(.POS / 15) + 1
    131  f0fb				   .POS       SET	.POS + 1
    129  f0fb					      REPEND
    130  f0fc		       0b		      .byte.b	(.POS / 15) + 1
    131  f0fc				   .POS       SET	.POS + 1
    132  f0fd					      REPEND
    133  f0fd
    134  f0fd				   pos_x		; (3) subroutine to position the sprite, pass the HPOS in X register.
    135  f0fd		       bd 5d f0 	      lda	Divide15,x	; (2) load the value location at the xth byte in the Divide15 table
    136  f100		       aa		      tax		; (2) Transfer the accumulator to the x register
    137  f101		       85 02		      sta	WSYNC
    138  f103
    139  f103							; ---- this loop takes 5 machine cycles each iteration, that's 15 color clocks.
    140  f103
    141  f103		       ca	   SimpleLoop dex		; (2) decrement x
    142  f104		       d0 fd		      bne	SimpleLoop	; (2/3) branch if not equal
    143  f106		       85 10		      sta	RESP0	; (3) strobe the RESP0 register to set the course position
    144  f108
    145  f108		       60		      rts		; (6) return to caller
    146  f109
    147  f109		       00	   player0    .byte.b	%00000000	; 8BLIT bitmap, one byte per line, reverse order
    148  f10a		       40		      .byte.b	%01000000
    149  f10b		       40		      .byte.b	%01000000
    150  f10c		       40		      .byte.b	%01000000
    151  f10d		       40		      .byte.b	%01000000
    152  f10e		       e0		      .byte.b	%11100000
    153  f10f		       00		      .byte.b	%00000000
    154  f110		       e0		      .byte.b	%11100000
    155  f111		       40		      .byte.b	%01000000
    156  f112		       40		      .byte.b	%01000000
    157  f113		       40		      .byte.b	%01000000
    158  f114		       e0		      .byte.b	%11100000
    159  f115		       00		      .byte.b	%00000000
    160  f116		       e0		      .byte.b	%11100000
    161  f117		       80		      .byte.b	%10000000
    162  f118		       80		      .byte.b	%10000000
    163  f119		       80		      .byte.b	%10000000
    164  f11a		       80		      .byte.b	%10000000
    165  f11b		       00		      .byte.b	%00000000
    166  f11c		       c0		      .byte.b	%11000000
    167  f11d		       a0		      .byte.b	%10100000
    168  f11e		       a0		      .byte.b	%10100000
    169  f11f		       c0		      .byte.b	%11000000
    170  f120		       a0		      .byte.b	%10100000
    171  f121		       c0		      .byte.b	%11000000
    172  f122		       00		      .byte.b	%00000000
    173  f123		       e0		      .byte.b	%11100000
    174  f124		       a0		      .byte.b	%10100000
    175  f125		       a0		      .byte.b	%10100000
    176  f126		       e0		      .byte.b	%11100000
    177  f127		       a0		      .byte.b	%10100000
    178  f128		       e0		      .byte.b	%11100000
    179  f129
    180  fffa					      org	$FFFA
    181  fffa
    182  fffa				   irq
    183  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    184  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    185  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
    186  10000
    187  10000
