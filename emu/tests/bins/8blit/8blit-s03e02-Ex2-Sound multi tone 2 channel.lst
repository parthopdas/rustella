------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex2-Sound multi tone 2 channel.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502	; S03E02 Ex. 2 4 tones, 2 channels, audio subroutines
      2  10000 ????						;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"	; Demonstrates audio generation by setting the audio registers to create 
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex2-Sound multi tone 2 channel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"	; a sounds when the ball bounces, on reset, on arena selection forward and
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex2-Sound multi tone 2 channel.asm
      5  0000 ????						; backwards. Turns volume off after a specified number of frames per sound.
      6  0000 ????						;
      7  0000 ????						; This Episode on Youtube - https://youtu.be/NBE-rEzk4cs
      8  0000 ????						;
      9  0000 ????						; Become a Patron - https://patreon.com/8blit
     10  0000 ????						; 8blit Merch - https://8blit.myspreadshop.com/
     11  0000 ????						; Subscribe to 8Blit - https://www.youtube.com/8blit?sub_confirmation=1
     12  0000 ????						; Follow on Facebook - https://www.facebook.com/8Blit
     13  0000 ????						; Follow on Instagram - https://www.instagram.com/8blit
     14  0000 ????						; Visit the Website - https://www.8blit.com 
     15  0000 ????						;
     16  0000 ????						; Email - 8blit0@gmail.com
     17  0000 ????
     18  0000 ????						;
     19  0000 ????						; F1 (Game Select) Change to next arena based on Right Difficulty Setting 
     20  0000 ????						; F7 (Right Difficulty A) Move forward in list
     21  0000 ????						; F8 (Right Difficulty B) Move backward in list
     22  0000 ????						; F2 (Reset) Randomly select an arena and ball direction
     23  0000 ????						;
     24  0000 ????
     25  0000 ????						; define constants
     26  0000 ????	       00 60	   PF_H       equ	#96	; 2LK playfield height (in segments)
     27  0000 ????						; we're using a 2LK just as a simple way to have a larger ball
     28  0000 ????						; nothing else to worry about so it's low impact. 
     29  0000 ????						; just adjust PF_H accordingly
     30  0000 ????
     31 U0097 ????				      seg.u	vars	; uninitialized segment
     32 U0080					      org	$80	; origin set at base of ram 
     33 U0080
     34 U0080		       00	   b_x	      ds	1	; ball x pos
     35 U0081		       00	   b_y	      ds	1	; ball y pos
     36 U0082		       00	   b_bearing  ds	1	; (0-15) 16 angles 22.5 deg apart
     37 U0083		       00	   b_bearing_old ds	1	; holds the original bearing (direction) of the ball before bounce
     38 U0084		       00	   collision_count ds	1	; collision count
     39 U0085		       00	   pf_count   ds	1	; playfield index
     40 U0086		       00	   pf_prev    ds	1
     41 U0087		       00 00	   PF0_ptr    ds	2
     42 U0089		       00 00	   PF1_ptr    ds	2
     43 U008b		       00 00	   PF2_ptr    ds	2
     44 U008d		       00 00	   PF_col_ptr ds	2
     45 U008f		       00	   PF_col     ds	1
     46 U0090		       00	   r_seed     ds	1	; random seed
     47 U0091		       00	   l_seed     ds	1	; list seed
     48 U0092		       00	   mode       ds	1	; 0 = randomize on reset, 1 = iterate through lfsr
     49 U0093		       00	   swt_reset  ds	1	; locking - 1 if reset was handled, until reset is released
     50 U0094		       00	   swt_select ds	1	; locking - 1 if select was handled, until select is released
     51 U0095		       00 00	   snd_on     ds	2	; 1 byte per audio channel - greater than 0 if sound is playing
     52 U0097
     53  10000 ????				       seg	main	; start of main segment
     54  f000					      org	$F000
     55  f000
     56  f000				   reset
      0  f000					      CLEAN_START		; ouput: all ram/registers 0
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002				  -	      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002				  -	      lxa	#0
      6  f002					      ELSE
      7  f002		       a2 00		      ldx	#0
      8  f004		       8a		      txa
      9  f005					      ENDIF
     10  f005		       a8		      tay
     11  f006		       ca	   .CLEAR_STACK dex
     12  f007		       9a		      txs
     13  f008		       48		      pha
     14  f009		       d0 fb		      bne	.CLEAR_STACK
     15  f00b
     58  f00b
     59  f00b							; generate a random see from the interval timer
     60  f00b		       ad 84 02 	      lda	INTIM	; unknown value to use as an initial random seed
     61  f00e		       85 90		      sta	r_seed	; random seed
     62  f010		       85 91		      sta	l_seed	; iterive seed
     63  f012
     64  f012							; set area values
     65  f012		       a9 15		      lda	#%00010101	; playfield to reflect (default behavior, not nessesary)
     66  f014		       85 0a		      sta	CTRLPF
     67  f016
     68  f016				   soft_reset
     69  f016
     70  f016		       a9 00		      lda	#0
     71  f018		       85 92		      sta	mode	; sets mode to randomize
     72  f01a
     73  f01a							; 'randomly' select an initial bearing (direction)
     74  f01a		       20 a1 f1 	      jsr	galois_lfsr_random	; no need to store the seed for this one
     75  f01d		       29 0f		      and	#$0F	; limit the value to 0-15
     76  f01f		       85 82		      sta	b_bearing
     77  f021
     78  f021							; set the starting position of the ball 
     79  f021		       a9 50		      lda	#80
     80  f023		       85 81		      sta	b_y	; y pos
     81  f025		       85 80		      sta	b_x	; x pos
     82  f027		       a2 04		      ldx	#4	; ball object
     83  f029		       20 bf f1 	      jsr	PositionX	; a = x pos, x = object (index from P0 object address)
     84  f02c
     85  f02c							; lock the graphic object positions
     86  f02c		       85 02		      sta	WSYNC
     87  f02e		       85 2a		      sta	HMOVE	; strobe horizontal move to set fine positions 	       
     88  f030
     89  f030							; 'randomly' select which arena to use, but not the previous
     90  f030		       20 a1 f1 	      jsr	galois_lfsr_random
     91  f033		       29 03		      and	#%00000011	; limit it to our 4 arena's
     92  f035		       c5 86		      cmp	pf_prev
     93  f037		       f0 dd		      beq	soft_reset
     94  f039		       85 86		      sta	pf_prev
     95  f03b
     96  f03b
     97  f03b				   change_arena
     98  f03b		       a6 86		      ldx	pf_prev
     99  f03d
    100  f03d							; get the playfield for the area
    101  f03d		       bd 28 f2 	      lda	PF0_lsb_ptr,x
    102  f040		       85 87		      sta	PF0_ptr
    103  f042		       bd 2c f2 	      lda	PF0_msb_ptr,x
    104  f045		       85 88		      sta	PF0_ptr+1
    105  f047		       bd 30 f2 	      lda	PF1_lsb_ptr,x
    106  f04a		       85 89		      sta	PF1_ptr
    107  f04c		       bd 34 f2 	      lda	PF1_msb_ptr,x
    108  f04f		       85 8a		      sta	PF1_ptr+1
    109  f051		       bd 38 f2 	      lda	PF2_lsb_ptr,x
    110  f054		       85 8b		      sta	PF2_ptr
    111  f056		       bd 3c f2 	      lda	PF2_msb_ptr,x
    112  f059		       85 8c		      sta	PF2_ptr+1
    113  f05b
    114  f05b							; get/set the pallet for the arena
    115  f05b		       bd 20 f2 	      lda	PF_col_lsb_ptr,x
    116  f05e		       85 8d		      sta	PF_col_ptr
    117  f060		       bd 24 f2 	      lda	PF_col_msb_ptr,x
    118  f063		       85 8e		      sta	PF_col_ptr+1
    119  f065
    120  f065		       a0 00		      ldy	#0
    121  f067		       b1 8d		      lda	(PF_col_ptr),y
    122  f069		       85 08		      sta	COLUPF
    123  f06b		       c8		      iny
    124  f06c
    125  f06c		       b1 8d		      lda	(PF_col_ptr),y
    126  f06e		       85 8f		      sta	PF_col
    127  f070
    128  f070				   NextFrame
      0  f070					      VERTICAL_SYNC		; output: a = 0; 3 scanlines
      1  f070		       a9 0e		      lda	#%1110
      2  f072		       85 02	   .VSLP1     sta	WSYNC
      3  f074		       85 00		      sta	VSYNC
      4  f076		       4a		      lsr
      5  f077		       d0 f9		      bne	.VSLP1
    130  f079
    131  f079				   VerticalBlank
    132  f079		       a2 2b		      ldx	#43	; 37sl * 76mc = 2812 
    133  f07b		       8e 96 02 	      stx	TIM64T	; set 64-clock for 43 intervals. 43 * 64mc = 2752mc before timer ends
    134  f07e
    135  f07e							; process the sound channels to turn off volume when counter runs out
    136  f07e		       20 e6 f1 	      jsr	snd_process
    137  f081
    138  f081							; collision detection
    139  f081		       a5 06		      lda	CXBLPF	; ball collision with playfield?
    140  f083		       30 07		      bmi	collision
    141  f085
    142  f085		       a9 00		      lda	#0	; no collision, set collision count to 0
    143  f087		       85 84		      sta	collision_count
    144  f089		       4c c4 f0 	      jmp	no_collision	; bypass collision handling
    145  f08c
    146  f08c							; when a collision occures we try to reflect to a vertical bearing. If on the next frame we're still
    147  f08c							; registering a collision then we try a horizontal bearing. If it's STILL registering a collision 
    148  f08c							; then we reflect it back 180 degrees from the original pre-bounce bearing.
    149  f08c
    150  f08c				   collision
    151  f08c							; a collision occured
    152  f08c		       a5 84		      lda	collision_count	; how many times has a collision occured consecutively
    153  f08e		       d0 1c		      bne	col_on	; branch if collisions are already ongoing
    154  f090
    155  f090		       a2 00		      ldx	#0	; channel 0
    156  f092		       a0 00		      ldy	#0	; sound parameter index from sndbank_*
    157  f094		       20 d1 f1 	      jsr	snd_play	; call the subroutine to load the audio registers
    158  f097
    159  f097		       a5 82		      lda	b_bearing	; get the current bearing
    160  f099		       85 83		      sta	b_bearing_old	; store current missile b_bearing
    161  f09b		       49 ff		      eor	#$FF	; reverse our bearings 
    162  f09d		       85 82		      sta	b_bearing
    163  f09f		       e6 82		      inc	b_bearing	; additive reverse
    164  f0a1		       a5 82		      lda	b_bearing
    165  f0a3		       29 03		      and	#$03	; is bearing N,S,E,W?
    166  f0a5		       d0 02		      bne	col_no_adj
    167  f0a7		       e6 82		      inc	b_bearing	; increment bearing by one offset to prevent continuous reflection
    168  f0a9
    169  f0a9				   col_no_adj
    170  f0a9		       4c c2 f0 	      jmp	collision_done
    171  f0ac
    172  f0ac		       c9 01	   col_on     cmp	#$01	; check collision_count
    173  f0ae		       f0 0b		      beq	reverse_bearing	; first collision in series
    174  f0b0		       c9 03		      cmp	#$03	; check collision_count
    175  f0b2		       90 0e		      bcc	collision_done	; second/third collision in series
    176  f0b4		       d0 0c		      bne	collision_done	; more than three collisions in series
    177  f0b6		       a5 83		      lda	b_bearing_old	; retrieve pre-bounce bearing
    178  f0b8		       4c bd f0 	      jmp	reverse_org_bearing	; reverse bearing it 180 degrees
    179  f0bb
    180  f0bb				   reverse_bearing		; reverse altered bearing
    181  f0bb		       a5 82		      lda	b_bearing
    182  f0bd				   reverse_org_bearing		; reverse original bearing
    183  f0bd		       18		      clc		; clear carry so it's not included in add on next instruction
    184  f0be		       69 08		      adc	#$08	; reverse bearing by 180 degrees
    185  f0c0		       85 82		      sta	b_bearing
    186  f0c2
    187  f0c2				   collision_done
    188  f0c2		       e6 84		      inc	collision_count	; increment the number of consecutive collisions
    189  f0c4				   no_collision
    190  f0c4
    191  f0c4							; move the ball
    192  f0c4		       a5 82		      lda	b_bearing
    193  f0c6		       29 0f		      and	#$0F	; strip the high nibble
    194  f0c8		       aa		      tax
    195  f0c9		       bd 10 f2 	      lda	bearing_offsets,x	; load the x/y offsets based on the current bearing
    196  f0cc		       85 24		      sta	HMBL
    197  f0ce							; update the balls horizontal motion register which will only
    198  f0ce							; use the high nibble where the x offset is stored.
    199  f0ce		       29 0f		      and	#$0F	; strip out the high nibble which leaves only the y offset
    200  f0d0		       38		      sec		; set the carry flag
    201  f0d1		       e9 08		      sbc	#$08	; subtract 8 for 4bit 2's completment +/-
    202  f0d3		       18		      clc		; clear carry flag so it's not used in the following add
    203  f0d4		       65 81		      adc	b_y	; add y offset to current y position
    204  f0d6		       85 81		      sta	b_y	; store the new y position
    205  f0d8
    206  f0d8		       a0 ff		      ldy	#255
    207  f0da		       a2 60		      ldx	#PF_H
    208  f0dc		       86 85		      stx	pf_count
    209  f0de
    210  f0de		       85 02		      sta	WSYNC
    211  f0e0							;--------------------------------------	
    212  f0e0		       85 2a		      sta	HMOVE
    213  f0e2		       85 2c		      sta	CXCLR
    214  f0e4
    215  f0e4				   checktimer
    216  f0e4		       ad 84 02 	      lda	INTIM	; time remaining (or past)
    217  f0e7		       d0 fb		      bne	checktimer	; burn remaining cycles
    218  f0e9
    219  f0e9		       a9 00		      lda	#0	; D1 to 0 to end VBLANK
    220  f0eb		       85 02		      sta	WSYNC
    221  f0ed							;--------------------------------------	
    222  f0ed		       85 01		      sta	VBLANK	; 3   3 - set vertical blank off
    223  f0ef
    224  f0ef
    225  f0ef				   kernel
    226  f0ef		       a5 85		      lda	pf_count	;	     ; 2   2 
    227  f0f1		       29 03		      and	#%011	; 2   4 - binary 3 (4th interation)
    228  f0f3		       d0 01		      bne	skipx	; 3   7 
    229  f0f5		       c8		      iny		; 2   9 
    230  f0f6				   skipx
    231  f0f6
    232  f0f6		       b1 87		      lda	(PF0_ptr),y	; 2  11 
    233  f0f8		       85 02		      sta	WSYNC
    234  f0fa							;--------------------------------------	 
    235  f0fa
    236  f0fa							; draw playfield
    237  f0fa		       85 0d		      sta	PF0	; 3  3
    238  f0fc		       b1 89		      lda	(PF1_ptr),y	; 2  5
    239  f0fe		       85 0e		      sta	PF1	; 3  8
    240  f100		       b1 8b		      lda	(PF2_ptr),y	; 2  10
    241  f102		       85 0f		      sta	PF2	; 3  13
    242  f104		       a5 8f		      lda	PF_col	; 2  15
    243  f106		       85 09		      sta	COLUBK	; 3  18
    244  f108
    245  f108		       a2 00		      ldx	#0	; 2  20 - used to disable ball graphic
    246  f10a		       a5 81		      lda	b_y	; 2  22 - load ball y pos
    247  f10c		       c5 85		      cmp	pf_count	; 2  24 - compare y pos to playfield counter
    248  f10e		       d0 02		      bne	noball	; 3  27 - if it's not the same then continue with disabled ball graphic
    249  f110		       a2 02		      ldx	#2	; 2  29 - ball y pos and playfield counter are same so enable ball graphic
    250  f112
    251  f112				   noball
    252  f112		       86 1f		      stx	ENABL	; 3  31 - enable/disable ball graphic
    253  f114
    254  f114		       85 02		      sta	WSYNC	; 3  34
    255  f116
    256  f116		       c6 85		      dec	pf_count	; 5  39
    257  f118		       d0 d5		      bne	kernel	; 3  42
    258  f11a
    259  f11a							; end of kernel
    260  f11a		       85 02		      sta	WSYNC	; end kernel with a clean scan line
    261  f11c		       a9 00		      lda	#$0
    262  f11e		       85 0d		      sta	PF0
    263  f120		       85 0e		      sta	PF1
    264  f122		       85 0f		      sta	PF2
    265  f124		       85 09		      sta	COLUBK
    266  f126		       85 1f		      sta	ENABL
    267  f128		       a9 02		      lda	#$2	; set D1 = 1 to initiate VBLANK
    268  f12a		       85 01		      sta	VBLANK	; turn off the beam
    269  f12c
    270  f12c
    271  f12c							; ---- overscan (30 scanlines)
    272  f12c		       a2 23		      ldx	#35	; We'll round down, and clean up the remaining cycles with a WSYNC
    273  f12e		       8e 96 02 	      stx	TIM64T	; Set a count of 35 with 64-clock interval
    274  f131
    275  f131							; ---- check switches
    276  f131		       a9 01		      lda	#%00000001	; check reset switch
    277  f133		       2c 82 02 	      bit	SWCHB
    278  f136		       d0 10		      bne	no_reset	; jump of if reset is not pressed
    279  f138		       a5 93		      lda	swt_reset	; load the latching reset register
    280  f13a		       d0 10		      bne	skip_reset	; if non-zero then we've already handled reset so jump
    281  f13c		       e6 93		      inc	swt_reset	; if 0 then latch the register and handle reset
    282  f13e
    283  f13e		       a2 01		      ldx	#1	; channel 1
    284  f140		       a0 01		      ldy	#1	; sound parameter index from sndbank_*
    285  f142		       20 d1 f1 	      jsr	snd_play	; call the subroutine to load the audio registers
    286  f145
    287  f145		       4c 16 f0 	      jmp	soft_reset	; end frame prematurely and soft reset
    288  f148				   no_reset
    289  f148		       a9 00		      lda	#0
    290  f14a		       85 93		      sta	swt_reset	; no reset pressed to unlatch the register 
    291  f14c				   skip_reset
    292  f14c
    293  f14c		       a9 02		      lda	#%00000010	; check game select switch
    294  f14e		       2c 82 02 	      bit	SWCHB
    295  f151		       d0 3b		      bne	no_select
    296  f153		       a5 94		      lda	swt_select
    297  f155		       d0 3b		      bne	skip_select
    298  f157		       e6 94		      inc	swt_select
    299  f159
    300  f159		       a9 01		      lda	#1
    301  f15b		       85 92		      sta	mode	; mode is now interate lfsr
    302  f15d
    303  f15d							; which way to iterate the lfsr?
    304  f15d		       a9 80		      lda	#%10000000
    305  f15f		       2c 82 02 	      bit	SWCHB
    306  f162		       d0 15		      bne	int_advance
    307  f164				   int_inv
    308  f164		       20 b5 f1 	      jsr	galois_lfsr_backward
    309  f167		       29 03		      and	#%00000011	; limit it to our 4 arena's
    310  f169		       c5 86		      cmp	pf_prev
    311  f16b		       f0 f7		      beq	int_inv
    312  f16d		       85 86		      sta	pf_prev
    313  f16f
    314  f16f		       a2 01		      ldx	#1	; channel 1
    315  f171		       a0 02		      ldy	#2	; sound parameter index from sndbank_*
    316  f173		       20 d1 f1 	      jsr	snd_play	; call the subroutine to load the audio registers
    317  f176
    318  f176		       4c 3b f0 	      jmp	change_arena
    319  f179				   int_advance
    320  f179		       20 ab f1 	      jsr	galois_lfsr_forward
    321  f17c		       29 03		      and	#%00000011	; limit it to our 4 arena's
    322  f17e		       c5 86		      cmp	pf_prev
    323  f180		       f0 f7		      beq	int_advance
    324  f182		       85 86		      sta	pf_prev
    325  f184
    326  f184		       a2 01		      ldx	#1	; channel 1
    327  f186		       a0 03		      ldy	#3	; sound parameter index from sndbank_*
    328  f188		       20 d1 f1 	      jsr	snd_play	; call the subroutine to load the audio registers
    329  f18b		       4c 3b f0 	      jmp	change_arena
    330  f18e
    331  f18e				   no_select
    332  f18e		       a9 00		      lda	#0
    333  f190		       85 94		      sta	swt_select
    334  f192				   skip_select
    335  f192
    336  f192		       a5 92		      lda	mode	; check mode
    337  f194		       d0 03		      bne	overscan_timer	; if mode 0, then randomize
    338  f196		       20 a1 f1 	      jsr	galois_lfsr_random	; runs once through at frame end to increase entropy 
    339  f199
    340  f199							; overscan remainder timer -----------
    341  f199				   overscan_timer
    342  f199		       ae 84 02 	      ldx	INTIM
    343  f19c		       d0 fb		      bne	overscan_timer
    344  f19e
    345  f19e		       4c 70 f0 	      jmp	NextFrame	; (3) jump back up to start the next frame
    346  f1a1
    347  f1a1
    348  f1a1							; Galois 8-bit Linear Feedback Shift Registers
    349  f1a1							; https://samiam.org/blog/20130617.html
    350  f1a1				   galois_lfsr_random
    351  f1a1		       a5 90		      lda	r_seed	; keep calling funtion to for better entropy
    352  f1a3		       4a		      lsr		; shift right
    353  f1a4		       90 02		      bcc	noeor0	; if carry 1, then exclusive OR the bits
    354  f1a6		       49 d4		      eor	#$D4	; d4 tap (11010100)
    355  f1a8		       85 90	   noeor0     sta	r_seed
    356  f1aa		       60		      rts
    357  f1ab
    358  f1ab				   galois_lfsr_forward
    359  f1ab		       a5 91		      lda	l_seed
    360  f1ad		       4a		      lsr		; shift right
    361  f1ae		       90 02		      bcc	noeor1	; if carry 1, then exclusive OR the bits
    362  f1b0		       49 d4		      eor	#$D4	; d4 tap (11010100)
    363  f1b2		       85 91	   noeor1     sta	l_seed
    364  f1b4		       60		      rts
    365  f1b5
    366  f1b5				   galois_lfsr_backward
    367  f1b5		       a5 91		      lda	l_seed
    368  f1b7		       0a		      asl		; shift left
    369  f1b8		       90 02		      bcc	noeor2	; if carry 1, then exclusive OR the bits
    370  f1ba		       49 a9		      eor	#$A9	; a9 tap (10101001)
    371  f1bc		       85 91	   noeor2     sta	l_seed
    372  f1be		       60		      rts
    373  f1bf
    374  f1bf
    375  f1bf							; -----------------------------------------------------------------------------
    376  f1bf							; PositionX
    377  f1bf							; A - Horizontal position of the object
    378  f1bf							; X - Object to position
    379  f1bf							;   0 - Player 0
    380  f1bf							;   1 - Player 1
    381  f1bf							;   2 - Missile 0
    382  f1bf							;   3 - Missile 1
    383  f1bf							;   4 - Ball
    384  f1bf							; -----------------------------------------------------------------------------
    385  f1bf
    386  f1bf				   PositionX
    387  f1bf		       38		      sec		;  2 +2 - set the carry flag
    388  f1c0		       85 02		      sta	WSYNC	;  3 +5 - start a new line
    389  f1c2				   DivideLoop
    390  f1c2		       e9 0f		      sbc	#15	;  2  2 - subtract 15
    391  f1c4		       b0 fc		      bcs	DivideLoop	;  2  4 - branch until negative
    392  f1c6		       49 07		      eor	#7	;  2  6 - calculate fine offset
    393  f1c8		       0a		      asl		;  2  8 - shift left
    394  f1c9		       0a		      asl		;  2 10
    395  f1ca		       0a		      asl		;  2 12
    396  f1cb		       0a		      asl		;  2 14
    397  f1cc		       95 20		      sta	HMP0,x	;  5 19 - set fine offset
    398  f1ce		       95 10		      sta	RESP0,x	;  4 23 - set coarse position
    399  f1d0		       60		      rts		;  6 29 - return
    400  f1d1
    401  f1d1							; cues a sound to play. sets audio registers based on table lookup sndbank.
    402  f1d1							; parameters: x = channel (0|1), y = sound to play
    403  f1d1				   snd_play
    404  f1d1		       b9 00 f2 	      lda	sndbank_type,y
    405  f1d4		       95 15		      sta	AUDC0,x	; audio control   
    406  f1d6		       b9 04 f2 	      lda	sndbank_vol,y
    407  f1d9		       95 19		      sta	AUDV0,x	; audio volume
    408  f1db		       b9 08 f2 	      lda	sndbank_pitch,y
    409  f1de		       95 17		      sta	AUDF0,x	; audio frequence
    410  f1e0		       b9 0c f2 	      lda	sndbank_len,y
    411  f1e3		       95 95		      sta	snd_on,x	; len of audio in frames (>0 = sound on)
    412  f1e5		       60		      rts
    413  f1e6
    414  f1e6							; process sound channels to turn off volume when sound length counter runs out
    415  f1e6				   snd_process
    416  f1e6		       a2 01		      ldx	#1	; channel to process, start with channel 1
    417  f1e8				   snd_ch
    418  f1e8		       b5 95		      lda	snd_on,x	; get sound length counter for this channel
    419  f1ea		       f0 08		      beq	snd_done	; are we playing a sound? a>1 
    420  f1ec		       d6 95		      dec	snd_on,x	; yes, decrese the sound length counter for this channel
    421  f1ee		       d0 04		      bne	snd_cont	; did we reach the end of the sound length?
    422  f1f0		       a9 00		      lda	#0	; yes
    423  f1f2		       95 19		      sta	AUDV0,x	; turn off the volume for this channel 
    424  f1f4				   snd_done
    425  f1f4				   snd_cont
    426  f1f4		       ca		      dex		; do it again for channel 0
    427  f1f5		       f0 f1		      beq	snd_ch
    428  f1f7		       60		      rts
    429  f1f8
    430  f200		       00 00 00 00*	      align	$100	; align data
    431  f200
    432  f200							; define sounds, bounce, reset, backward, forward
    433  f200				   sndbank_type
    434  f200		       0c 02 06 06	      .byte.b	$0C, $02, $06, $06
    435  f204				   sndbank_vol
    436  f204		       02 06 04 04	      .byte.b	$02, $06, $04, $04
    437  f208				   sndbank_pitch
    438  f208		       0d 03 09 03	      .byte.b	$0D, $03, $09, $03
    439  f20c				   sndbank_len
    440  f20c		       01 08 03 03	      .byte.b	$01, $08, $03, $03
    441  f210
    442  f210							;index  x-move  y-move  deg	 direction  
    443  f210				   bearing_offsets		;------------------------------------------												
    444  f210		       e0		      .byte.b	#%11100000	; 0	 -2	  0	 90.0	 right
    445  f211		       e7		      .byte.b	#%11100111	; 1	 -2	 -2	 67.5
    446  f212		       e6		      .byte.b	#%11100110	; 2	 -2	 -4	 45.0
    447  f213		       f6		      .byte.b	#%11110110	; 3	 -1	 -4	 22.5
    448  f214		       06		      .byte.b	#%00000110	; 4	  0	 -4	 0/360	 up
    449  f215		       16		      .byte.b	#%00010110	; 5	 +1	 -4	 337.5
    450  f216		       26		      .byte.b	#%00100110	; 6	 +2	 -4	 315.0
    451  f217		       27		      .byte.b	#%00100111	; 7	 +2	 -2	 292.5	
    452  f218		       28		      .byte.b	#%00101000	; 8	 +2	  0	 270.0	 left
    453  f219		       29		      .byte.b	#%00101001	; 9	 +2	 +2	 247.5
    454  f21a		       2a		      .byte.b	#%00101010	; 10	 +2	 +4	 225.0
    455  f21b		       1a		      .byte.b	#%00011010	; 11	 +1	 +4	 202.5
    456  f21c		       0a		      .byte.b	#%00001010	; 12	  0	 +4	 180.0	 down
    457  f21d		       fa		      .byte.b	#%11111010	; 13	 -1	 +4	 157.5
    458  f21e		       ea		      .byte.b	#%11101010	; 14	 -2	 +4	 135.0
    459  f21f		       e9		      .byte.b	#%11101001	; 15	 -2	 +2	 112.5;
    460  f220
    461  f220							; define our arenas
    462  f220				   PF_col_lsb_ptr
    463  f220		       40		      .byte.b	<PF_col_atari
    464  f221		       8a		      .byte.b	<PF_col_pattern
    465  f222		       d4		      .byte.b	<PF_col_combat
    466  f223		       1e		      .byte.b	<PF_col_activision
    467  f224				   PF_col_msb_ptr
    468  f224		       f2		      .byte.b	>PF_col_atari
    469  f225		       f2		      .byte.b	>PF_col_pattern
    470  f226		       f2		      .byte.b	>PF_col_combat
    471  f227		       f3		      .byte.b	>PF_col_activision
    472  f228				   PF0_lsb_ptr
    473  f228		       42		      .byte.b	<PF0_data_atari
    474  f229		       8c		      .byte.b	<PF0_data_pattern
    475  f22a		       d6		      .byte.b	<PF0_data_combat
    476  f22b		       20		      .byte.b	<PF0_data_activision
    477  f22c				   PF0_msb_ptr
    478  f22c		       f2		      .byte.b	>PF0_data_atari
    479  f22d		       f2		      .byte.b	>PF0_data_pattern
    480  f22e		       f2		      .byte.b	>PF0_data_combat
    481  f22f		       f3		      .byte.b	>PF0_data_activision
    482  f230				   PF1_lsb_ptr
    483  f230		       5a		      .byte.b	<PF1_data_atari
    484  f231		       a4		      .byte.b	<PF1_data_pattern
    485  f232		       ee		      .byte.b	<PF1_data_combat
    486  f233		       38		      .byte.b	<PF1_data_activision
    487  f234				   PF1_msb_ptr
    488  f234		       f2		      .byte.b	>PF1_data_atari
    489  f235		       f2		      .byte.b	>PF1_data_pattern
    490  f236		       f2		      .byte.b	>PF1_data_combat
    491  f237		       f3		      .byte.b	>PF1_data_activision
    492  f238				   PF2_lsb_ptr
    493  f238		       72		      .byte.b	<PF2_data_atari
    494  f239		       bc		      .byte.b	<PF2_data_pattern
    495  f23a		       06		      .byte.b	<PF2_data_combat
    496  f23b		       50		      .byte.b	<PF2_data_activision
    497  f23c				   PF2_msb_ptr
    498  f23c		       f2		      .byte.b	>PF2_data_atari
    499  f23d		       f2		      .byte.b	>PF2_data_pattern
    500  f23e		       f3		      .byte.b	>PF2_data_combat
    501  f23f		       f3		      .byte.b	>PF2_data_activision
    502  f240
------- FILE playfields/pf_atari.asm LEVEL 2 PASS 2
      0  f240					      INCLUDE	"playfields/pf_atari.asm"
      1  f240				   PF_col_atari
      2  f240		       46		      .byte.b	#$46	; foreground
      3  f241		       00		      .byte.b	#$00	; background
      4  f242
      5  f242				   PF0_data_atari
      6  f242		       f0		      .byte.b	#%11110000	;<- first
      7  f243		       10		      .byte.b	#%00010000
      8  f244		       10		      .byte.b	#%00010000
      9  f245		       10		      .byte.b	#%00010000
     10  f246		       10		      .byte.b	#%00010000
     11  f247		       10		      .byte.b	#%00010000
     12  f248		       10		      .byte.b	#%00010000
     13  f249		       10		      .byte.b	#%00010000
     14  f24a		       10		      .byte.b	#%00010000
     15  f24b		       10		      .byte.b	#%00010000
     16  f24c		       10		      .byte.b	#%00010000
     17  f24d		       10		      .byte.b	#%00010000
     18  f24e		       10		      .byte.b	#%00010000
     19  f24f		       10		      .byte.b	#%00010000
     20  f250		       10		      .byte.b	#%00010000
     21  f251		       10		      .byte.b	#%00010000
     22  f252		       10		      .byte.b	#%00010000
     23  f253		       10		      .byte.b	#%00010000
     24  f254		       10		      .byte.b	#%00010000
     25  f255		       10		      .byte.b	#%00010000
     26  f256		       10		      .byte.b	#%00010000
     27  f257		       10		      .byte.b	#%00010000
     28  f258		       10		      .byte.b	#%00010000
     29  f259		       f0		      .byte.b	#%11110000	;<- last
     30  f25a
     31  f25a				   PF1_data_atari
     32  f25a		       ff		      .byte.b	#%11111111	;<- first
     33  f25b		       00		      .byte.b	#%00000000
     34  f25c		       00		      .byte.b	#%00000000
     35  f25d		       00		      .byte.b	#%00000000
     36  f25e		       00		      .byte.b	#%00000000
     37  f25f		       00		      .byte.b	#%00000000
     38  f260		       00		      .byte.b	#%00000000
     39  f261		       00		      .byte.b	#%00000000
     40  f262		       00		      .byte.b	#%00000000
     41  f263		       00		      .byte.b	#%00000000
     42  f264		       00		      .byte.b	#%00000000
     43  f265		       00		      .byte.b	#%00000000
     44  f266		       00		      .byte.b	#%00000000
     45  f267		       00		      .byte.b	#%00000000
     46  f268		       00		      .byte.b	#%00000000
     47  f269		       00		      .byte.b	#%00000000
     48  f26a		       00		      .byte.b	#%00000000
     49  f26b		       00		      .byte.b	#%00000000
     50  f26c		       03		      .byte.b	#%00000011
     51  f26d		       03		      .byte.b	#%00000011
     52  f26e		       00		      .byte.b	#%00000000
     53  f26f		       00		      .byte.b	#%00000000
     54  f270		       00		      .byte.b	#%00000000
     55  f271		       ff		      .byte.b	#%11111111	;<- last
     56  f272
     57  f272				   PF2_data_atari
     58  f272		       ff		      .byte.b	#%11111111	;<- first
     59  f273		       00		      .byte.b	#%00000000
     60  f274		       00		      .byte.b	#%00000000
     61  f275		       b0		      .byte.b	#%10110000
     62  f276		       b0		      .byte.b	#%10110000
     63  f277		       b0		      .byte.b	#%10110000
     64  f278		       b0		      .byte.b	#%10110000
     65  f279		       b0		      .byte.b	#%10110000
     66  f27a		       b0		      .byte.b	#%10110000
     67  f27b		       b0		      .byte.b	#%10110000
     68  f27c		       b0		      .byte.b	#%10110000
     69  f27d		       98		      .byte.b	#%10011000
     70  f27e		       98		      .byte.b	#%10011000
     71  f27f		       98		      .byte.b	#%10011000
     72  f280		       9c		      .byte.b	#%10011100
     73  f281		       8c		      .byte.b	#%10001100
     74  f282		       8e		      .byte.b	#%10001110
     75  f283		       87		      .byte.b	#%10000111
     76  f284		       83		      .byte.b	#%10000011
     77  f285		       81		      .byte.b	#%10000001
     78  f286		       00		      .byte.b	#%00000000
     79  f287		       00		      .byte.b	#%00000000
     80  f288		       00		      .byte.b	#%00000000
     81  f289		       ff		      .byte.b	#%11111111	;<- last
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex2-Sound multi tone 2 channel.asm
------- FILE playfields/pf_pattern.asm LEVEL 2 PASS 2
      0  f28a					      INCLUDE	"playfields/pf_pattern.asm"
      1  f28a				   PF_col_pattern
      2  f28a		       0e		      .byte.b	#$0E	; foreground
      3  f28b		       02		      .byte.b	#$02	; background
      4  f28c
      5  f28c				   PF0_data_pattern
      6  f28c		       f0		      .byte.b	#%11110000	;<- first
      7  f28d		       10		      .byte.b	#%00010000
      8  f28e		       10		      .byte.b	#%00010000
      9  f28f		       10		      .byte.b	#%00010000
     10  f290		       10		      .byte.b	#%00010000
     11  f291		       10		      .byte.b	#%00010000
     12  f292		       10		      .byte.b	#%00010000
     13  f293		       10		      .byte.b	#%00010000
     14  f294		       10		      .byte.b	#%00010000
     15  f295		       10		      .byte.b	#%00010000
     16  f296		       10		      .byte.b	#%00010000
     17  f297		       10		      .byte.b	#%00010000
     18  f298		       10		      .byte.b	#%00010000
     19  f299		       10		      .byte.b	#%00010000
     20  f29a		       10		      .byte.b	#%00010000
     21  f29b		       10		      .byte.b	#%00010000
     22  f29c		       10		      .byte.b	#%00010000
     23  f29d		       10		      .byte.b	#%00010000
     24  f29e		       10		      .byte.b	#%00010000
     25  f29f		       10		      .byte.b	#%00010000
     26  f2a0		       10		      .byte.b	#%00010000
     27  f2a1		       10		      .byte.b	#%00010000
     28  f2a2		       10		      .byte.b	#%00010000
     29  f2a3		       ff		      .byte.b	#%11111111	;<- last
     30  f2a4
     31  f2a4				   PF1_data_pattern
     32  f2a4		       ff		      .byte.b	#%11111111	;<- first
     33  f2a5		       00		      .byte.b	#%00000000
     34  f2a6		       00		      .byte.b	#%00000000
     35  f2a7		       00		      .byte.b	#%00000000
     36  f2a8		       00		      .byte.b	#%00000000
     37  f2a9		       00		      .byte.b	#%00000000
     38  f2aa		       00		      .byte.b	#%00000000
     39  f2ab		       00		      .byte.b	#%00000000
     40  f2ac		       40		      .byte.b	#%01000000
     41  f2ad		       00		      .byte.b	#%00000000
     42  f2ae		       00		      .byte.b	#%00000000
     43  f2af		       02		      .byte.b	#%00000010
     44  f2b0		       00		      .byte.b	#%00000000
     45  f2b1		       08		      .byte.b	#%00001000
     46  f2b2		       00		      .byte.b	#%00000000
     47  f2b3		       00		      .byte.b	#%00000000
     48  f2b4		       40		      .byte.b	#%01000000
     49  f2b5		       00		      .byte.b	#%00000000
     50  f2b6		       00		      .byte.b	#%00000000
     51  f2b7		       00		      .byte.b	#%00000000
     52  f2b8		       00		      .byte.b	#%00000000
     53  f2b9		       00		      .byte.b	#%00000000
     54  f2ba		       00		      .byte.b	#%00000000
     55  f2bb		       ff		      .byte.b	#%11111111	;<- last
     56  f2bc
     57  f2bc				   PF2_data_pattern
     58  f2bc		       ff		      .byte.b	#%11111111	;<- first
     59  f2bd		       00		      .byte.b	#%00000000
     60  f2be		       00		      .byte.b	#%00000000
     61  f2bf		       00		      .byte.b	#%00000000
     62  f2c0		       00		      .byte.b	#%00000000
     63  f2c1		       00		      .byte.b	#%00000000
     64  f2c2		       20		      .byte.b	#%00100000
     65  f2c3		       21		      .byte.b	#%00100001
     66  f2c4		       20		      .byte.b	#%00100000
     67  f2c5		       20		      .byte.b	#%00100000
     68  f2c6		       20		      .byte.b	#%00100000
     69  f2c7		       20		      .byte.b	#%00100000
     70  f2c8		       20		      .byte.b	#%00100000
     71  f2c9		       20		      .byte.b	#%00100000
     72  f2ca		       20		      .byte.b	#%00100000
     73  f2cb		       20		      .byte.b	#%00100000
     74  f2cc		       20		      .byte.b	#%00100000
     75  f2cd		       21		      .byte.b	#%00100001
     76  f2ce		       20		      .byte.b	#%00100000
     77  f2cf		       00		      .byte.b	#%00000000
     78  f2d0		       00		      .byte.b	#%00000000
     79  f2d1		       00		      .byte.b	#%00000000
     80  f2d2		       00		      .byte.b	#%00000000
     81  f2d3		       ff		      .byte.b	#%11111111	;<- last	 
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex2-Sound multi tone 2 channel.asm
------- FILE playfields/pf_combat.asm LEVEL 2 PASS 2
      0  f2d4					      INCLUDE	"playfields/pf_combat.asm"
      1  f2d4				   PF_col_combat
      2  f2d4		       2c		      .byte.b	#$2C	; foreground
      3  f2d5		       dc		      .byte.b	#$DC	; background
      4  f2d6
      5  f2d6				   PF0_data_combat
      6  f2d6		       f0		      .byte.b	#%11110000	;<- first
      7  f2d7		       10		      .byte.b	#%00010000
      8  f2d8		       10		      .byte.b	#%00010000
      9  f2d9		       10		      .byte.b	#%00010000
     10  f2da		       10		      .byte.b	#%00010000
     11  f2db		       10		      .byte.b	#%00010000
     12  f2dc		       10		      .byte.b	#%00010000
     13  f2dd		       10		      .byte.b	#%00010000
     14  f2de		       10		      .byte.b	#%00010000
     15  f2df		       10		      .byte.b	#%00010000
     16  f2e0		       10		      .byte.b	#%00010000
     17  f2e1		       10		      .byte.b	#%00010000
     18  f2e2		       10		      .byte.b	#%00010000
     19  f2e3		       10		      .byte.b	#%00010000
     20  f2e4		       10		      .byte.b	#%00010000
     21  f2e5		       10		      .byte.b	#%00010000
     22  f2e6		       10		      .byte.b	#%00010000
     23  f2e7		       10		      .byte.b	#%00010000
     24  f2e8		       10		      .byte.b	#%00010000
     25  f2e9		       10		      .byte.b	#%00010000
     26  f2ea		       10		      .byte.b	#%00010000
     27  f2eb		       10		      .byte.b	#%00010000
     28  f2ec		       10		      .byte.b	#%00010000
     29  f2ed		       f0		      .byte.b	#%11110000	;<- last
     30  f2ee
     31  f2ee				   PF1_data_combat
     32  f2ee		       ff		      .byte.b	#%11111111	;<- first
     33  f2ef		       00		      .byte.b	#%00000000
     34  f2f0		       00		      .byte.b	#%00000000
     35  f2f1		       00		      .byte.b	#%00000000
     36  f2f2		       70		      .byte.b	#%01110000
     37  f2f3		       00		      .byte.b	#%00000000
     38  f2f4		       00		      .byte.b	#%00000000
     39  f2f5		       00		      .byte.b	#%00000000
     40  f2f6		       c0		      .byte.b	#%11000000
     41  f2f7		       40		      .byte.b	#%01000000
     42  f2f8		       46		      .byte.b	#%01000110
     43  f2f9		       46		      .byte.b	#%01000110
     44  f2fa		       40		      .byte.b	#%01000000
     45  f2fb		       40		      .byte.b	#%01000000
     46  f2fc		       c0		      .byte.b	#%11000000
     47  f2fd		       00		      .byte.b	#%00000000
     48  f2fe		       00		      .byte.b	#%00000000
     49  f2ff		       00		      .byte.b	#%00000000
     50  f300		       70		      .byte.b	#%01110000
     51  f301		       00		      .byte.b	#%00000000
     52  f302		       00		      .byte.b	#%00000000
     53  f303		       00		      .byte.b	#%00000000
     54  f304		       00		      .byte.b	#%00000000
     55  f305		       ff		      .byte.b	#%11111111	;<- last
     56  f306
     57  f306				   PF2_data_combat
     58  f306		       ff		      .byte.b	#%11111111	;<- first
     59  f307		       80		      .byte.b	#%10000000
     60  f308		       80		      .byte.b	#%10000000
     61  f309		       00		      .byte.b	#%00000000
     62  f30a		       00		      .byte.b	#%00000000
     63  f30b		       00		      .byte.b	#%00000000
     64  f30c		       0e		      .byte.b	#%00001110
     65  f30d		       02		      .byte.b	#%00000010
     66  f30e		       00		      .byte.b	#%00000000
     67  f30f		       00		      .byte.b	#%00000000
     68  f310		       00		      .byte.b	#%00000000
     69  f311		       00		      .byte.b	#%00000000
     70  f312		       00		      .byte.b	#%00000000
     71  f313		       00		      .byte.b	#%00000000
     72  f314		       00		      .byte.b	#%00000000
     73  f315		       00		      .byte.b	#%00000000
     74  f316		       02		      .byte.b	#%00000010
     75  f317		       0e		      .byte.b	#%00001110
     76  f318		       00		      .byte.b	#%00000000
     77  f319		       00		      .byte.b	#%00000000
     78  f31a		       00		      .byte.b	#%00000000
     79  f31b		       80		      .byte.b	#%10000000
     80  f31c		       80		      .byte.b	#%10000000
     81  f31d		       ff		      .byte.b	#%11111111	;<- last
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex2-Sound multi tone 2 channel.asm
------- FILE playfields/pf_activision.asm LEVEL 2 PASS 2
      0  f31e					      INCLUDE	"playfields/pf_activision.asm"
      1  f31e				   PF_col_activision
      2  f31e		       0e		      .byte.b	#$0E	; foreground
      3  f31f		       c6		      .byte.b	#$C6	; background
      4  f320
      5  f320				   PF0_data_activision
      6  f320		       f0		      .byte.b	#%11110000	;<- first
      7  f321		       10		      .byte.b	#%00010000
      8  f322		       10		      .byte.b	#%00010000
      9  f323		       10		      .byte.b	#%00010000
     10  f324		       10		      .byte.b	#%00010000
     11  f325		       10		      .byte.b	#%00010000
     12  f326		       10		      .byte.b	#%00010000
     13  f327		       10		      .byte.b	#%00010000
     14  f328		       10		      .byte.b	#%00010000
     15  f329		       10		      .byte.b	#%00010000
     16  f32a		       10		      .byte.b	#%00010000
     17  f32b		       10		      .byte.b	#%00010000
     18  f32c		       10		      .byte.b	#%00010000
     19  f32d		       10		      .byte.b	#%00010000
     20  f32e		       10		      .byte.b	#%00010000
     21  f32f		       10		      .byte.b	#%00010000
     22  f330		       10		      .byte.b	#%00010000
     23  f331		       10		      .byte.b	#%00010000
     24  f332		       10		      .byte.b	#%00010000
     25  f333		       10		      .byte.b	#%00010000
     26  f334		       10		      .byte.b	#%00010000
     27  f335		       10		      .byte.b	#%00010000
     28  f336		       10		      .byte.b	#%00010000
     29  f337		       f0		      .byte.b	#%11110000	;<- last
     30  f338
     31  f338				   PF1_data_activision
     32  f338		       ff		      .byte.b	#%11111111	;<- first
     33  f339		       00		      .byte.b	#%00000000
     34  f33a		       00		      .byte.b	#%00000000
     35  f33b		       00		      .byte.b	#%00000000
     36  f33c		       00		      .byte.b	#%00000000
     37  f33d		       00		      .byte.b	#%00000000
     38  f33e		       00		      .byte.b	#%00000000
     39  f33f		       03		      .byte.b	#%00000011
     40  f340		       00		      .byte.b	#%00000000
     41  f341		       00		      .byte.b	#%00000000
     42  f342		       00		      .byte.b	#%00000000
     43  f343		       00		      .byte.b	#%00000000
     44  f344		       00		      .byte.b	#%00000000
     45  f345		       00		      .byte.b	#%00000000
     46  f346		       00		      .byte.b	#%00000000
     47  f347		       00		      .byte.b	#%00000000
     48  f348		       00		      .byte.b	#%00000000
     49  f349		       00		      .byte.b	#%00000000
     50  f34a		       00		      .byte.b	#%00000000
     51  f34b		       00		      .byte.b	#%00000000
     52  f34c		       00		      .byte.b	#%00000000
     53  f34d		       00		      .byte.b	#%00000000
     54  f34e		       00		      .byte.b	#%00000000
     55  f34f		       ff		      .byte.b	#%11111111	;<- last
     56  f350
     57  f350				   PF2_data_activision
     58  f350		       ff		      .byte.b	#%11111111	;<- first
     59  f351		       00		      .byte.b	#%00000000
     60  f352		       00		      .byte.b	#%00000000
     61  f353		       00		      .byte.b	#%00000000
     62  f354		       00		      .byte.b	#%00000000
     63  f355		       00		      .byte.b	#%00000000
     64  f356		       00		      .byte.b	#%00000000
     65  f357		       07		      .byte.b	#%00000111
     66  f358		       08		      .byte.b	#%00001000
     67  f359		       10		      .byte.b	#%00010000
     68  f35a		       10		      .byte.b	#%00010000
     69  f35b		       20		      .byte.b	#%00100000
     70  f35c		       20		      .byte.b	#%00100000
     71  f35d		       40		      .byte.b	#%01000000
     72  f35e		       80		      .byte.b	#%10000000
     73  f35f		       80		      .byte.b	#%10000000
     74  f360		       00		      .byte.b	#%00000000
     75  f361		       00		      .byte.b	#%00000000
     76  f362		       00		      .byte.b	#%00000000
     77  f363		       00		      .byte.b	#%00000000
     78  f364		       00		      .byte.b	#%00000000
     79  f365		       00		      .byte.b	#%00000000
     80  f366		       00		      .byte.b	#%00000000
     81  f367		       ff		      .byte.b	#%11111111	;<- last
------- FILE D:\src\u\s\emu\tests\bins\8blit\8blit-s03e02-Ex2-Sound multi tone 2 channel.asm
    507  f368
    508  fffa					      org	$FFFA
    509  fffa
    510  fffa		       00 f0		      .word.w	reset	; NMI	($FFFA)
    511  fffc		       00 f0		      .word.w	reset	; RESET ($FFFC)
    512  fffe		       00 f0		      .word.w	reset	; IRQ ($FFFE)
